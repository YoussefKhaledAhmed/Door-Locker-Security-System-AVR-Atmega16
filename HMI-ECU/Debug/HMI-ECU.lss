
HMI-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00002d6e  00002e02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800196  00800196  00002f38  2**0
                  ALLOC
  3 .stab         00002be0  00000000  00000000  00002f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001422  00000000  00000000  00005b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000707a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aacc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aeb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__vector_3>
      10:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__vector_6>
      1c:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__vector_7>
      20:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__vector_8>
      24:	0c 94 87 12 	jmp	0x250e	; 0x250e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

#include "HMI_FUNCTIONS.h"
#include <avr/io.h>

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <main+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <main+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <main+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
	uint8 password[5] = {};
     b54:	85 e0       	ldi	r24, 0x05	; 5
     b56:	fe 01       	movw	r30, r28
     b58:	32 96       	adiw	r30, 0x02	; 2
     b5a:	df 01       	movw	r26, r30
     b5c:	98 2f       	mov	r25, r24
     b5e:	1d 92       	st	X+, r1
     b60:	9a 95       	dec	r25
     b62:	e9 f7       	brne	.-6      	; 0xb5e <main+0x18>
	uint8 main_menu_choice = 0;
     b64:	19 82       	std	Y+1, r1	; 0x01
	SREG |= (1<<7);
     b66:	af e5       	ldi	r26, 0x5F	; 95
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	ef e5       	ldi	r30, 0x5F	; 95
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	8c 93       	st	X, r24
	HMI_init();
     b74:	0e 94 cd 05 	call	0xb9a	; 0xb9a <HMI_init>
	HMI_firstTimeOrChangePassword(password);
     b78:	ce 01       	movw	r24, r28
     b7a:	02 96       	adiw	r24, 0x02	; 2
     b7c:	0e 94 06 06 	call	0xc0c	; 0xc0c <HMI_firstTimeOrChangePassword>
	HMI_sendPassword(password);
     b80:	ce 01       	movw	r24, r28
     b82:	02 96       	adiw	r24, 0x02	; 2
     b84:	0e 94 9b 07 	call	0xf36	; 0xf36 <HMI_sendPassword>
	while(1)
	{
	main_menu_choice = HMI_mainMenu();
     b88:	0e 94 c3 07 	call	0xf86	; 0xf86 <HMI_mainMenu>
     b8c:	89 83       	std	Y+1, r24	; 0x01
	HMI_openOrError(password,main_menu_choice);
     b8e:	ce 01       	movw	r24, r28
     b90:	02 96       	adiw	r24, 0x02	; 2
     b92:	69 81       	ldd	r22, Y+1	; 0x01
     b94:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <HMI_openOrError>
     b98:	f7 cf       	rjmp	.-18     	; 0xb88 <main+0x42>

00000b9a <HMI_init>:
/*
 * input: void
 * return: void
 * Description: initializing the HMI_ECU (i.e. initializing the used drivers [UART , LCD])
 */
void HMI_init (void){
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	2c 97       	sbiw	r28, 0x0c	; 12
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
	/************************* UART initialization ********************/
	/* configuration is a structure of (uart_config type):            *
	 * no_of_bits_per_frame , parity_mode , no_of_stop_bits , bit rate*/
	uart_config configuration = {EIGHT_BITS , DISABLED , ONE_BIT , 9600};
     bae:	ce 01       	movw	r24, r28
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	99 87       	std	Y+9, r25	; 0x09
     bb4:	88 87       	std	Y+8, r24	; 0x08
     bb6:	ef e7       	ldi	r30, 0x7F	; 127
     bb8:	f1 e0       	ldi	r31, 0x01	; 1
     bba:	fb 87       	std	Y+11, r31	; 0x0b
     bbc:	ea 87       	std	Y+10, r30	; 0x0a
     bbe:	f7 e0       	ldi	r31, 0x07	; 7
     bc0:	fc 87       	std	Y+12, r31	; 0x0c
     bc2:	ea 85       	ldd	r30, Y+10	; 0x0a
     bc4:	fb 85       	ldd	r31, Y+11	; 0x0b
     bc6:	00 80       	ld	r0, Z
     bc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     bca:	9b 85       	ldd	r25, Y+11	; 0x0b
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	9b 87       	std	Y+11, r25	; 0x0b
     bd0:	8a 87       	std	Y+10, r24	; 0x0a
     bd2:	e8 85       	ldd	r30, Y+8	; 0x08
     bd4:	f9 85       	ldd	r31, Y+9	; 0x09
     bd6:	00 82       	st	Z, r0
     bd8:	88 85       	ldd	r24, Y+8	; 0x08
     bda:	99 85       	ldd	r25, Y+9	; 0x09
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	99 87       	std	Y+9, r25	; 0x09
     be0:	88 87       	std	Y+8, r24	; 0x08
     be2:	9c 85       	ldd	r25, Y+12	; 0x0c
     be4:	91 50       	subi	r25, 0x01	; 1
     be6:	9c 87       	std	Y+12, r25	; 0x0c
     be8:	ec 85       	ldd	r30, Y+12	; 0x0c
     bea:	ee 23       	and	r30, r30
     bec:	51 f7       	brne	.-44     	; 0xbc2 <HMI_init+0x28>
	/* passing the configuration to the UART_init function */
	UART_init(&configuration);
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <UART_init>
	/************************* LCD_init ************************/
	LCD_init();
     bf6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <LCD_init>
}
     bfa:	2c 96       	adiw	r28, 0x0c	; 12
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <HMI_firstTimeOrChangePassword>:
 * return: void
 * description:it basically a function that is responsible for taking the password for the first
 * time or when it's required to change the old one and confirming it if it's confirmed
 * so, the password is saved in the array that is passed to this function through its address.
 */
void HMI_firstTimeOrChangePassword (uint8 *const pass_ptr){
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	ad 97       	sbiw	r28, 0x2d	; 45
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	9d a7       	std	Y+45, r25	; 0x2d
     c26:	8c a7       	std	Y+44, r24	; 0x2c
	 * check_loop: is the index used in the 2 passwords matching check loop.                *
	 * check_2_passwords: is a number used to check if all the elements in the password and *
	 * the confirmation password are exact the same.                                        *
	 * **************************************************************************************/

	uint8 confirm_pass[5] = {0} , password_index = 0 , end_key = 0 ;
     c28:	85 e0       	ldi	r24, 0x05	; 5
     c2a:	fe 01       	movw	r30, r28
     c2c:	b3 96       	adiw	r30, 0x23	; 35
     c2e:	df 01       	movw	r26, r30
     c30:	98 2f       	mov	r25, r24
     c32:	1d 92       	st	X+, r1
     c34:	9a 95       	dec	r25
     c36:	e9 f7       	brne	.-6      	; 0xc32 <HMI_firstTimeOrChangePassword+0x26>
     c38:	1a a2       	std	Y+34, r1	; 0x22
     c3a:	19 a2       	std	Y+33, r1	; 0x21
	uint8 *passwords_ptr[2] = {pass_ptr , confirm_pass} , check_loop = 0 , check_2_passwords = 0;
     c3c:	8c a5       	ldd	r24, Y+44	; 0x2c
     c3e:	9d a5       	ldd	r25, Y+45	; 0x2d
     c40:	99 a7       	std	Y+41, r25	; 0x29
     c42:	88 a7       	std	Y+40, r24	; 0x28
     c44:	ce 01       	movw	r24, r28
     c46:	83 96       	adiw	r24, 0x23	; 35
     c48:	9b a7       	std	Y+43, r25	; 0x2b
     c4a:	8a a7       	std	Y+42, r24	; 0x2a
     c4c:	18 a2       	std	Y+32, r1	; 0x20
     c4e:	1f 8e       	std	Y+31, r1	; 0x1f
	/* the following do..while loop is for taking the password and confirming that its the
	 * one that the user want to set */
	do{
		LCD_clearScreen();
     c50:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_clearScreen>
		LCD_displayString("please enter the password:");
     c54:	80 e6       	ldi	r24, 0x60	; 96
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
		LCD_moveCursor(1, 0);
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_moveCursor>
		/* the following for loop is for filling the pass_ptr and the confirm_pass arrays */
		for (int loop = 0 ; loop < 2 ; loop++)
     c64:	1e 8e       	std	Y+30, r1	; 0x1e
     c66:	1d 8e       	std	Y+29, r1	; 0x1d
     c68:	ad c0       	rjmp	.+346    	; 0xdc4 <HMI_firstTimeOrChangePassword+0x1b8>
		{
			for(password_index = 0 ; password_index < 5 ; password_index++)
     c6a:	1a a2       	std	Y+34, r1	; 0x22
     c6c:	8f c0       	rjmp	.+286    	; 0xd8c <HMI_firstTimeOrChangePassword+0x180>
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e8       	ldi	r25, 0x80	; 128
     c72:	ab eb       	ldi	r26, 0xBB	; 187
     c74:	b4 e4       	ldi	r27, 0x44	; 68
     c76:	89 8f       	std	Y+25, r24	; 0x19
     c78:	9a 8f       	std	Y+26, r25	; 0x1a
     c7a:	ab 8f       	std	Y+27, r26	; 0x1b
     c7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c7e:	69 8d       	ldd	r22, Y+25	; 0x19
     c80:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c82:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c84:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	4a e7       	ldi	r20, 0x7A	; 122
     c8c:	53 e4       	ldi	r21, 0x43	; 67
     c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	8d 8b       	std	Y+21, r24	; 0x15
     c98:	9e 8b       	std	Y+22, r25	; 0x16
     c9a:	af 8b       	std	Y+23, r26	; 0x17
     c9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c9e:	6d 89       	ldd	r22, Y+21	; 0x15
     ca0:	7e 89       	ldd	r23, Y+22	; 0x16
     ca2:	8f 89       	ldd	r24, Y+23	; 0x17
     ca4:	98 8d       	ldd	r25, Y+24	; 0x18
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e8       	ldi	r20, 0x80	; 128
     cac:	5f e3       	ldi	r21, 0x3F	; 63
     cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb2:	88 23       	and	r24, r24
     cb4:	2c f4       	brge	.+10     	; 0xcc0 <HMI_firstTimeOrChangePassword+0xb4>
		__ticks = 1;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	9c 8b       	std	Y+20, r25	; 0x14
     cbc:	8b 8b       	std	Y+19, r24	; 0x13
     cbe:	3f c0       	rjmp	.+126    	; 0xd3e <HMI_firstTimeOrChangePassword+0x132>
	else if (__tmp > 65535)
     cc0:	6d 89       	ldd	r22, Y+21	; 0x15
     cc2:	7e 89       	ldd	r23, Y+22	; 0x16
     cc4:	8f 89       	ldd	r24, Y+23	; 0x17
     cc6:	98 8d       	ldd	r25, Y+24	; 0x18
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	3f ef       	ldi	r19, 0xFF	; 255
     ccc:	4f e7       	ldi	r20, 0x7F	; 127
     cce:	57 e4       	ldi	r21, 0x47	; 71
     cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd4:	18 16       	cp	r1, r24
     cd6:	4c f5       	brge	.+82     	; 0xd2a <HMI_firstTimeOrChangePassword+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd8:	69 8d       	ldd	r22, Y+25	; 0x19
     cda:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cde:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e2       	ldi	r20, 0x20	; 32
     ce6:	51 e4       	ldi	r21, 0x41	; 65
     ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	bc 01       	movw	r22, r24
     cf2:	cd 01       	movw	r24, r26
     cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	9c 8b       	std	Y+20, r25	; 0x14
     cfe:	8b 8b       	std	Y+19, r24	; 0x13
     d00:	0f c0       	rjmp	.+30     	; 0xd20 <HMI_firstTimeOrChangePassword+0x114>
     d02:	89 e1       	ldi	r24, 0x19	; 25
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	9a 8b       	std	Y+18, r25	; 0x12
     d08:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d0a:	89 89       	ldd	r24, Y+17	; 0x11
     d0c:	9a 89       	ldd	r25, Y+18	; 0x12
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <HMI_firstTimeOrChangePassword+0x102>
     d12:	9a 8b       	std	Y+18, r25	; 0x12
     d14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d16:	8b 89       	ldd	r24, Y+19	; 0x13
     d18:	9c 89       	ldd	r25, Y+20	; 0x14
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	9c 8b       	std	Y+20, r25	; 0x14
     d1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d20:	8b 89       	ldd	r24, Y+19	; 0x13
     d22:	9c 89       	ldd	r25, Y+20	; 0x14
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	69 f7       	brne	.-38     	; 0xd02 <HMI_firstTimeOrChangePassword+0xf6>
     d28:	14 c0       	rjmp	.+40     	; 0xd52 <HMI_firstTimeOrChangePassword+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d2a:	6d 89       	ldd	r22, Y+21	; 0x15
     d2c:	7e 89       	ldd	r23, Y+22	; 0x16
     d2e:	8f 89       	ldd	r24, Y+23	; 0x17
     d30:	98 8d       	ldd	r25, Y+24	; 0x18
     d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	9c 8b       	std	Y+20, r25	; 0x14
     d3c:	8b 8b       	std	Y+19, r24	; 0x13
     d3e:	8b 89       	ldd	r24, Y+19	; 0x13
     d40:	9c 89       	ldd	r25, Y+20	; 0x14
     d42:	98 8b       	std	Y+16, r25	; 0x10
     d44:	8f 87       	std	Y+15, r24	; 0x0f
     d46:	8f 85       	ldd	r24, Y+15	; 0x0f
     d48:	98 89       	ldd	r25, Y+16	; 0x10
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <HMI_firstTimeOrChangePassword+0x13e>
     d4e:	98 8b       	std	Y+16, r25	; 0x10
     d50:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(1500);
				(passwords_ptr[loop])[password_index] = KEYPAD_getPressedKey();
     d52:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d54:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d56:	9c 01       	movw	r18, r24
     d58:	22 0f       	add	r18, r18
     d5a:	33 1f       	adc	r19, r19
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	82 0f       	add	r24, r18
     d62:	93 1f       	adc	r25, r19
     d64:	fc 01       	movw	r30, r24
     d66:	b7 96       	adiw	r30, 0x27	; 39
     d68:	20 81       	ld	r18, Z
     d6a:	31 81       	ldd	r19, Z+1	; 0x01
     d6c:	8a a1       	ldd	r24, Y+34	; 0x22
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	89 01       	movw	r16, r18
     d74:	08 0f       	add	r16, r24
     d76:	19 1f       	adc	r17, r25
     d78:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <KEYPAD_getPressedKey>
     d7c:	d8 01       	movw	r26, r16
     d7e:	8c 93       	st	X, r24
				LCD_displayCharacter('*');
     d80:	8a e2       	ldi	r24, 0x2A	; 42
     d82:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <LCD_displayCharacter>
		LCD_displayString("please enter the password:");
		LCD_moveCursor(1, 0);
		/* the following for loop is for filling the pass_ptr and the confirm_pass arrays */
		for (int loop = 0 ; loop < 2 ; loop++)
		{
			for(password_index = 0 ; password_index < 5 ; password_index++)
     d86:	8a a1       	ldd	r24, Y+34	; 0x22
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	8a a3       	std	Y+34, r24	; 0x22
     d8c:	8a a1       	ldd	r24, Y+34	; 0x22
     d8e:	85 30       	cpi	r24, 0x05	; 5
     d90:	08 f4       	brcc	.+2      	; 0xd94 <HMI_firstTimeOrChangePassword+0x188>
     d92:	6d cf       	rjmp	.-294    	; 0xc6e <HMI_firstTimeOrChangePassword+0x62>
				LCD_displayCharacter('*');
			}
			/* the following while loop if for confirming that he pressed '=' (i.e. enter) */
			while(1)
			{
				end_key = KEYPAD_getPressedKey();
     d94:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <KEYPAD_getPressedKey>
     d98:	89 a3       	std	Y+33, r24	; 0x21
				if(end_key == '=')
     d9a:	89 a1       	ldd	r24, Y+33	; 0x21
     d9c:	8d 33       	cpi	r24, 0x3D	; 61
     d9e:	d1 f7       	brne	.-12     	; 0xd94 <HMI_firstTimeOrChangePassword+0x188>
					break;
			}
			LCD_clearScreen();
     da0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "please confirm it:");
     da4:	2b e7       	ldi	r18, 0x7B	; 123
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	a9 01       	movw	r20, r18
     dae:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_moveCursor>
	do{
		LCD_clearScreen();
		LCD_displayString("please enter the password:");
		LCD_moveCursor(1, 0);
		/* the following for loop is for filling the pass_ptr and the confirm_pass arrays */
		for (int loop = 0 ; loop < 2 ; loop++)
     dba:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dbc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	9e 8f       	std	Y+30, r25	; 0x1e
     dc2:	8d 8f       	std	Y+29, r24	; 0x1d
     dc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	91 05       	cpc	r25, r1
     dcc:	0c f4       	brge	.+2      	; 0xdd0 <HMI_firstTimeOrChangePassword+0x1c4>
     dce:	4d cf       	rjmp	.-358    	; 0xc6a <HMI_firstTimeOrChangePassword+0x5e>
			LCD_displayStringRowColumn(0, 0, "please confirm it:");
			LCD_moveCursor(1, 0);
		}
		/* the following for loop is for checking that the 2 arrays are the exactly the same *
		 * and then moving on.                                                               */
		for(check_loop = 0 ; check_loop < 5 ; check_loop++)
     dd0:	18 a2       	std	Y+32, r1	; 0x20
     dd2:	1b c0       	rjmp	.+54     	; 0xe0a <HMI_firstTimeOrChangePassword+0x1fe>
		{
			/* at any time the 2 elements that will have the same index are different then *
			 * break the loop with changing the check_2_passwords value to 9.              */
			if(pass_ptr[check_loop] != confirm_pass[check_loop])
     dd4:	88 a1       	ldd	r24, Y+32	; 0x20
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	8c a5       	ldd	r24, Y+44	; 0x2c
     ddc:	9d a5       	ldd	r25, Y+45	; 0x2d
     dde:	fc 01       	movw	r30, r24
     de0:	e2 0f       	add	r30, r18
     de2:	f3 1f       	adc	r31, r19
     de4:	40 81       	ld	r20, Z
     de6:	88 a1       	ldd	r24, Y+32	; 0x20
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	ce 01       	movw	r24, r28
     dee:	83 96       	adiw	r24, 0x23	; 35
     df0:	fc 01       	movw	r30, r24
     df2:	e2 0f       	add	r30, r18
     df4:	f3 1f       	adc	r31, r19
     df6:	80 81       	ld	r24, Z
     df8:	48 17       	cp	r20, r24
     dfa:	19 f0       	breq	.+6      	; 0xe02 <HMI_firstTimeOrChangePassword+0x1f6>
			{
				check_2_passwords = 9;
     dfc:	89 e0       	ldi	r24, 0x09	; 9
     dfe:	8f 8f       	std	Y+31, r24	; 0x1f
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <HMI_firstTimeOrChangePassword+0x204>
				break;
			}
			else
			{
				check_2_passwords = 0;
     e02:	1f 8e       	std	Y+31, r1	; 0x1f
			LCD_displayStringRowColumn(0, 0, "please confirm it:");
			LCD_moveCursor(1, 0);
		}
		/* the following for loop is for checking that the 2 arrays are the exactly the same *
		 * and then moving on.                                                               */
		for(check_loop = 0 ; check_loop < 5 ; check_loop++)
     e04:	88 a1       	ldd	r24, Y+32	; 0x20
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	88 a3       	std	Y+32, r24	; 0x20
     e0a:	88 a1       	ldd	r24, Y+32	; 0x20
     e0c:	85 30       	cpi	r24, 0x05	; 5
     e0e:	10 f3       	brcs	.-60     	; 0xdd4 <HMI_firstTimeOrChangePassword+0x1c8>
			{
				check_2_passwords = 0;
			}
		}
		/* here is the if statement that is checking for the value of check_2_passwords.*/
		if(9 == check_2_passwords)
     e10:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e12:	89 30       	cpi	r24, 0x09	; 9
     e14:	09 f0       	breq	.+2      	; 0xe18 <HMI_firstTimeOrChangePassword+0x20c>
     e16:	80 c0       	rjmp	.+256    	; 0xf18 <HMI_firstTimeOrChangePassword+0x30c>
		{
			LCD_displayStringRowColumn(0, 0, "the 2 passwords ");
     e18:	2e e8       	ldi	r18, 0x8E	; 142
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	a9 01       	movw	r20, r18
     e22:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "don't match");
     e26:	2f e9       	ldi	r18, 0x9F	; 159
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	a9 01       	movw	r20, r18
     e30:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e4       	ldi	r25, 0x40	; 64
     e38:	ac e9       	ldi	r26, 0x9C	; 156
     e3a:	b5 e4       	ldi	r27, 0x45	; 69
     e3c:	8b 87       	std	Y+11, r24	; 0x0b
     e3e:	9c 87       	std	Y+12, r25	; 0x0c
     e40:	ad 87       	std	Y+13, r26	; 0x0d
     e42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e44:	6b 85       	ldd	r22, Y+11	; 0x0b
     e46:	7c 85       	ldd	r23, Y+12	; 0x0c
     e48:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	4a e7       	ldi	r20, 0x7A	; 122
     e52:	53 e4       	ldi	r21, 0x43	; 67
     e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	8f 83       	std	Y+7, r24	; 0x07
     e5e:	98 87       	std	Y+8, r25	; 0x08
     e60:	a9 87       	std	Y+9, r26	; 0x09
     e62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e64:	6f 81       	ldd	r22, Y+7	; 0x07
     e66:	78 85       	ldd	r23, Y+8	; 0x08
     e68:	89 85       	ldd	r24, Y+9	; 0x09
     e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e8       	ldi	r20, 0x80	; 128
     e72:	5f e3       	ldi	r21, 0x3F	; 63
     e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e78:	88 23       	and	r24, r24
     e7a:	2c f4       	brge	.+10     	; 0xe86 <HMI_firstTimeOrChangePassword+0x27a>
		__ticks = 1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
     e84:	3f c0       	rjmp	.+126    	; 0xf04 <HMI_firstTimeOrChangePassword+0x2f8>
	else if (__tmp > 65535)
     e86:	6f 81       	ldd	r22, Y+7	; 0x07
     e88:	78 85       	ldd	r23, Y+8	; 0x08
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	3f ef       	ldi	r19, 0xFF	; 255
     e92:	4f e7       	ldi	r20, 0x7F	; 127
     e94:	57 e4       	ldi	r21, 0x47	; 71
     e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9a:	18 16       	cp	r1, r24
     e9c:	4c f5       	brge	.+82     	; 0xef0 <HMI_firstTimeOrChangePassword+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e2       	ldi	r20, 0x20	; 32
     eac:	51 e4       	ldi	r21, 0x41	; 65
     eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	9e 83       	std	Y+6, r25	; 0x06
     ec4:	8d 83       	std	Y+5, r24	; 0x05
     ec6:	0f c0       	rjmp	.+30     	; 0xee6 <HMI_firstTimeOrChangePassword+0x2da>
     ec8:	89 e1       	ldi	r24, 0x19	; 25
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9c 83       	std	Y+4, r25	; 0x04
     ece:	8b 83       	std	Y+3, r24	; 0x03
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <HMI_firstTimeOrChangePassword+0x2c8>
     ed8:	9c 83       	std	Y+4, r25	; 0x04
     eda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	9e 83       	std	Y+6, r25	; 0x06
     ee4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee6:	8d 81       	ldd	r24, Y+5	; 0x05
     ee8:	9e 81       	ldd	r25, Y+6	; 0x06
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	69 f7       	brne	.-38     	; 0xec8 <HMI_firstTimeOrChangePassword+0x2bc>
     eee:	14 c0       	rjmp	.+40     	; 0xf18 <HMI_firstTimeOrChangePassword+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef0:	6f 81       	ldd	r22, Y+7	; 0x07
     ef2:	78 85       	ldd	r23, Y+8	; 0x08
     ef4:	89 85       	ldd	r24, Y+9	; 0x09
     ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	9e 83       	std	Y+6, r25	; 0x06
     f02:	8d 83       	std	Y+5, r24	; 0x05
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	9a 83       	std	Y+2, r25	; 0x02
     f0a:	89 83       	std	Y+1, r24	; 0x01
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <HMI_firstTimeOrChangePassword+0x304>
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5000);
		}
		/* while these 2 passwords are different then loop to get a new one.*/
	}while(9 == check_2_passwords);
     f18:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f1a:	89 30       	cpi	r24, 0x09	; 9
     f1c:	09 f4       	brne	.+2      	; 0xf20 <HMI_firstTimeOrChangePassword+0x314>
     f1e:	98 ce       	rjmp	.-720    	; 0xc50 <HMI_firstTimeOrChangePassword+0x44>
}
     f20:	ad 96       	adiw	r28, 0x2d	; 45
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	08 95       	ret

00000f36 <HMI_sendPassword>:
 * input: the password array pointer
 * return: void
 * Description: it is the function responsible for
 */
void HMI_sendPassword (uint8* const pass_ptr)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <HMI_sendPassword+0x6>
     f3c:	0f 92       	push	r0
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	9b 83       	std	Y+3, r25	; 0x03
     f44:	8a 83       	std	Y+2, r24	; 0x02
	UART_sendByte(ready);
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <UART_sendByte>
	while (UART_receiveByte() != ready){}
     f4c:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <UART_receiveByte>
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	e1 f7       	brne	.-8      	; 0xf4c <HMI_sendPassword+0x16>
	for (uint8 i = 0 ; i < 5 ; i++)
     f54:	19 82       	std	Y+1, r1	; 0x01
     f56:	0e c0       	rjmp	.+28     	; 0xf74 <HMI_sendPassword+0x3e>
	{
		UART_sendByte(pass_ptr[i]);
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	fc 01       	movw	r30, r24
     f64:	e2 0f       	add	r30, r18
     f66:	f3 1f       	adc	r31, r19
     f68:	80 81       	ld	r24, Z
     f6a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <UART_sendByte>
 */
void HMI_sendPassword (uint8* const pass_ptr)
{
	UART_sendByte(ready);
	while (UART_receiveByte() != ready){}
	for (uint8 i = 0 ; i < 5 ; i++)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	8f 5f       	subi	r24, 0xFF	; 255
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	85 30       	cpi	r24, 0x05	; 5
     f78:	78 f3       	brcs	.-34     	; 0xf58 <HMI_sendPassword+0x22>
	{
		UART_sendByte(pass_ptr[i]);
	}
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <HMI_mainMenu>:
 * return: chosen character
 * Description: it presents the menu , takes the chosen character then return it to the
 * main function.
 */
uint8 HMI_mainMenu (void)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
	/* presenting the menu */
	LCD_clearScreen();
     f8e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_clearScreen>
	LCD_displayString("+: open door");
     f92:	8b ea       	ldi	r24, 0xAB	; 171
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0,"-: change password");
     f9a:	28 eb       	ldi	r18, 0xB8	; 184
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	a9 01       	movw	r20, r18
     fa4:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
	/* the following while loop is for waiting till the user enter one of two characters *
	 * '-' or '+' not any other character.                                               */
	while(1)
	{
		if((KEYPAD_getPressedKey()=='-')||(KEYPAD_getPressedKey()=='+'))
     fa8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <KEYPAD_getPressedKey>
     fac:	8d 32       	cpi	r24, 0x2D	; 45
     fae:	21 f0       	breq	.+8      	; 0xfb8 <HMI_mainMenu+0x32>
     fb0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <KEYPAD_getPressedKey>
     fb4:	8b 32       	cpi	r24, 0x2B	; 43
     fb6:	c1 f7       	brne	.-16     	; 0xfa8 <HMI_mainMenu+0x22>
			break;
	}
	return KEYPAD_getPressedKey();
     fb8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <KEYPAD_getPressedKey>
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <HMI_openOrError>:
 * 2. the 2 passwords don't match then the function will ask the user again to enter the
 *    right one if he does it will perform the first situation if n't till 3 times asking
 *    him to enter the correct one it will displays the " error message " for one minute.
 */
void HMI_openOrError (uint8* const pass_ptr , uint8 main_menu_choice)
{
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	af 97       	sbiw	r28, 0x2f	; 47
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	9c a3       	std	Y+36, r25	; 0x24
     fdc:	8b a3       	std	Y+35, r24	; 0x23
     fde:	6d a3       	std	Y+37, r22	; 0x25
	uint8 check = 0 , count = 0 , end_key = 0;
     fe0:	1a 8a       	std	Y+18, r1	; 0x12
     fe2:	19 8a       	std	Y+17, r1	; 0x11
     fe4:	18 8a       	std	Y+16, r1	; 0x10
	LCD_clearScreen();
     fe6:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_clearScreen>
	LCD_displayString("please reenter the password:");
     fea:	8b ec       	ldi	r24, 0xCB	; 203
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
	LCD_moveCursor(1, 0);
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_moveCursor>
	 * then the CONTROL_ECU will send nothing but if it doesn't match it will send "wrong"     *
	 * which is a character defined in the .h file then it will loop if it is receiving        *
	 * the "wrong" character for three times then it will change the value of "check" variable *
	 * to 1 then it will stop looping.                                                         */
	do{
	for(uint8 i = 0 ; i < 5 ; i++)
     ffa:	1f 86       	std	Y+15, r1	; 0x0f
     ffc:	84 c0       	rjmp	.+264    	; 0x1106 <HMI_openOrError+0x144>
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e8       	ldi	r25, 0x80	; 128
    1002:	ab eb       	ldi	r26, 0xBB	; 187
    1004:	b4 e4       	ldi	r27, 0x44	; 68
    1006:	8b 87       	std	Y+11, r24	; 0x0b
    1008:	9c 87       	std	Y+12, r25	; 0x0c
    100a:	ad 87       	std	Y+13, r26	; 0x0d
    100c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1010:	7c 85       	ldd	r23, Y+12	; 0x0c
    1012:	8d 85       	ldd	r24, Y+13	; 0x0d
    1014:	9e 85       	ldd	r25, Y+14	; 0x0e
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	4a e7       	ldi	r20, 0x7A	; 122
    101c:	53 e4       	ldi	r21, 0x43	; 67
    101e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	8f 83       	std	Y+7, r24	; 0x07
    1028:	98 87       	std	Y+8, r25	; 0x08
    102a:	a9 87       	std	Y+9, r26	; 0x09
    102c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    102e:	6f 81       	ldd	r22, Y+7	; 0x07
    1030:	78 85       	ldd	r23, Y+8	; 0x08
    1032:	89 85       	ldd	r24, Y+9	; 0x09
    1034:	9a 85       	ldd	r25, Y+10	; 0x0a
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e8       	ldi	r20, 0x80	; 128
    103c:	5f e3       	ldi	r21, 0x3F	; 63
    103e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1042:	88 23       	and	r24, r24
    1044:	2c f4       	brge	.+10     	; 0x1050 <HMI_openOrError+0x8e>
		__ticks = 1;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	9e 83       	std	Y+6, r25	; 0x06
    104c:	8d 83       	std	Y+5, r24	; 0x05
    104e:	3f c0       	rjmp	.+126    	; 0x10ce <HMI_openOrError+0x10c>
	else if (__tmp > 65535)
    1050:	6f 81       	ldd	r22, Y+7	; 0x07
    1052:	78 85       	ldd	r23, Y+8	; 0x08
    1054:	89 85       	ldd	r24, Y+9	; 0x09
    1056:	9a 85       	ldd	r25, Y+10	; 0x0a
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	3f ef       	ldi	r19, 0xFF	; 255
    105c:	4f e7       	ldi	r20, 0x7F	; 127
    105e:	57 e4       	ldi	r21, 0x47	; 71
    1060:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1064:	18 16       	cp	r1, r24
    1066:	4c f5       	brge	.+82     	; 0x10ba <HMI_openOrError+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1068:	6b 85       	ldd	r22, Y+11	; 0x0b
    106a:	7c 85       	ldd	r23, Y+12	; 0x0c
    106c:	8d 85       	ldd	r24, Y+13	; 0x0d
    106e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e2       	ldi	r20, 0x20	; 32
    1076:	51 e4       	ldi	r21, 0x41	; 65
    1078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	0f c0       	rjmp	.+30     	; 0x10b0 <HMI_openOrError+0xee>
    1092:	89 e1       	ldi	r24, 0x19	; 25
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9c 83       	std	Y+4, r25	; 0x04
    1098:	8b 83       	std	Y+3, r24	; 0x03
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	f1 f7       	brne	.-4      	; 0x109e <HMI_openOrError+0xdc>
    10a2:	9c 83       	std	Y+4, r25	; 0x04
    10a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a6:	8d 81       	ldd	r24, Y+5	; 0x05
    10a8:	9e 81       	ldd	r25, Y+6	; 0x06
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	9e 83       	std	Y+6, r25	; 0x06
    10ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	69 f7       	brne	.-38     	; 0x1092 <HMI_openOrError+0xd0>
    10b8:	14 c0       	rjmp	.+40     	; 0x10e2 <HMI_openOrError+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ba:	6f 81       	ldd	r22, Y+7	; 0x07
    10bc:	78 85       	ldd	r23, Y+8	; 0x08
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	9a 81       	ldd	r25, Y+2	; 0x02
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <HMI_openOrError+0x118>
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1500);
		pass_ptr[i] = KEYPAD_getPressedKey();
    10e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	8b a1       	ldd	r24, Y+35	; 0x23
    10ea:	9c a1       	ldd	r25, Y+36	; 0x24
    10ec:	8c 01       	movw	r16, r24
    10ee:	02 0f       	add	r16, r18
    10f0:	13 1f       	adc	r17, r19
    10f2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <KEYPAD_getPressedKey>
    10f6:	f8 01       	movw	r30, r16
    10f8:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    10fa:	8a e2       	ldi	r24, 0x2A	; 42
    10fc:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <LCD_displayCharacter>
	 * then the CONTROL_ECU will send nothing but if it doesn't match it will send "wrong"     *
	 * which is a character defined in the .h file then it will loop if it is receiving        *
	 * the "wrong" character for three times then it will change the value of "check" variable *
	 * to 1 then it will stop looping.                                                         */
	do{
	for(uint8 i = 0 ; i < 5 ; i++)
    1100:	8f 85       	ldd	r24, Y+15	; 0x0f
    1102:	8f 5f       	subi	r24, 0xFF	; 255
    1104:	8f 87       	std	Y+15, r24	; 0x0f
    1106:	8f 85       	ldd	r24, Y+15	; 0x0f
    1108:	85 30       	cpi	r24, 0x05	; 5
    110a:	08 f4       	brcc	.+2      	; 0x110e <HMI_openOrError+0x14c>
    110c:	78 cf       	rjmp	.-272    	; 0xffe <HMI_openOrError+0x3c>
		pass_ptr[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
	}
	while(1)
	{
		end_key = KEYPAD_getPressedKey();
    110e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <KEYPAD_getPressedKey>
    1112:	88 8b       	std	Y+16, r24	; 0x10
		if(end_key == '=')
    1114:	88 89       	ldd	r24, Y+16	; 0x10
    1116:	8d 33       	cpi	r24, 0x3D	; 61
    1118:	d1 f7       	brne	.-12     	; 0x110e <HMI_openOrError+0x14c>
			break;
	}
	HMI_sendPassword(pass_ptr);
    111a:	8b a1       	ldd	r24, Y+35	; 0x23
    111c:	9c a1       	ldd	r25, Y+36	; 0x24
    111e:	0e 94 9b 07 	call	0xf36	; 0xf36 <HMI_sendPassword>
	while(UART_receiveByte() != ready){}
    1122:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <UART_receiveByte>
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	e1 f7       	brne	.-8      	; 0x1122 <HMI_openOrError+0x160>
	/* here if it receives "wrong" it will assign the "check" variable by 1 then displays the *
	 * message below.                                                                         */
	if(UART_receiveByte() == wrong)
    112a:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <UART_receiveByte>
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	c9 f4       	brne	.+50     	; 0x1164 <HMI_openOrError+0x1a2>
	{
		check = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	8a 8b       	std	Y+18, r24	; 0x12
		count++;
    1136:	89 89       	ldd	r24, Y+17	; 0x11
    1138:	8f 5f       	subi	r24, 0xFF	; 255
    113a:	89 8b       	std	Y+17, r24	; 0x11
		if(count == 3)
    113c:	89 89       	ldd	r24, Y+17	; 0x11
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	b9 f0       	breq	.+46     	; 0x1170 <HMI_openOrError+0x1ae>
		{
			break;
		}
		LCD_clearScreen();
    1142:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_clearScreen>
		LCD_displayString("the password is wrong please");
    1146:	88 ee       	ldi	r24, 0xE8	; 232
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "try again: ");
    114e:	25 e0       	ldi	r18, 0x05	; 5
    1150:	31 e0       	ldi	r19, 0x01	; 1
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	a9 01       	movw	r20, r18
    1158:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
	else
	{
		check = 0 ;
		break;
	}
	}while((check == 1) && (count<3));
    115c:	8a 89       	ldd	r24, Y+18	; 0x12
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	39 f4       	brne	.+14     	; 0x1170 <HMI_openOrError+0x1ae>
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <HMI_openOrError+0x1a6>
	}
	/* if it didn't receive the "wrong" character then it will assign the "check" value again *
	 * to 0 then break the loop.                                                              */
	else
	{
		check = 0 ;
    1164:	1a 8a       	std	Y+18, r1	; 0x12
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <HMI_openOrError+0x1ae>
		break;
	}
	}while((check == 1) && (count<3));
    1168:	89 89       	ldd	r24, Y+17	; 0x11
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	08 f4       	brcc	.+2      	; 0x1170 <HMI_openOrError+0x1ae>
    116e:	45 cf       	rjmp	.-374    	; 0xffa <HMI_openOrError+0x38>
/*******************************************/
	/* checking if the "check" value equals 1 that means it will display the error message for
	 * */
	if((count == 3)&&(check==1))
    1170:	89 89       	ldd	r24, Y+17	; 0x11
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	09 f0       	breq	.+2      	; 0x1178 <HMI_openOrError+0x1b6>
    1176:	3f c0       	rjmp	.+126    	; 0x11f6 <HMI_openOrError+0x234>
    1178:	8a 89       	ldd	r24, Y+18	; 0x12
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	e1 f5       	brne	.+120    	; 0x11f6 <HMI_openOrError+0x234>
	{
		/* error_configuration is a configuration for the TIMER driver:     *
		 * timer_id , timer_mode , TCNT , OCR , used technique , pre-scaler */
		TIMER_configType error_configuration = {timer1, TIMER1_CTC , 0 , 65535 ,interrupt , FCPU_1024};
    117e:	ce 01       	movw	r24, r28
    1180:	43 96       	adiw	r24, 0x13	; 19
    1182:	9f a3       	std	Y+39, r25	; 0x27
    1184:	8e a3       	std	Y+38, r24	; 0x26
    1186:	ee e8       	ldi	r30, 0x8E	; 142
    1188:	f1 e0       	ldi	r31, 0x01	; 1
    118a:	f9 a7       	std	Y+41, r31	; 0x29
    118c:	e8 a7       	std	Y+40, r30	; 0x28
    118e:	f8 e0       	ldi	r31, 0x08	; 8
    1190:	fa a7       	std	Y+42, r31	; 0x2a
    1192:	e8 a5       	ldd	r30, Y+40	; 0x28
    1194:	f9 a5       	ldd	r31, Y+41	; 0x29
    1196:	00 80       	ld	r0, Z
    1198:	88 a5       	ldd	r24, Y+40	; 0x28
    119a:	99 a5       	ldd	r25, Y+41	; 0x29
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	99 a7       	std	Y+41, r25	; 0x29
    11a0:	88 a7       	std	Y+40, r24	; 0x28
    11a2:	ee a1       	ldd	r30, Y+38	; 0x26
    11a4:	ff a1       	ldd	r31, Y+39	; 0x27
    11a6:	00 82       	st	Z, r0
    11a8:	8e a1       	ldd	r24, Y+38	; 0x26
    11aa:	9f a1       	ldd	r25, Y+39	; 0x27
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	9f a3       	std	Y+39, r25	; 0x27
    11b0:	8e a3       	std	Y+38, r24	; 0x26
    11b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    11b4:	91 50       	subi	r25, 0x01	; 1
    11b6:	9a a7       	std	Y+42, r25	; 0x2a
    11b8:	ea a5       	ldd	r30, Y+42	; 0x2a
    11ba:	ee 23       	and	r30, r30
    11bc:	51 f7       	brne	.-44     	; 0x1192 <HMI_openOrError+0x1d0>
		LCD_clearScreen();
    11be:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_clearScreen>
		/* setting the errorMessage as a call back function*/
		TIMER_setCallBack(HMI_errorMessage);
    11c2:	89 e6       	ldi	r24, 0x69	; 105
    11c4:	99 e0       	ldi	r25, 0x09	; 9
    11c6:	0e 94 cd 14 	call	0x299a	; 0x299a <TIMER_setCallBack>
		/* initializing the TIMER by passing the previous structure to it. */
		TIMER_init(&error_configuration);
    11ca:	ce 01       	movw	r24, r28
    11cc:	43 96       	adiw	r24, 0x13	; 19
    11ce:	0e 94 0f 14 	call	0x281e	; 0x281e <TIMER_init>
		LCD_displayString("move away or i will call the");
    11d2:	81 e1       	ldi	r24, 0x11	; 17
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "Police!");
    11da:	2e e2       	ldi	r18, 0x2E	; 46
    11dc:	31 e0       	ldi	r19, 0x01	; 1
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	a9 01       	movw	r20, r18
    11e4:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
		/* waiting till it becomes a minute displaying this message where each tick will take  *
		 * almost 8.4 seconds so approximately one minute = 7 ticks.                           */
		while(tick < 8){}
    11e8:	80 91 98 01 	lds	r24, 0x0198
    11ec:	88 30       	cpi	r24, 0x08	; 8
    11ee:	e0 f3       	brcs	.-8      	; 0x11e8 <HMI_openOrError+0x226>
		/* after finishing the time assigning the tick value back again by 0 for the next counts*/
		tick = 0 ;
    11f0:	10 92 98 01 	sts	0x0198, r1
    11f4:	63 c0       	rjmp	.+198    	; 0x12bc <HMI_openOrError+0x2fa>
	}
	else
	{
		/* sending "ready" to make the CONTROL_ECU wait to send the main_menu_choice */
		UART_sendByte(ready);
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <UART_sendByte>
		/* sending the '+' or '-' choice */
		UART_sendByte(main_menu_choice);
    11fc:	8d a1       	ldd	r24, Y+37	; 0x25
    11fe:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <UART_sendByte>
		/* configuration is a structure of 'TIMER_configType' type:         *
		 * timer_id , timer_mode , TCNT , OCR , used technique , pre-scaler */
		TIMER_configType configuration = {timer1, TIMER1_CTC , 0 , 7813 ,interrupt , FCPU_1024};
    1202:	ce 01       	movw	r24, r28
    1204:	4b 96       	adiw	r24, 0x1b	; 27
    1206:	9c a7       	std	Y+44, r25	; 0x2c
    1208:	8b a7       	std	Y+43, r24	; 0x2b
    120a:	e6 e8       	ldi	r30, 0x86	; 134
    120c:	f1 e0       	ldi	r31, 0x01	; 1
    120e:	fe a7       	std	Y+46, r31	; 0x2e
    1210:	ed a7       	std	Y+45, r30	; 0x2d
    1212:	f8 e0       	ldi	r31, 0x08	; 8
    1214:	ff a7       	std	Y+47, r31	; 0x2f
    1216:	ed a5       	ldd	r30, Y+45	; 0x2d
    1218:	fe a5       	ldd	r31, Y+46	; 0x2e
    121a:	00 80       	ld	r0, Z
    121c:	8d a5       	ldd	r24, Y+45	; 0x2d
    121e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	9e a7       	std	Y+46, r25	; 0x2e
    1224:	8d a7       	std	Y+45, r24	; 0x2d
    1226:	eb a5       	ldd	r30, Y+43	; 0x2b
    1228:	fc a5       	ldd	r31, Y+44	; 0x2c
    122a:	00 82       	st	Z, r0
    122c:	8b a5       	ldd	r24, Y+43	; 0x2b
    122e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	9c a7       	std	Y+44, r25	; 0x2c
    1234:	8b a7       	std	Y+43, r24	; 0x2b
    1236:	9f a5       	ldd	r25, Y+47	; 0x2f
    1238:	91 50       	subi	r25, 0x01	; 1
    123a:	9f a7       	std	Y+47, r25	; 0x2f
    123c:	ef a5       	ldd	r30, Y+47	; 0x2f
    123e:	ee 23       	and	r30, r30
    1240:	51 f7       	brne	.-44     	; 0x1216 <HMI_openOrError+0x254>
		/* checking if the choice is '+' or '-' (i.e. open the door or change the password)*/
		if(main_menu_choice == '+')
    1242:	8d a1       	ldd	r24, Y+37	; 0x25
    1244:	8b 32       	cpi	r24, 0x2B	; 43
    1246:	79 f5       	brne	.+94     	; 0x12a6 <HMI_openOrError+0x2e4>
		{
			LCD_clearScreen();
    1248:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_clearScreen>
			/* setting the call back function to the 'HMI_openingdoor' function. */
			TIMER_setCallBack(HMI_openingdoor);
    124c:	86 e7       	ldi	r24, 0x76	; 118
    124e:	99 e0       	ldi	r25, 0x09	; 9
    1250:	0e 94 cd 14 	call	0x299a	; 0x299a <TIMER_setCallBack>
			/* initializing the TIMER driver by passing the configuration. */
			TIMER_init(&configuration);
    1254:	ce 01       	movw	r24, r28
    1256:	4b 96       	adiw	r24, 0x1b	; 27
    1258:	0e 94 0f 14 	call	0x281e	; 0x281e <TIMER_init>
			LCD_clearScreen();
    125c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_clearScreen>
			LCD_displayString("the door is opening...");
    1260:	86 e3       	ldi	r24, 0x36	; 54
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
			/* waiting till the 15 seconds is up as the tick here is almost 1 second*/
			while(tick<=15){}
    1268:	80 91 98 01 	lds	r24, 0x0198
    126c:	80 31       	cpi	r24, 0x10	; 16
    126e:	e0 f3       	brcs	.-8      	; 0x1268 <HMI_openOrError+0x2a6>
			LCD_clearScreen();
    1270:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_clearScreen>
			LCD_displayString("the door is opened");
    1274:	8d e4       	ldi	r24, 0x4D	; 77
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
			/* waiting till another 3 seconds is up*/
			while(tick<=18){}
    127c:	80 91 98 01 	lds	r24, 0x0198
    1280:	83 31       	cpi	r24, 0x13	; 19
    1282:	e0 f3       	brcs	.-8      	; 0x127c <HMI_openOrError+0x2ba>
			LCD_clearScreen();
    1284:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_clearScreen>
			LCD_displayString("the door is closing...");
    1288:	80 e6       	ldi	r24, 0x60	; 96
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
			/* waiting till another 15 seconds is up*/
			while((tick<=33)&&(tick!=0)){}
    1290:	80 91 98 01 	lds	r24, 0x0198
    1294:	82 32       	cpi	r24, 0x22	; 34
    1296:	20 f4       	brcc	.+8      	; 0x12a0 <HMI_openOrError+0x2de>
    1298:	80 91 98 01 	lds	r24, 0x0198
    129c:	88 23       	and	r24, r24
    129e:	c1 f7       	brne	.-16     	; 0x1290 <HMI_openOrError+0x2ce>
			LCD_clearScreen();
    12a0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <LCD_clearScreen>
    12a4:	0b c0       	rjmp	.+22     	; 0x12bc <HMI_openOrError+0x2fa>
		}
		else if(main_menu_choice == '-')
    12a6:	8d a1       	ldd	r24, Y+37	; 0x25
    12a8:	8d 32       	cpi	r24, 0x2D	; 45
    12aa:	41 f4       	brne	.+16     	; 0x12bc <HMI_openOrError+0x2fa>
		{
			/* here it will call the function that is responsible for changing the password. */
			HMI_firstTimeOrChangePassword(pass_ptr);
    12ac:	8b a1       	ldd	r24, Y+35	; 0x23
    12ae:	9c a1       	ldd	r25, Y+36	; 0x24
    12b0:	0e 94 06 06 	call	0xc0c	; 0xc0c <HMI_firstTimeOrChangePassword>
			/* then it will send the password to the CONTROL_ECU to save it. */
			HMI_sendPassword(pass_ptr);
    12b4:	8b a1       	ldd	r24, Y+35	; 0x23
    12b6:	9c a1       	ldd	r25, Y+36	; 0x24
    12b8:	0e 94 9b 07 	call	0xf36	; 0xf36 <HMI_sendPassword>
		}
	}
}
    12bc:	af 96       	adiw	r28, 0x2f	; 47
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	08 95       	ret

000012d2 <HMI_errorMessage>:
 * Description: it is the function that is called back by the TIMER driver to check if the tick
 * reaches 8 which means that the 1 minute of displaying the error message is up then it will
 * stop the timer from counting.
 */
void HMI_errorMessage (void)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	if(tick==8)
    12da:	80 91 98 01 	lds	r24, 0x0198
    12de:	88 30       	cpi	r24, 0x08	; 8
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <HMI_errorMessage+0x14>
	{
		TIMER_deInit();
    12e2:	0e 94 df 14 	call	0x29be	; 0x29be <TIMER_deInit>
	}
}
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <HMI_openingdoor>:
 * Description: it is the function that is called back by the TIMER driver to check if the tick
 * reaches 34 which means that the time of displaying the door status is up then it will
 * stop the timer from counting.
 */
void HMI_openingdoor (void)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
	if(tick>33)
    12f4:	80 91 98 01 	lds	r24, 0x0198
    12f8:	82 32       	cpi	r24, 0x22	; 34
    12fa:	20 f0       	brcs	.+8      	; 0x1304 <HMI_openingdoor+0x18>
	{
		TIMER_deInit();
    12fc:	0e 94 df 14 	call	0x29be	; 0x29be <TIMER_deInit>
		tick = 0;
    1300:	10 92 98 01 	sts	0x0198, r1
	}
}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <GPIO_setupPinDirection>:
 * Description :
 * the following functions are to setup the direction of the pins.
 * if the port or pin numbers are entered wrong then the function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num , uint8 pin_num , GPIO_PinDirectionType direction  )
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	00 d0       	rcall	.+0      	; 0x1310 <GPIO_setupPinDirection+0x6>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <GPIO_setupPinDirection+0x8>
    1312:	0f 92       	push	r0
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	6a 83       	std	Y+2, r22	; 0x02
    131c:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num > NUM_OF_PORTS ) || (pin_num > NUM_OF_PINS_PER_PORT))
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	85 30       	cpi	r24, 0x05	; 5
    1322:	08 f0       	brcs	.+2      	; 0x1326 <GPIO_setupPinDirection+0x1c>
    1324:	d5 c0       	rjmp	.+426    	; 0x14d0 <GPIO_setupPinDirection+0x1c6>
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	89 30       	cpi	r24, 0x09	; 9
    132a:	08 f0       	brcs	.+2      	; 0x132e <GPIO_setupPinDirection+0x24>
    132c:	d1 c0       	rjmp	.+418    	; 0x14d0 <GPIO_setupPinDirection+0x1c6>
		/*Do nothing*/
	}
	else
	{
		/*setup the chosen pin as required*/
		switch(port_num)
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3d 83       	std	Y+5, r19	; 0x05
    1336:	2c 83       	std	Y+4, r18	; 0x04
    1338:	8c 81       	ldd	r24, Y+4	; 0x04
    133a:	9d 81       	ldd	r25, Y+5	; 0x05
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	91 05       	cpc	r25, r1
    1340:	09 f4       	brne	.+2      	; 0x1344 <GPIO_setupPinDirection+0x3a>
    1342:	43 c0       	rjmp	.+134    	; 0x13ca <GPIO_setupPinDirection+0xc0>
    1344:	2c 81       	ldd	r18, Y+4	; 0x04
    1346:	3d 81       	ldd	r19, Y+5	; 0x05
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 05       	cpc	r19, r1
    134c:	2c f4       	brge	.+10     	; 0x1358 <GPIO_setupPinDirection+0x4e>
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	71 f0       	breq	.+28     	; 0x1372 <GPIO_setupPinDirection+0x68>
    1356:	bc c0       	rjmp	.+376    	; 0x14d0 <GPIO_setupPinDirection+0x1c6>
    1358:	2c 81       	ldd	r18, Y+4	; 0x04
    135a:	3d 81       	ldd	r19, Y+5	; 0x05
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	09 f4       	brne	.+2      	; 0x1364 <GPIO_setupPinDirection+0x5a>
    1362:	5f c0       	rjmp	.+190    	; 0x1422 <GPIO_setupPinDirection+0x118>
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	91 05       	cpc	r25, r1
    136c:	09 f4       	brne	.+2      	; 0x1370 <GPIO_setupPinDirection+0x66>
    136e:	85 c0       	rjmp	.+266    	; 0x147a <GPIO_setupPinDirection+0x170>
    1370:	af c0       	rjmp	.+350    	; 0x14d0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	a1 f4       	brne	.+40     	; 0x13a0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1378:	aa e3       	ldi	r26, 0x3A	; 58
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ea e3       	ldi	r30, 0x3A	; 58
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GPIO_setupPinDirection+0x8c>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <GPIO_setupPinDirection+0x88>
    139a:	84 2b       	or	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	98 c0       	rjmp	.+304    	; 0x14d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13a0:	aa e3       	ldi	r26, 0x3A	; 58
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	ea e3       	ldi	r30, 0x3A	; 58
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <GPIO_setupPinDirection+0xb4>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <GPIO_setupPinDirection+0xb0>
    13c2:	80 95       	com	r24
    13c4:	84 23       	and	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	83 c0       	rjmp	.+262    	; 0x14d0 <GPIO_setupPinDirection+0x1c6>
			}
			break ;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	a1 f4       	brne	.+40     	; 0x13f8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13d0:	a7 e3       	ldi	r26, 0x37	; 55
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e7 e3       	ldi	r30, 0x37	; 55
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <GPIO_setupPinDirection+0xe4>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <GPIO_setupPinDirection+0xe0>
    13f2:	84 2b       	or	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	6c c0       	rjmp	.+216    	; 0x14d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    13f8:	a7 e3       	ldi	r26, 0x37	; 55
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e7 e3       	ldi	r30, 0x37	; 55
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <GPIO_setupPinDirection+0x10c>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <GPIO_setupPinDirection+0x108>
    141a:	80 95       	com	r24
    141c:	84 23       	and	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	57 c0       	rjmp	.+174    	; 0x14d0 <GPIO_setupPinDirection+0x1c6>

			}
			break;
		case PORTC_ID:
			if(direction == PIN_INPUT)
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	88 23       	and	r24, r24
    1426:	a9 f4       	brne	.+42     	; 0x1452 <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,pin_num);
    1428:	a4 e3       	ldi	r26, 0x34	; 52
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e4 e3       	ldi	r30, 0x34	; 52
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <GPIO_setupPinDirection+0x13c>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <GPIO_setupPinDirection+0x138>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	3f c0       	rjmp	.+126    	; 0x14d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
    1452:	a4 e3       	ldi	r26, 0x34	; 52
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e4 e3       	ldi	r30, 0x34	; 52
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_setupPinDirection+0x166>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_setupPinDirection+0x162>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	2b c0       	rjmp	.+86     	; 0x14d0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	a1 f4       	brne	.+40     	; 0x14a8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1480:	a1 e3       	ldi	r26, 0x31	; 49
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e1 e3       	ldi	r30, 0x31	; 49
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <GPIO_setupPinDirection+0x194>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <GPIO_setupPinDirection+0x190>
    14a2:	84 2b       	or	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14a8:	a1 e3       	ldi	r26, 0x31	; 49
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e1 e3       	ldi	r30, 0x31	; 49
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <GPIO_setupPinDirection+0x1bc>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <GPIO_setupPinDirection+0x1b8>
    14ca:	80 95       	com	r24
    14cc:	84 23       	and	r24, r20
    14ce:	8c 93       	st	X, r24
			}
		}
	}
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <GPIO_writePin>:
 * Write the value of logic high or logic low on the required pin.
 * If the input port number or pin number are not correct the request will not be handled
 * if the pin is input, the function will enable/disable the pull-up resistor as required
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <GPIO_writePin+0x6>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <GPIO_writePin+0x8>
    14e8:	0f 92       	push	r0
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	6a 83       	std	Y+2, r22	; 0x02
    14f2:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num > NUM_OF_PORTS) || (pin_num > NUM_OF_PINS_PER_PORT))
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	85 30       	cpi	r24, 0x05	; 5
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <GPIO_writePin+0x1c>
    14fa:	d5 c0       	rjmp	.+426    	; 0x16a6 <GPIO_writePin+0x1c6>
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	89 30       	cpi	r24, 0x09	; 9
    1500:	08 f0       	brcs	.+2      	; 0x1504 <GPIO_writePin+0x24>
    1502:	d1 c0       	rjmp	.+418    	; 0x16a6 <GPIO_writePin+0x1c6>
		/*Do nothing*/
	}
	else
	{
		/*Write Logic one or Logic zero to the chosen pin*/
		switch(port_num)
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3d 83       	std	Y+5, r19	; 0x05
    150c:	2c 83       	std	Y+4, r18	; 0x04
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	91 05       	cpc	r25, r1
    1516:	09 f4       	brne	.+2      	; 0x151a <GPIO_writePin+0x3a>
    1518:	43 c0       	rjmp	.+134    	; 0x15a0 <GPIO_writePin+0xc0>
    151a:	2c 81       	ldd	r18, Y+4	; 0x04
    151c:	3d 81       	ldd	r19, Y+5	; 0x05
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <GPIO_writePin+0x4e>
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	71 f0       	breq	.+28     	; 0x1548 <GPIO_writePin+0x68>
    152c:	bc c0       	rjmp	.+376    	; 0x16a6 <GPIO_writePin+0x1c6>
    152e:	2c 81       	ldd	r18, Y+4	; 0x04
    1530:	3d 81       	ldd	r19, Y+5	; 0x05
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	09 f4       	brne	.+2      	; 0x153a <GPIO_writePin+0x5a>
    1538:	5f c0       	rjmp	.+190    	; 0x15f8 <GPIO_writePin+0x118>
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <GPIO_writePin+0x66>
    1544:	85 c0       	rjmp	.+266    	; 0x1650 <GPIO_writePin+0x170>
    1546:	af c0       	rjmp	.+350    	; 0x16a6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	a1 f4       	brne	.+40     	; 0x1576 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    154e:	ab e3       	ldi	r26, 0x3B	; 59
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	eb e3       	ldi	r30, 0x3B	; 59
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <GPIO_writePin+0x8c>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <GPIO_writePin+0x88>
    1570:	84 2b       	or	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	98 c0       	rjmp	.+304    	; 0x16a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1576:	ab e3       	ldi	r26, 0x3B	; 59
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	eb e3       	ldi	r30, 0x3B	; 59
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <GPIO_writePin+0xb4>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <GPIO_writePin+0xb0>
    1598:	80 95       	com	r24
    159a:	84 23       	and	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	83 c0       	rjmp	.+262    	; 0x16a6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW)
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	88 23       	and	r24, r24
    15a4:	a9 f4       	brne	.+42     	; 0x15d0 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
    15a6:	a8 e3       	ldi	r26, 0x38	; 56
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e8 e3       	ldi	r30, 0x38	; 56
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <GPIO_writePin+0xe4>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <GPIO_writePin+0xe0>
    15c8:	80 95       	com	r24
    15ca:	84 23       	and	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	6b c0       	rjmp	.+214    	; 0x16a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
    15d0:	a8 e3       	ldi	r26, 0x38	; 56
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e8 e3       	ldi	r30, 0x38	; 56
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <GPIO_writePin+0x10e>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <GPIO_writePin+0x10a>
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	57 c0       	rjmp	.+174    	; 0x16a6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	a1 f4       	brne	.+40     	; 0x1626 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    15fe:	a5 e3       	ldi	r26, 0x35	; 53
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e3       	ldi	r30, 0x35	; 53
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <GPIO_writePin+0x13c>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <GPIO_writePin+0x138>
    1620:	84 2b       	or	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	40 c0       	rjmp	.+128    	; 0x16a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1626:	a5 e3       	ldi	r26, 0x35	; 53
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e5 e3       	ldi	r30, 0x35	; 53
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <GPIO_writePin+0x164>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <GPIO_writePin+0x160>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	2b c0       	rjmp	.+86     	; 0x16a6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	a1 f4       	brne	.+40     	; 0x167e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1656:	a2 e3       	ldi	r26, 0x32	; 50
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e2 e3       	ldi	r30, 0x32	; 50
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <GPIO_writePin+0x194>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <GPIO_writePin+0x190>
    1678:	84 2b       	or	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	14 c0       	rjmp	.+40     	; 0x16a6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    167e:	a2 e3       	ldi	r26, 0x32	; 50
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e2 e3       	ldi	r30, 0x32	; 50
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <GPIO_writePin+0x1bc>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <GPIO_writePin+0x1b8>
    16a0:	80 95       	com	r24
    16a2:	84 23       	and	r24, r20
    16a4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <GPIO_readPin>:
 * Description:
 * Read and return the value of the required pin, it should be LOGIC_HIGH or LOGIC_LOW
 * If the input port number or pin number are not correct, the function will return logic low
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <GPIO_readPin+0x6>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <GPIO_readPin+0x8>
    16be:	0f 92       	push	r0
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	8a 83       	std	Y+2, r24	; 0x02
    16c6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 readValue = 0 ;
    16c8:	19 82       	std	Y+1, r1	; 0x01
	if((port_num > NUM_OF_PORTS) || (pin_num > NUM_OF_PINS_PER_PORT))
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	85 30       	cpi	r24, 0x05	; 5
    16ce:	18 f4       	brcc	.+6      	; 0x16d6 <GPIO_readPin+0x20>
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	89 30       	cpi	r24, 0x09	; 9
    16d4:	10 f0       	brcs	.+4      	; 0x16da <GPIO_readPin+0x24>
	{
		readValue = 0 ;
    16d6:	19 82       	std	Y+1, r1	; 0x01
    16d8:	99 c0       	rjmp	.+306    	; 0x180c <GPIO_readPin+0x156>
	else
	{
		/*
		 * read the value of the chosen pin
		 */
		switch(port_num)
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3d 83       	std	Y+5, r19	; 0x05
    16e2:	2c 83       	std	Y+4, r18	; 0x04
    16e4:	4c 81       	ldd	r20, Y+4	; 0x04
    16e6:	5d 81       	ldd	r21, Y+5	; 0x05
    16e8:	41 30       	cpi	r20, 0x01	; 1
    16ea:	51 05       	cpc	r21, r1
    16ec:	b1 f1       	breq	.+108    	; 0x175a <GPIO_readPin+0xa4>
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	91 05       	cpc	r25, r1
    16f6:	34 f4       	brge	.+12     	; 0x1704 <GPIO_readPin+0x4e>
    16f8:	2c 81       	ldd	r18, Y+4	; 0x04
    16fa:	3d 81       	ldd	r19, Y+5	; 0x05
    16fc:	21 15       	cp	r18, r1
    16fe:	31 05       	cpc	r19, r1
    1700:	71 f0       	breq	.+28     	; 0x171e <GPIO_readPin+0x68>
    1702:	84 c0       	rjmp	.+264    	; 0x180c <GPIO_readPin+0x156>
    1704:	4c 81       	ldd	r20, Y+4	; 0x04
    1706:	5d 81       	ldd	r21, Y+5	; 0x05
    1708:	42 30       	cpi	r20, 0x02	; 2
    170a:	51 05       	cpc	r21, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <GPIO_readPin+0x5a>
    170e:	43 c0       	rjmp	.+134    	; 0x1796 <GPIO_readPin+0xe0>
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	91 05       	cpc	r25, r1
    1718:	09 f4       	brne	.+2      	; 0x171c <GPIO_readPin+0x66>
    171a:	5b c0       	rjmp	.+182    	; 0x17d2 <GPIO_readPin+0x11c>
    171c:	77 c0       	rjmp	.+238    	; 0x180c <GPIO_readPin+0x156>
			/*
			 * BIT_IS_SET to check if the bit is set or not and shifting right the answer as we need
			 * to read only LOGI_HIGH (1) or LOGIC_LOW (0)
			 * if ((PINA = 00000010)&(1<<(pin_num=1)))>>(1) = 1
			 */
			readValue = (BIT_IS_SET(PINA,pin_num)>>pin_num) ;
    171e:	e9 e3       	ldi	r30, 0x39	; 57
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_readPin+0x82>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	2a 95       	dec	r18
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_readPin+0x7e>
    173c:	9a 01       	movw	r18, r20
    173e:	28 23       	and	r18, r24
    1740:	39 23       	and	r19, r25
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a9 01       	movw	r20, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_readPin+0x9a>
    174c:	55 95       	asr	r21
    174e:	47 95       	ror	r20
    1750:	8a 95       	dec	r24
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_readPin+0x96>
    1754:	ca 01       	movw	r24, r20
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	59 c0       	rjmp	.+178    	; 0x180c <GPIO_readPin+0x156>
			break;
		case PORTB_ID:
			/*
			 * here as what happened in PORTA
			 */
			readValue = ((BIT_IS_SET(PINB,pin_num)) >> pin_num) ;
    175a:	e6 e3       	ldi	r30, 0x36	; 54
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <GPIO_readPin+0xbe>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	2a 95       	dec	r18
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <GPIO_readPin+0xba>
    1778:	9a 01       	movw	r18, r20
    177a:	28 23       	and	r18, r24
    177c:	39 23       	and	r19, r25
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a9 01       	movw	r20, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <GPIO_readPin+0xd6>
    1788:	55 95       	asr	r21
    178a:	47 95       	ror	r20
    178c:	8a 95       	dec	r24
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <GPIO_readPin+0xd2>
    1790:	ca 01       	movw	r24, r20
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	3b c0       	rjmp	.+118    	; 0x180c <GPIO_readPin+0x156>
			break;
		case PORTC_ID:
			/*
			 * here as what happened in PORTA
			 */
			readValue = ((BIT_IS_SET(PINC,pin_num)) >> pin_num) ;
    1796:	e3 e3       	ldi	r30, 0x33	; 51
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <GPIO_readPin+0xfa>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	2a 95       	dec	r18
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <GPIO_readPin+0xf6>
    17b4:	9a 01       	movw	r18, r20
    17b6:	28 23       	and	r18, r24
    17b8:	39 23       	and	r19, r25
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	a9 01       	movw	r20, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <GPIO_readPin+0x112>
    17c4:	55 95       	asr	r21
    17c6:	47 95       	ror	r20
    17c8:	8a 95       	dec	r24
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <GPIO_readPin+0x10e>
    17cc:	ca 01       	movw	r24, r20
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	1d c0       	rjmp	.+58     	; 0x180c <GPIO_readPin+0x156>
			break;
		case PORTD_ID:
			/*
			 * here as what happened in PORTA
			 */
			readValue = ((BIT_IS_SET(PIND,pin_num)) >> pin_num) ;
    17d2:	e0 e3       	ldi	r30, 0x30	; 48
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <GPIO_readPin+0x136>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	2a 95       	dec	r18
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <GPIO_readPin+0x132>
    17f0:	9a 01       	movw	r18, r20
    17f2:	28 23       	and	r18, r24
    17f4:	39 23       	and	r19, r25
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a9 01       	movw	r20, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <GPIO_readPin+0x14e>
    1800:	55 95       	asr	r21
    1802:	47 95       	ror	r20
    1804:	8a 95       	dec	r24
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <GPIO_readPin+0x14a>
    1808:	ca 01       	movw	r24, r20
    180a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return readValue ;
    180c:	89 81       	ldd	r24, Y+1	; 0x01
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <GPIO_setupPortDirection>:
 * if any pin in the port is input pin then this will activate/deactivate the internal pull_up
 * resistor.
 * if the input port number is not correct, the function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <GPIO_setupPortDirection+0x6>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <GPIO_setupPortDirection+0x8>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS)
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	85 30       	cpi	r24, 0x05	; 5
    1832:	90 f5       	brcc	.+100    	; 0x1898 <GPIO_setupPortDirection+0x7a>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3c 83       	std	Y+4, r19	; 0x04
    183c:	2b 83       	std	Y+3, r18	; 0x03
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	d1 f0       	breq	.+52     	; 0x187c <GPIO_setupPortDirection+0x5e>
    1848:	2b 81       	ldd	r18, Y+3	; 0x03
    184a:	3c 81       	ldd	r19, Y+4	; 0x04
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	2c f4       	brge	.+10     	; 0x185c <GPIO_setupPortDirection+0x3e>
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	61 f0       	breq	.+24     	; 0x1872 <GPIO_setupPortDirection+0x54>
    185a:	1e c0       	rjmp	.+60     	; 0x1898 <GPIO_setupPortDirection+0x7a>
    185c:	2b 81       	ldd	r18, Y+3	; 0x03
    185e:	3c 81       	ldd	r19, Y+4	; 0x04
    1860:	22 30       	cpi	r18, 0x02	; 2
    1862:	31 05       	cpc	r19, r1
    1864:	81 f0       	breq	.+32     	; 0x1886 <GPIO_setupPortDirection+0x68>
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	81 f0       	breq	.+32     	; 0x1890 <GPIO_setupPortDirection+0x72>
    1870:	13 c0       	rjmp	.+38     	; 0x1898 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1872:	ea e3       	ldi	r30, 0x3A	; 58
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	80 83       	st	Z, r24
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    187c:	e7 e3       	ldi	r30, 0x37	; 55
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	80 83       	st	Z, r24
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1886:	e4 e3       	ldi	r30, 0x34	; 52
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	80 83       	st	Z, r24
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1890:	e1 e3       	ldi	r30, 0x31	; 49
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	80 83       	st	Z, r24
			break;
		}
	}
}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <GPIO_writePort>:
 * if any pin in the port is output pin the value will be written.
 * if any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * if the input port is not correct, the function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <GPIO_writePort+0x6>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <GPIO_writePort+0x8>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS)
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	85 30       	cpi	r24, 0x05	; 5
    18ba:	90 f5       	brcc	.+100    	; 0x1920 <GPIO_writePort+0x7a>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3c 83       	std	Y+4, r19	; 0x04
    18c4:	2b 83       	std	Y+3, r18	; 0x03
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	91 05       	cpc	r25, r1
    18ce:	d1 f0       	breq	.+52     	; 0x1904 <GPIO_writePort+0x5e>
    18d0:	2b 81       	ldd	r18, Y+3	; 0x03
    18d2:	3c 81       	ldd	r19, Y+4	; 0x04
    18d4:	22 30       	cpi	r18, 0x02	; 2
    18d6:	31 05       	cpc	r19, r1
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <GPIO_writePort+0x3e>
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	61 f0       	breq	.+24     	; 0x18fa <GPIO_writePort+0x54>
    18e2:	1e c0       	rjmp	.+60     	; 0x1920 <GPIO_writePort+0x7a>
    18e4:	2b 81       	ldd	r18, Y+3	; 0x03
    18e6:	3c 81       	ldd	r19, Y+4	; 0x04
    18e8:	22 30       	cpi	r18, 0x02	; 2
    18ea:	31 05       	cpc	r19, r1
    18ec:	81 f0       	breq	.+32     	; 0x190e <GPIO_writePort+0x68>
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	91 05       	cpc	r25, r1
    18f6:	81 f0       	breq	.+32     	; 0x1918 <GPIO_writePort+0x72>
    18f8:	13 c0       	rjmp	.+38     	; 0x1920 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value ;
    18fa:	eb e3       	ldi	r30, 0x3B	; 59
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	80 83       	st	Z, r24
    1902:	0e c0       	rjmp	.+28     	; 0x1920 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value ;
    1904:	e8 e3       	ldi	r30, 0x38	; 56
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	80 83       	st	Z, r24
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value ;
    190e:	e5 e3       	ldi	r30, 0x35	; 53
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	80 83       	st	Z, r24
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1918:	e2 e3       	ldi	r30, 0x32	; 50
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <GPIO_readPort>:
 * Description:
 * Read and return the value of the required port.
 * if the port number is not correct, the function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <GPIO_readPort+0x6>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <GPIO_readPort+0x8>
    1936:	0f 92       	push	r0
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 readValue = 0 ;
    193e:	19 82       	std	Y+1, r1	; 0x01
	if(port_num > NUM_OF_PORTS)
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	85 30       	cpi	r24, 0x05	; 5
    1944:	10 f0       	brcs	.+4      	; 0x194a <GPIO_readPort+0x1c>
	{
		return 0 ;
    1946:	1d 82       	std	Y+5, r1	; 0x05
    1948:	34 c0       	rjmp	.+104    	; 0x19b2 <GPIO_readPort+0x84>
	}
	else
	{
		switch(port_num)
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	3c 83       	std	Y+4, r19	; 0x04
    1952:	2b 83       	std	Y+3, r18	; 0x03
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	91 05       	cpc	r25, r1
    195c:	d1 f0       	breq	.+52     	; 0x1992 <GPIO_readPort+0x64>
    195e:	2b 81       	ldd	r18, Y+3	; 0x03
    1960:	3c 81       	ldd	r19, Y+4	; 0x04
    1962:	22 30       	cpi	r18, 0x02	; 2
    1964:	31 05       	cpc	r19, r1
    1966:	2c f4       	brge	.+10     	; 0x1972 <GPIO_readPort+0x44>
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	61 f0       	breq	.+24     	; 0x1988 <GPIO_readPort+0x5a>
    1970:	1e c0       	rjmp	.+60     	; 0x19ae <GPIO_readPort+0x80>
    1972:	2b 81       	ldd	r18, Y+3	; 0x03
    1974:	3c 81       	ldd	r19, Y+4	; 0x04
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	81 f0       	breq	.+32     	; 0x199c <GPIO_readPort+0x6e>
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	91 05       	cpc	r25, r1
    1984:	81 f0       	breq	.+32     	; 0x19a6 <GPIO_readPort+0x78>
    1986:	13 c0       	rjmp	.+38     	; 0x19ae <GPIO_readPort+0x80>
		{
		case PORTA_ID:
			readValue = PINA;
    1988:	e9 e3       	ldi	r30, 0x39	; 57
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	0e c0       	rjmp	.+28     	; 0x19ae <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			readValue = PINB;
    1992:	e6 e3       	ldi	r30, 0x36	; 54
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			readValue = PINC;
    199c:	e3 e3       	ldi	r30, 0x33	; 51
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	04 c0       	rjmp	.+8      	; 0x19ae <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			readValue = PIND;
    19a6:	e0 e3       	ldi	r30, 0x30	; 48
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return readValue ;
    19ae:	99 81       	ldd	r25, Y+1	; 0x01
    19b0:	9d 83       	std	Y+5, r25	; 0x05
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <KEYPAD_getPressedKey>:
#else
	static uint8 KEYPAD_4x4_adjustKeyNumber (uint8 a_buttonNumber);
#endif

uint8 KEYPAD_getPressedKey (void)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <KEYPAD_getPressedKey+0x6>
    19ca:	0f 92       	push	r0
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
	uint8 col , row;
	uint8 keypad_port_value = 0;
    19d0:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		for(col = 0 ; col < TOTAL_NUMBER_OF_COLS ; col++)
    19d2:	1b 82       	std	Y+3, r1	; 0x03
    19d4:	43 c0       	rjmp	.+134    	; 0x1a5c <KEYPAD_getPressedKey+0x98>
		{
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	0e 94 0f 0c 	call	0x181e	; 0x181e <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID , col + KEYPAD_FIRST_COL_PIN_ID , PIN_OUTPUT);
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	98 2f       	mov	r25, r24
    19e2:	9c 5f       	subi	r25, 0xFC	; 252
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	69 2f       	mov	r22, r25
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 85 09 	call	0x130a	; 0x130a <GPIO_setupPinDirection>
#if (KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			keypad_port_value = (~(1<<(KEYPAD_FIRST_COL_PIN_ID + col)));
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9c 01       	movw	r18, r24
    19f6:	2c 5f       	subi	r18, 0xFC	; 252
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <KEYPAD_getPressedKey+0x40>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	2a 95       	dec	r18
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <KEYPAD_getPressedKey+0x3c>
    1a08:	80 95       	com	r24
    1a0a:	89 83       	std	Y+1, r24	; 0x01
#else
			keypad_port_value = (1<<(KEYPAD_FIRST_COL_PIN_ID + col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID , keypad_port_value);
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	69 81       	ldd	r22, Y+1	; 0x01
    1a10:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePort>

			for(row = 0 ; row < TOTAL_NUMBER_OF_ROWS ; row++)
    1a14:	1a 82       	std	Y+2, r1	; 0x02
    1a16:	1c c0       	rjmp	.+56     	; 0x1a50 <KEYPAD_getPressedKey+0x8c>
			{
				if(GPIO_readPin(KEYPAD_PORT_ID , row + KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	6a 81       	ldd	r22, Y+2	; 0x02
    1a1c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <GPIO_readPin>
    1a20:	88 23       	and	r24, r24
    1a22:	99 f4       	brne	.+38     	; 0x1a4a <KEYPAD_getPressedKey+0x86>
				{
#if (TOTAL_NUMBER_OF_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber ((row * TOTAL_NUMBER_OF_COLS)+ col + 1);
#else
					return KEYPAD_4x4_adjustKeyNumber ((row * TOTAL_NUMBER_OF_COLS)+ col + 1);
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	98 2f       	mov	r25, r24
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	89 0f       	add	r24, r25
    1a38:	8f 5f       	subi	r24, 0xFF	; 255
    1a3a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <KEYPAD_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret
#else
			keypad_port_value = (1<<(KEYPAD_FIRST_COL_PIN_ID + col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID , keypad_port_value);

			for(row = 0 ; row < TOTAL_NUMBER_OF_ROWS ; row++)
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	8f 5f       	subi	r24, 0xFF	; 255
    1a4e:	8a 83       	std	Y+2, r24	; 0x02
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	84 30       	cpi	r24, 0x04	; 4
    1a54:	08 f3       	brcs	.-62     	; 0x1a18 <KEYPAD_getPressedKey+0x54>
	uint8 col , row;
	uint8 keypad_port_value = 0;

	while(1)
	{
		for(col = 0 ; col < TOTAL_NUMBER_OF_COLS ; col++)
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	8f 5f       	subi	r24, 0xFF	; 255
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	84 30       	cpi	r24, 0x04	; 4
    1a60:	08 f4       	brcc	.+2      	; 0x1a64 <KEYPAD_getPressedKey+0xa0>
    1a62:	b9 cf       	rjmp	.-142    	; 0x19d6 <KEYPAD_getPressedKey+0x12>
    1a64:	b6 cf       	rjmp	.-148    	; 0x19d2 <KEYPAD_getPressedKey+0xe>

00001a66 <KEYPAD_4x4_adjustKeyNumber>:
}

#else

static uint8 KEYPAD_4x4_adjustKeyNumber (uint8 a_buttonNumber)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <KEYPAD_4x4_adjustKeyNumber+0x6>
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <KEYPAD_4x4_adjustKeyNumber+0x8>
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0 ;
    1a74:	19 82       	std	Y+1, r1	; 0x01
	switch(a_buttonNumber)
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	3c 83       	std	Y+4, r19	; 0x04
    1a7e:	2b 83       	std	Y+3, r18	; 0x03
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	88 30       	cpi	r24, 0x08	; 8
    1a86:	91 05       	cpc	r25, r1
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1a8a:	70 c0       	rjmp	.+224    	; 0x1b6c <KEYPAD_4x4_adjustKeyNumber+0x106>
    1a8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a90:	29 30       	cpi	r18, 0x09	; 9
    1a92:	31 05       	cpc	r19, r1
    1a94:	5c f5       	brge	.+86     	; 0x1aec <KEYPAD_4x4_adjustKeyNumber+0x86>
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	84 30       	cpi	r24, 0x04	; 4
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1aa0:	59 c0       	rjmp	.+178    	; 0x1b54 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa6:	25 30       	cpi	r18, 0x05	; 5
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	9c f4       	brge	.+38     	; 0x1ad2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	82 30       	cpi	r24, 0x02	; 2
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1ab6:	48 c0       	rjmp	.+144    	; 0x1b48 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1ab8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aba:	3c 81       	ldd	r19, Y+4	; 0x04
    1abc:	23 30       	cpi	r18, 0x03	; 3
    1abe:	31 05       	cpc	r19, r1
    1ac0:	0c f0       	brlt	.+2      	; 0x1ac4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1ac2:	45 c0       	rjmp	.+138    	; 0x1b4e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	91 05       	cpc	r25, r1
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ace:	39 c0       	rjmp	.+114    	; 0x1b42 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ad0:	66 c0       	rjmp	.+204    	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
    1ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad6:	26 30       	cpi	r18, 0x06	; 6
    1ad8:	31 05       	cpc	r19, r1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <KEYPAD_4x4_adjustKeyNumber+0x78>
    1adc:	41 c0       	rjmp	.+130    	; 0x1b60 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	87 30       	cpi	r24, 0x07	; 7
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	0c f0       	brlt	.+2      	; 0x1aea <KEYPAD_4x4_adjustKeyNumber+0x84>
    1ae8:	3e c0       	rjmp	.+124    	; 0x1b66 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1aea:	37 c0       	rjmp	.+110    	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1aec:	2b 81       	ldd	r18, Y+3	; 0x03
    1aee:	3c 81       	ldd	r19, Y+4	; 0x04
    1af0:	2c 30       	cpi	r18, 0x0C	; 12
    1af2:	31 05       	cpc	r19, r1
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1af6:	46 c0       	rjmp	.+140    	; 0x1b84 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	8d 30       	cpi	r24, 0x0D	; 13
    1afe:	91 05       	cpc	r25, r1
    1b00:	5c f4       	brge	.+22     	; 0x1b18 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1b02:	2b 81       	ldd	r18, Y+3	; 0x03
    1b04:	3c 81       	ldd	r19, Y+4	; 0x04
    1b06:	2a 30       	cpi	r18, 0x0A	; 10
    1b08:	31 05       	cpc	r19, r1
    1b0a:	b1 f1       	breq	.+108    	; 0x1b78 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	8b 30       	cpi	r24, 0x0B	; 11
    1b12:	91 05       	cpc	r25, r1
    1b14:	a4 f5       	brge	.+104    	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1b16:	2d c0       	rjmp	.+90     	; 0x1b72 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1b18:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1c:	2e 30       	cpi	r18, 0x0E	; 14
    1b1e:	31 05       	cpc	r19, r1
    1b20:	b9 f1       	breq	.+110    	; 0x1b90 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	8e 30       	cpi	r24, 0x0E	; 14
    1b28:	91 05       	cpc	r25, r1
    1b2a:	7c f1       	brlt	.+94     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1b2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b30:	2f 30       	cpi	r18, 0x0F	; 15
    1b32:	31 05       	cpc	r19, r1
    1b34:	79 f1       	breq	.+94     	; 0x1b94 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	80 31       	cpi	r24, 0x10	; 16
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	69 f1       	breq	.+90     	; 0x1b9a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1b40:	2e c0       	rjmp	.+92     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
	{
	case 1:
		keypad_button = 7 ;
    1b42:	87 e0       	ldi	r24, 0x07	; 7
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	2b c0       	rjmp	.+86     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 2:
		keypad_button = 8 ;
    1b48:	88 e0       	ldi	r24, 0x08	; 8
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	28 c0       	rjmp	.+80     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 3:
		keypad_button = 9 ;
    1b4e:	89 e0       	ldi	r24, 0x09	; 9
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	25 c0       	rjmp	.+74     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 4:
		keypad_button = 'A';
    1b54:	81 e4       	ldi	r24, 0x41	; 65
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	22 c0       	rjmp	.+68     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 5:
		keypad_button = 4 ;
    1b5a:	84 e0       	ldi	r24, 0x04	; 4
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	1f c0       	rjmp	.+62     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 6:
		keypad_button = 5 ;
    1b60:	85 e0       	ldi	r24, 0x05	; 5
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	1c c0       	rjmp	.+56     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 7:
		keypad_button = 6 ;
    1b66:	86 e0       	ldi	r24, 0x06	; 6
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	19 c0       	rjmp	.+50     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 8:
		keypad_button = 'B' ;
    1b6c:	82 e4       	ldi	r24, 0x42	; 66
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	16 c0       	rjmp	.+44     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 9:
		keypad_button = 1 ;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	13 c0       	rjmp	.+38     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 10:
		keypad_button = 2 ;
    1b78:	82 e0       	ldi	r24, 0x02	; 2
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	10 c0       	rjmp	.+32     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 11:
		keypad_button = 3 ;
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	0d c0       	rjmp	.+26     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 12:
		keypad_button = '-' ;
    1b84:	8d e2       	ldi	r24, 0x2D	; 45
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	0a c0       	rjmp	.+20     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 13:
		keypad_button = '*' ;
    1b8a:	8a e2       	ldi	r24, 0x2A	; 42
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	07 c0       	rjmp	.+14     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 14:
		keypad_button = 0 ;
    1b90:	19 82       	std	Y+1, r1	; 0x01
    1b92:	05 c0       	rjmp	.+10     	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 15:
		keypad_button = '=' ;
    1b94:	8d e3       	ldi	r24, 0x3D	; 61
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 16:
		keypad_button = '+' ;
    1b9a:	8b e2       	ldi	r24, 0x2B	; 43
    1b9c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button ;
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <LCD_init>:
 * 2. sending (0x38) command to use 2 lines + 5x8 matrix mode.
 * 3. sending (0x0c) command to turn on the display and turn off the cursor.
 * 4. sending (0x01) command to clear the screen.
 */
void LCD_init(void)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
	/* RS PIN logic_low for instructions , logic_high for data */
	GPIO_setupPinDirection(LCD_RS_PORT_ID , LCD_RS_PIN_ID , PIN_OUTPUT);
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	41 e0       	ldi	r20, 0x01	; 1
    1bbc:	0e 94 85 09 	call	0x130a	; 0x130a <GPIO_setupPinDirection>

	/* R/(W)' logic_low for write , logic_high for read */
	GPIO_setupPinDirection(LCD_RW_PORT_ID , LCD_RW_PIN_ID , PIN_OUTPUT);
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	41 e0       	ldi	r20, 0x01	; 1
    1bc6:	0e 94 85 09 	call	0x130a	; 0x130a <GPIO_setupPinDirection>

	/* Enable */
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID , LCD_ENABLE_PIN_ID , PIN_OUTPUT);
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	62 e0       	ldi	r22, 0x02	; 2
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	0e 94 85 09 	call	0x130a	; 0x130a <GPIO_setupPinDirection>
#if (LCD_COMMAND_BITS == 8)

	/* setting up the direction of the whole port */
	GPIO_setupPortDirection(LCD_COMMANDS_DATA_PORT_ID , PORT_OUTPUT);
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	6f ef       	ldi	r22, 0xFF	; 255
    1bd8:	0e 94 0f 0c 	call	0x181e	; 0x181e <GPIO_setupPortDirection>

	LCD_sendCommand(0X38); /* 2 lines and 8-bits mode command */
    1bdc:	88 e3       	ldi	r24, 0x38	; 56
    1bde:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <LCD_sendCommand>

#endif



	LCD_sendCommand(0X0C); /* Display on cursor off command */
    1be2:	8c e0       	ldi	r24, 0x0C	; 12
    1be4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <LCD_sendCommand>
	LCD_sendCommand(0X01); /* Clear display screen command */
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <LCD_sendCommand>

}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <LCD_sendCommand>:
/*
 * Description:
 * this function is to send the essential command to the LCD.
 */
void LCD_sendCommand (uint8 a_command)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	e9 97       	sbiw	r28, 0x39	; 57
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	89 af       	std	Y+57, r24	; 0x39
	/* RS PIN logic_low for instructions , logic_high for data */
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_LOW);
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_writePin>

	/* R/(W)' logic_low for write , logic_high for read */
	GPIO_writePin(LCD_RW_PORT_ID , LCD_RW_PIN_ID , LOGIC_LOW);
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_writePin>
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	a0 e8       	ldi	r26, 0x80	; 128
    1c24:	bf e3       	ldi	r27, 0x3F	; 63
    1c26:	8d ab       	std	Y+53, r24	; 0x35
    1c28:	9e ab       	std	Y+54, r25	; 0x36
    1c2a:	af ab       	std	Y+55, r26	; 0x37
    1c2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c30:	7e a9       	ldd	r23, Y+54	; 0x36
    1c32:	8f a9       	ldd	r24, Y+55	; 0x37
    1c34:	98 ad       	ldd	r25, Y+56	; 0x38
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4a e7       	ldi	r20, 0x7A	; 122
    1c3c:	53 e4       	ldi	r21, 0x43	; 67
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	89 ab       	std	Y+49, r24	; 0x31
    1c48:	9a ab       	std	Y+50, r25	; 0x32
    1c4a:	ab ab       	std	Y+51, r26	; 0x33
    1c4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c50:	7a a9       	ldd	r23, Y+50	; 0x32
    1c52:	8b a9       	ldd	r24, Y+51	; 0x33
    1c54:	9c a9       	ldd	r25, Y+52	; 0x34
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e8       	ldi	r20, 0x80	; 128
    1c5c:	5f e3       	ldi	r21, 0x3F	; 63
    1c5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c62:	88 23       	and	r24, r24
    1c64:	2c f4       	brge	.+10     	; 0x1c70 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	98 ab       	std	Y+48, r25	; 0x30
    1c6c:	8f a7       	std	Y+47, r24	; 0x2f
    1c6e:	3f c0       	rjmp	.+126    	; 0x1cee <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1c70:	69 a9       	ldd	r22, Y+49	; 0x31
    1c72:	7a a9       	ldd	r23, Y+50	; 0x32
    1c74:	8b a9       	ldd	r24, Y+51	; 0x33
    1c76:	9c a9       	ldd	r25, Y+52	; 0x34
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	3f ef       	ldi	r19, 0xFF	; 255
    1c7c:	4f e7       	ldi	r20, 0x7F	; 127
    1c7e:	57 e4       	ldi	r21, 0x47	; 71
    1c80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c84:	18 16       	cp	r1, r24
    1c86:	4c f5       	brge	.+82     	; 0x1cda <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c88:	6d a9       	ldd	r22, Y+53	; 0x35
    1c8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e2       	ldi	r20, 0x20	; 32
    1c96:	51 e4       	ldi	r21, 0x41	; 65
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	98 ab       	std	Y+48, r25	; 0x30
    1cae:	8f a7       	std	Y+47, r24	; 0x2f
    1cb0:	0f c0       	rjmp	.+30     	; 0x1cd0 <LCD_sendCommand+0xdc>
    1cb2:	89 e1       	ldi	r24, 0x19	; 25
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9e a7       	std	Y+46, r25	; 0x2e
    1cb8:	8d a7       	std	Y+45, r24	; 0x2d
    1cba:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_sendCommand+0xca>
    1cc2:	9e a7       	std	Y+46, r25	; 0x2e
    1cc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	98 ab       	std	Y+48, r25	; 0x30
    1cce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	69 f7       	brne	.-38     	; 0x1cb2 <LCD_sendCommand+0xbe>
    1cd8:	14 c0       	rjmp	.+40     	; 0x1d02 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cda:	69 a9       	ldd	r22, Y+49	; 0x31
    1cdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cde:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	98 ab       	std	Y+48, r25	; 0x30
    1cec:	8f a7       	std	Y+47, r24	; 0x2f
    1cee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf2:	9c a7       	std	Y+44, r25	; 0x2c
    1cf4:	8b a7       	std	Y+43, r24	; 0x2b
    1cf6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cf8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCD_sendCommand+0x106>
    1cfe:	9c a7       	std	Y+44, r25	; 0x2c
    1d00:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Enable */
	GPIO_writePin(LCD_ENABLE_PORT_ID , LCD_ENABLE_PIN_ID , LOGIC_HIGH);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	62 e0       	ldi	r22, 0x02	; 2
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_writePin>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a0 e8       	ldi	r26, 0x80	; 128
    1d12:	bf e3       	ldi	r27, 0x3F	; 63
    1d14:	8f a3       	std	Y+39, r24	; 0x27
    1d16:	98 a7       	std	Y+40, r25	; 0x28
    1d18:	a9 a7       	std	Y+41, r26	; 0x29
    1d1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d20:	89 a5       	ldd	r24, Y+41	; 0x29
    1d22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a e7       	ldi	r20, 0x7A	; 122
    1d2a:	53 e4       	ldi	r21, 0x43	; 67
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	8b a3       	std	Y+35, r24	; 0x23
    1d36:	9c a3       	std	Y+36, r25	; 0x24
    1d38:	ad a3       	std	Y+37, r26	; 0x25
    1d3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d40:	8d a1       	ldd	r24, Y+37	; 0x25
    1d42:	9e a1       	ldd	r25, Y+38	; 0x26
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <LCD_sendCommand+0x16a>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9a a3       	std	Y+34, r25	; 0x22
    1d5a:	89 a3       	std	Y+33, r24	; 0x21
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1d5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d60:	7c a1       	ldd	r23, Y+36	; 0x24
    1d62:	8d a1       	ldd	r24, Y+37	; 0x25
    1d64:	9e a1       	ldd	r25, Y+38	; 0x26
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6f a1       	ldd	r22, Y+39	; 0x27
    1d78:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9a a3       	std	Y+34, r25	; 0x22
    1d9c:	89 a3       	std	Y+33, r24	; 0x21
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <LCD_sendCommand+0x1ca>
    1da0:	89 e1       	ldi	r24, 0x19	; 25
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	98 a3       	std	Y+32, r25	; 0x20
    1da6:	8f 8f       	std	Y+31, r24	; 0x1f
    1da8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1daa:	98 a1       	ldd	r25, Y+32	; 0x20
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_sendCommand+0x1b8>
    1db0:	98 a3       	std	Y+32, r25	; 0x20
    1db2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	89 a1       	ldd	r24, Y+33	; 0x21
    1db6:	9a a1       	ldd	r25, Y+34	; 0x22
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	9a a3       	std	Y+34, r25	; 0x22
    1dbc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <LCD_sendCommand+0x1ac>
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dca:	7c a1       	ldd	r23, Y+36	; 0x24
    1dcc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dce:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9a a3       	std	Y+34, r25	; 0x22
    1dda:	89 a3       	std	Y+33, r24	; 0x21
    1ddc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dde:	9a a1       	ldd	r25, Y+34	; 0x22
    1de0:	9e 8f       	std	Y+30, r25	; 0x1e
    1de2:	8d 8f       	std	Y+29, r24	; 0x1d
    1de4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <LCD_sendCommand+0x1f4>
    1dec:	9e 8f       	std	Y+30, r25	; 0x1e
    1dee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* for writing the command */
	GPIO_writePort(LCD_COMMANDS_DATA_PORT_ID , a_command);
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	69 ad       	ldd	r22, Y+57	; 0x39
    1df4:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePort>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	a0 e8       	ldi	r26, 0x80	; 128
    1dfe:	bf e3       	ldi	r27, 0x3F	; 63
    1e00:	89 8f       	std	Y+25, r24	; 0x19
    1e02:	9a 8f       	std	Y+26, r25	; 0x1a
    1e04:	ab 8f       	std	Y+27, r26	; 0x1b
    1e06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e08:	69 8d       	ldd	r22, Y+25	; 0x19
    1e0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a e7       	ldi	r20, 0x7A	; 122
    1e16:	53 e4       	ldi	r21, 0x43	; 67
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8d 8b       	std	Y+21, r24	; 0x15
    1e22:	9e 8b       	std	Y+22, r25	; 0x16
    1e24:	af 8b       	std	Y+23, r26	; 0x17
    1e26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e28:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <LCD_sendCommand+0x256>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9c 8b       	std	Y+20, r25	; 0x14
    1e46:	8b 8b       	std	Y+19, r24	; 0x13
    1e48:	3f c0       	rjmp	.+126    	; 0x1ec8 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1e4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e50:	98 8d       	ldd	r25, Y+24	; 0x18
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	57 e4       	ldi	r21, 0x47	; 71
    1e5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5e:	18 16       	cp	r1, r24
    1e60:	4c f5       	brge	.+82     	; 0x1eb4 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	69 8d       	ldd	r22, Y+25	; 0x19
    1e64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9c 8b       	std	Y+20, r25	; 0x14
    1e88:	8b 8b       	std	Y+19, r24	; 0x13
    1e8a:	0f c0       	rjmp	.+30     	; 0x1eaa <LCD_sendCommand+0x2b6>
    1e8c:	89 e1       	ldi	r24, 0x19	; 25
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9a 8b       	std	Y+18, r25	; 0x12
    1e92:	89 8b       	std	Y+17, r24	; 0x11
    1e94:	89 89       	ldd	r24, Y+17	; 0x11
    1e96:	9a 89       	ldd	r25, Y+18	; 0x12
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <LCD_sendCommand+0x2a4>
    1e9c:	9a 8b       	std	Y+18, r25	; 0x12
    1e9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	9c 8b       	std	Y+20, r25	; 0x14
    1ea8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	8b 89       	ldd	r24, Y+19	; 0x13
    1eac:	9c 89       	ldd	r25, Y+20	; 0x14
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	69 f7       	brne	.-38     	; 0x1e8c <LCD_sendCommand+0x298>
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eba:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	9c 8b       	std	Y+20, r25	; 0x14
    1ec6:	8b 8b       	std	Y+19, r24	; 0x13
    1ec8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ecc:	98 8b       	std	Y+16, r25	; 0x10
    1ece:	8f 87       	std	Y+15, r24	; 0x0f
    1ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ed2:	98 89       	ldd	r25, Y+16	; 0x10
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <LCD_sendCommand+0x2e0>
    1ed8:	98 8b       	std	Y+16, r25	; 0x10
    1eda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* Disable LCD */
	GPIO_writePin(LCD_ENABLE_PORT_ID , LCD_ENABLE_PIN_ID , LOGIC_LOW);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	62 e0       	ldi	r22, 0x02	; 2
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_writePin>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 e8       	ldi	r26, 0x80	; 128
    1eec:	bf e3       	ldi	r27, 0x3F	; 63
    1eee:	8b 87       	std	Y+11, r24	; 0x0b
    1ef0:	9c 87       	std	Y+12, r25	; 0x0c
    1ef2:	ad 87       	std	Y+13, r26	; 0x0d
    1ef4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a e7       	ldi	r20, 0x7A	; 122
    1f04:	53 e4       	ldi	r21, 0x43	; 67
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8f 83       	std	Y+7, r24	; 0x07
    1f10:	98 87       	std	Y+8, r25	; 0x08
    1f12:	a9 87       	std	Y+9, r26	; 0x09
    1f14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f16:	6f 81       	ldd	r22, Y+7	; 0x07
    1f18:	78 85       	ldd	r23, Y+8	; 0x08
    1f1a:	89 85       	ldd	r24, Y+9	; 0x09
    1f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <LCD_sendCommand+0x344>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCD_sendCommand+0x3a4>
    1f7a:	89 e1       	ldi	r24, 0x19	; 25
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9c 83       	std	Y+4, r25	; 0x04
    1f80:	8b 83       	std	Y+3, r24	; 0x03
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_sendCommand+0x392>
    1f8a:	9c 83       	std	Y+4, r25	; 0x04
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9e 83       	std	Y+6, r25	; 0x06
    1f96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <LCD_sendCommand+0x386>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa4:	78 85       	ldd	r23, Y+8	; 0x08
    1fa6:	89 85       	ldd	r24, Y+9	; 0x09
    1fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_sendCommand+0x3ce>
    1fc6:	9a 83       	std	Y+2, r25	; 0x02
    1fc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1fca:	e9 96       	adiw	r28, 0x39	; 57
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <LCD_displayCharacter>:
/*
 * Description:
 * this function is used to display a single character on the LCD.
 */
void LCD_displayCharacter (uint8 a_character)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	e9 97       	sbiw	r28, 0x39	; 57
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
    1ff0:	89 af       	std	Y+57, r24	; 0x39
	/* RS PIN logic_low for transferring instructions , logic_high for data */
	GPIO_writePin(LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOGIC_HIGH);
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_writePin>

	/* R/(W)' logic_low for write , logic_high for read */
	GPIO_writePin(LCD_RW_PORT_ID , LCD_RW_PIN_ID , LOGIC_LOW);
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	61 e0       	ldi	r22, 0x01	; 1
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_writePin>
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e8       	ldi	r26, 0x80	; 128
    200c:	bf e3       	ldi	r27, 0x3F	; 63
    200e:	8d ab       	std	Y+53, r24	; 0x35
    2010:	9e ab       	std	Y+54, r25	; 0x36
    2012:	af ab       	std	Y+55, r26	; 0x37
    2014:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2016:	6d a9       	ldd	r22, Y+53	; 0x35
    2018:	7e a9       	ldd	r23, Y+54	; 0x36
    201a:	8f a9       	ldd	r24, Y+55	; 0x37
    201c:	98 ad       	ldd	r25, Y+56	; 0x38
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a e7       	ldi	r20, 0x7A	; 122
    2024:	53 e4       	ldi	r21, 0x43	; 67
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	89 ab       	std	Y+49, r24	; 0x31
    2030:	9a ab       	std	Y+50, r25	; 0x32
    2032:	ab ab       	std	Y+51, r26	; 0x33
    2034:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2036:	69 a9       	ldd	r22, Y+49	; 0x31
    2038:	7a a9       	ldd	r23, Y+50	; 0x32
    203a:	8b a9       	ldd	r24, Y+51	; 0x33
    203c:	9c a9       	ldd	r25, Y+52	; 0x34
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e8       	ldi	r20, 0x80	; 128
    2044:	5f e3       	ldi	r21, 0x3F	; 63
    2046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204a:	88 23       	and	r24, r24
    204c:	2c f4       	brge	.+10     	; 0x2058 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	98 ab       	std	Y+48, r25	; 0x30
    2054:	8f a7       	std	Y+47, r24	; 0x2f
    2056:	3f c0       	rjmp	.+126    	; 0x20d6 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2058:	69 a9       	ldd	r22, Y+49	; 0x31
    205a:	7a a9       	ldd	r23, Y+50	; 0x32
    205c:	8b a9       	ldd	r24, Y+51	; 0x33
    205e:	9c a9       	ldd	r25, Y+52	; 0x34
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	3f ef       	ldi	r19, 0xFF	; 255
    2064:	4f e7       	ldi	r20, 0x7F	; 127
    2066:	57 e4       	ldi	r21, 0x47	; 71
    2068:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    206c:	18 16       	cp	r1, r24
    206e:	4c f5       	brge	.+82     	; 0x20c2 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2070:	6d a9       	ldd	r22, Y+53	; 0x35
    2072:	7e a9       	ldd	r23, Y+54	; 0x36
    2074:	8f a9       	ldd	r24, Y+55	; 0x37
    2076:	98 ad       	ldd	r25, Y+56	; 0x38
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e2       	ldi	r20, 0x20	; 32
    207e:	51 e4       	ldi	r21, 0x41	; 65
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	98 ab       	std	Y+48, r25	; 0x30
    2096:	8f a7       	std	Y+47, r24	; 0x2f
    2098:	0f c0       	rjmp	.+30     	; 0x20b8 <LCD_displayCharacter+0xdc>
    209a:	89 e1       	ldi	r24, 0x19	; 25
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9e a7       	std	Y+46, r25	; 0x2e
    20a0:	8d a7       	std	Y+45, r24	; 0x2d
    20a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    20a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_displayCharacter+0xca>
    20aa:	9e a7       	std	Y+46, r25	; 0x2e
    20ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b0:	98 a9       	ldd	r25, Y+48	; 0x30
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	98 ab       	std	Y+48, r25	; 0x30
    20b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ba:	98 a9       	ldd	r25, Y+48	; 0x30
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	69 f7       	brne	.-38     	; 0x209a <LCD_displayCharacter+0xbe>
    20c0:	14 c0       	rjmp	.+40     	; 0x20ea <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	69 a9       	ldd	r22, Y+49	; 0x31
    20c4:	7a a9       	ldd	r23, Y+50	; 0x32
    20c6:	8b a9       	ldd	r24, Y+51	; 0x33
    20c8:	9c a9       	ldd	r25, Y+52	; 0x34
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	98 ab       	std	Y+48, r25	; 0x30
    20d4:	8f a7       	std	Y+47, r24	; 0x2f
    20d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d8:	98 a9       	ldd	r25, Y+48	; 0x30
    20da:	9c a7       	std	Y+44, r25	; 0x2c
    20dc:	8b a7       	std	Y+43, r24	; 0x2b
    20de:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_displayCharacter+0x106>
    20e6:	9c a7       	std	Y+44, r25	; 0x2c
    20e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Enable LCD */
	GPIO_writePin(LCD_ENABLE_PORT_ID , LCD_ENABLE_PIN_ID , LOGIC_HIGH);
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	62 e0       	ldi	r22, 0x02	; 2
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_writePin>
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 e8       	ldi	r26, 0x80	; 128
    20fa:	bf e3       	ldi	r27, 0x3F	; 63
    20fc:	8f a3       	std	Y+39, r24	; 0x27
    20fe:	98 a7       	std	Y+40, r25	; 0x28
    2100:	a9 a7       	std	Y+41, r26	; 0x29
    2102:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	6f a1       	ldd	r22, Y+39	; 0x27
    2106:	78 a5       	ldd	r23, Y+40	; 0x28
    2108:	89 a5       	ldd	r24, Y+41	; 0x29
    210a:	9a a5       	ldd	r25, Y+42	; 0x2a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a e7       	ldi	r20, 0x7A	; 122
    2112:	53 e4       	ldi	r21, 0x43	; 67
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8b a3       	std	Y+35, r24	; 0x23
    211e:	9c a3       	std	Y+36, r25	; 0x24
    2120:	ad a3       	std	Y+37, r26	; 0x25
    2122:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2124:	6b a1       	ldd	r22, Y+35	; 0x23
    2126:	7c a1       	ldd	r23, Y+36	; 0x24
    2128:	8d a1       	ldd	r24, Y+37	; 0x25
    212a:	9e a1       	ldd	r25, Y+38	; 0x26
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9a a3       	std	Y+34, r25	; 0x22
    2142:	89 a3       	std	Y+33, r24	; 0x21
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2146:	6b a1       	ldd	r22, Y+35	; 0x23
    2148:	7c a1       	ldd	r23, Y+36	; 0x24
    214a:	8d a1       	ldd	r24, Y+37	; 0x25
    214c:	9e a1       	ldd	r25, Y+38	; 0x26
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	6f a1       	ldd	r22, Y+39	; 0x27
    2160:	78 a5       	ldd	r23, Y+40	; 0x28
    2162:	89 a5       	ldd	r24, Y+41	; 0x29
    2164:	9a a5       	ldd	r25, Y+42	; 0x2a
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9a a3       	std	Y+34, r25	; 0x22
    2184:	89 a3       	std	Y+33, r24	; 0x21
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <LCD_displayCharacter+0x1ca>
    2188:	89 e1       	ldi	r24, 0x19	; 25
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	98 a3       	std	Y+32, r25	; 0x20
    218e:	8f 8f       	std	Y+31, r24	; 0x1f
    2190:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2192:	98 a1       	ldd	r25, Y+32	; 0x20
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_displayCharacter+0x1b8>
    2198:	98 a3       	std	Y+32, r25	; 0x20
    219a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	89 a1       	ldd	r24, Y+33	; 0x21
    219e:	9a a1       	ldd	r25, Y+34	; 0x22
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9a a3       	std	Y+34, r25	; 0x22
    21a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	89 a1       	ldd	r24, Y+33	; 0x21
    21a8:	9a a1       	ldd	r25, Y+34	; 0x22
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <LCD_displayCharacter+0x1ac>
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6b a1       	ldd	r22, Y+35	; 0x23
    21b2:	7c a1       	ldd	r23, Y+36	; 0x24
    21b4:	8d a1       	ldd	r24, Y+37	; 0x25
    21b6:	9e a1       	ldd	r25, Y+38	; 0x26
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9a a3       	std	Y+34, r25	; 0x22
    21c2:	89 a3       	std	Y+33, r24	; 0x21
    21c4:	89 a1       	ldd	r24, Y+33	; 0x21
    21c6:	9a a1       	ldd	r25, Y+34	; 0x22
    21c8:	9e 8f       	std	Y+30, r25	; 0x1e
    21ca:	8d 8f       	std	Y+29, r24	; 0x1d
    21cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <LCD_displayCharacter+0x1f4>
    21d4:	9e 8f       	std	Y+30, r25	; 0x1e
    21d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* for writing the command */
	GPIO_writePort(LCD_COMMANDS_DATA_PORT_ID , a_character);
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	69 ad       	ldd	r22, Y+57	; 0x39
    21dc:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePort>
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a0 e8       	ldi	r26, 0x80	; 128
    21e6:	bf e3       	ldi	r27, 0x3F	; 63
    21e8:	89 8f       	std	Y+25, r24	; 0x19
    21ea:	9a 8f       	std	Y+26, r25	; 0x1a
    21ec:	ab 8f       	std	Y+27, r26	; 0x1b
    21ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f0:	69 8d       	ldd	r22, Y+25	; 0x19
    21f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4a e7       	ldi	r20, 0x7A	; 122
    21fe:	53 e4       	ldi	r21, 0x43	; 67
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	8d 8b       	std	Y+21, r24	; 0x15
    220a:	9e 8b       	std	Y+22, r25	; 0x16
    220c:	af 8b       	std	Y+23, r26	; 0x17
    220e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2210:	6d 89       	ldd	r22, Y+21	; 0x15
    2212:	7e 89       	ldd	r23, Y+22	; 0x16
    2214:	8f 89       	ldd	r24, Y+23	; 0x17
    2216:	98 8d       	ldd	r25, Y+24	; 0x18
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e8       	ldi	r20, 0x80	; 128
    221e:	5f e3       	ldi	r21, 0x3F	; 63
    2220:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2224:	88 23       	and	r24, r24
    2226:	2c f4       	brge	.+10     	; 0x2232 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9c 8b       	std	Y+20, r25	; 0x14
    222e:	8b 8b       	std	Y+19, r24	; 0x13
    2230:	3f c0       	rjmp	.+126    	; 0x22b0 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2232:	6d 89       	ldd	r22, Y+21	; 0x15
    2234:	7e 89       	ldd	r23, Y+22	; 0x16
    2236:	8f 89       	ldd	r24, Y+23	; 0x17
    2238:	98 8d       	ldd	r25, Y+24	; 0x18
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	3f ef       	ldi	r19, 0xFF	; 255
    223e:	4f e7       	ldi	r20, 0x7F	; 127
    2240:	57 e4       	ldi	r21, 0x47	; 71
    2242:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2246:	18 16       	cp	r1, r24
    2248:	4c f5       	brge	.+82     	; 0x229c <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224a:	69 8d       	ldd	r22, Y+25	; 0x19
    224c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2250:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e2       	ldi	r20, 0x20	; 32
    2258:	51 e4       	ldi	r21, 0x41	; 65
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	9c 8b       	std	Y+20, r25	; 0x14
    2270:	8b 8b       	std	Y+19, r24	; 0x13
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <LCD_displayCharacter+0x2b6>
    2274:	89 e1       	ldi	r24, 0x19	; 25
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9a 8b       	std	Y+18, r25	; 0x12
    227a:	89 8b       	std	Y+17, r24	; 0x11
    227c:	89 89       	ldd	r24, Y+17	; 0x11
    227e:	9a 89       	ldd	r25, Y+18	; 0x12
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_displayCharacter+0x2a4>
    2284:	9a 8b       	std	Y+18, r25	; 0x12
    2286:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2288:	8b 89       	ldd	r24, Y+19	; 0x13
    228a:	9c 89       	ldd	r25, Y+20	; 0x14
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	9c 8b       	std	Y+20, r25	; 0x14
    2290:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2292:	8b 89       	ldd	r24, Y+19	; 0x13
    2294:	9c 89       	ldd	r25, Y+20	; 0x14
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	69 f7       	brne	.-38     	; 0x2274 <LCD_displayCharacter+0x298>
    229a:	14 c0       	rjmp	.+40     	; 0x22c4 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229c:	6d 89       	ldd	r22, Y+21	; 0x15
    229e:	7e 89       	ldd	r23, Y+22	; 0x16
    22a0:	8f 89       	ldd	r24, Y+23	; 0x17
    22a2:	98 8d       	ldd	r25, Y+24	; 0x18
    22a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9c 8b       	std	Y+20, r25	; 0x14
    22ae:	8b 8b       	std	Y+19, r24	; 0x13
    22b0:	8b 89       	ldd	r24, Y+19	; 0x13
    22b2:	9c 89       	ldd	r25, Y+20	; 0x14
    22b4:	98 8b       	std	Y+16, r25	; 0x10
    22b6:	8f 87       	std	Y+15, r24	; 0x0f
    22b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ba:	98 89       	ldd	r25, Y+16	; 0x10
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_displayCharacter+0x2e0>
    22c0:	98 8b       	std	Y+16, r25	; 0x10
    22c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* Disable LCD */
	GPIO_writePin(LCD_ENABLE_PORT_ID , LCD_ENABLE_PIN_ID , LOGIC_LOW);
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	62 e0       	ldi	r22, 0x02	; 2
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_writePin>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	a0 e8       	ldi	r26, 0x80	; 128
    22d4:	bf e3       	ldi	r27, 0x3F	; 63
    22d6:	8b 87       	std	Y+11, r24	; 0x0b
    22d8:	9c 87       	std	Y+12, r25	; 0x0c
    22da:	ad 87       	std	Y+13, r26	; 0x0d
    22dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22de:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4a e7       	ldi	r20, 0x7A	; 122
    22ec:	53 e4       	ldi	r21, 0x43	; 67
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	8f 83       	std	Y+7, r24	; 0x07
    22f8:	98 87       	std	Y+8, r25	; 0x08
    22fa:	a9 87       	std	Y+9, r26	; 0x09
    22fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2300:	78 85       	ldd	r23, Y+8	; 0x08
    2302:	89 85       	ldd	r24, Y+9	; 0x09
    2304:	9a 85       	ldd	r25, Y+10	; 0x0a
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5f e3       	ldi	r21, 0x3F	; 63
    230e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2312:	88 23       	and	r24, r24
    2314:	2c f4       	brge	.+10     	; 0x2320 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	3f c0       	rjmp	.+126    	; 0x239e <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2320:	6f 81       	ldd	r22, Y+7	; 0x07
    2322:	78 85       	ldd	r23, Y+8	; 0x08
    2324:	89 85       	ldd	r24, Y+9	; 0x09
    2326:	9a 85       	ldd	r25, Y+10	; 0x0a
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	3f ef       	ldi	r19, 0xFF	; 255
    232c:	4f e7       	ldi	r20, 0x7F	; 127
    232e:	57 e4       	ldi	r21, 0x47	; 71
    2330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2334:	18 16       	cp	r1, r24
    2336:	4c f5       	brge	.+82     	; 0x238a <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2338:	6b 85       	ldd	r22, Y+11	; 0x0b
    233a:	7c 85       	ldd	r23, Y+12	; 0x0c
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e2       	ldi	r20, 0x20	; 32
    2346:	51 e4       	ldi	r21, 0x41	; 65
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <LCD_displayCharacter+0x3a4>
    2362:	89 e1       	ldi	r24, 0x19	; 25
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	8b 83       	std	Y+3, r24	; 0x03
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <LCD_displayCharacter+0x392>
    2372:	9c 83       	std	Y+4, r25	; 0x04
    2374:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	9e 81       	ldd	r25, Y+6	; 0x06
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	69 f7       	brne	.-38     	; 0x2362 <LCD_displayCharacter+0x386>
    2388:	14 c0       	rjmp	.+40     	; 0x23b2 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238a:	6f 81       	ldd	r22, Y+7	; 0x07
    238c:	78 85       	ldd	r23, Y+8	; 0x08
    238e:	89 85       	ldd	r24, Y+9	; 0x09
    2390:	9a 85       	ldd	r25, Y+10	; 0x0a
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	9a 83       	std	Y+2, r25	; 0x02
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <LCD_displayCharacter+0x3ce>
    23ae:	9a 83       	std	Y+2, r25	; 0x02
    23b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    23b2:	e9 96       	adiw	r28, 0x39	; 57
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <LCD_displayString>:
/*
 * Description:
 * this function takes the string and display it.
 */
void LCD_displayString (const char *string)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <LCD_displayString+0x6>
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	0a c0       	rjmp	.+20     	; 0x23e8 <LCD_displayString+0x24>
	while(*(string) != '\0')
	{
		/* display the characters of the string one by one */
		LCD_displayCharacter(*string) ;
    23d4:	e9 81       	ldd	r30, Y+1	; 0x01
    23d6:	fa 81       	ldd	r31, Y+2	; 0x02
    23d8:	80 81       	ld	r24, Z
    23da:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <LCD_displayCharacter>
		string++ ;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
 * Description:
 * this function takes the string and display it.
 */
void LCD_displayString (const char *string)
{
	while(*(string) != '\0')
    23e8:	e9 81       	ldd	r30, Y+1	; 0x01
    23ea:	fa 81       	ldd	r31, Y+2	; 0x02
    23ec:	80 81       	ld	r24, Z
    23ee:	88 23       	and	r24, r24
    23f0:	89 f7       	brne	.-30     	; 0x23d4 <LCD_displayString+0x10>
	{
		/* display the characters of the string one by one */
		LCD_displayCharacter(*string) ;
		string++ ;
	}
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <LCD_moveCursor>:
/*
 * Description:
 * 1. it takes the the row no. and the column no. then shift the cursor to this location.
 */
void LCD_moveCursor(uint8 row , uint8 col)
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	00 d0       	rcall	.+0      	; 0x2402 <LCD_moveCursor+0x6>
    2402:	00 d0       	rcall	.+0      	; 0x2404 <LCD_moveCursor+0x8>
    2404:	0f 92       	push	r0
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	8a 83       	std	Y+2, r24	; 0x02
    240c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_cursor_address = 0 ;
    240e:	19 82       	std	Y+1, r1	; 0x01
	switch(row)
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	3d 83       	std	Y+5, r19	; 0x05
    2418:	2c 83       	std	Y+4, r18	; 0x04
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	91 05       	cpc	r25, r1
    2422:	c1 f0       	breq	.+48     	; 0x2454 <LCD_moveCursor+0x58>
    2424:	2c 81       	ldd	r18, Y+4	; 0x04
    2426:	3d 81       	ldd	r19, Y+5	; 0x05
    2428:	22 30       	cpi	r18, 0x02	; 2
    242a:	31 05       	cpc	r19, r1
    242c:	2c f4       	brge	.+10     	; 0x2438 <LCD_moveCursor+0x3c>
    242e:	8c 81       	ldd	r24, Y+4	; 0x04
    2430:	9d 81       	ldd	r25, Y+5	; 0x05
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	61 f0       	breq	.+24     	; 0x244e <LCD_moveCursor+0x52>
    2436:	19 c0       	rjmp	.+50     	; 0x246a <LCD_moveCursor+0x6e>
    2438:	2c 81       	ldd	r18, Y+4	; 0x04
    243a:	3d 81       	ldd	r19, Y+5	; 0x05
    243c:	22 30       	cpi	r18, 0x02	; 2
    243e:	31 05       	cpc	r19, r1
    2440:	69 f0       	breq	.+26     	; 0x245c <LCD_moveCursor+0x60>
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	9d 81       	ldd	r25, Y+5	; 0x05
    2446:	83 30       	cpi	r24, 0x03	; 3
    2448:	91 05       	cpc	r25, r1
    244a:	61 f0       	breq	.+24     	; 0x2464 <LCD_moveCursor+0x68>
    244c:	0e c0       	rjmp	.+28     	; 0x246a <LCD_moveCursor+0x6e>
	{
	case 0:
		/* The address of the first location at the first row + the no. of the column */
		LCD_cursor_address = LCD_FIRST_ROW + col;
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	0b c0       	rjmp	.+22     	; 0x246a <LCD_moveCursor+0x6e>
		break;
	case 1:
		/* the address of the first location at the second row + the no. of the column */
		LCD_cursor_address = LCD_SECOND_ROW + col;
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	80 5c       	subi	r24, 0xC0	; 192
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	07 c0       	rjmp	.+14     	; 0x246a <LCD_moveCursor+0x6e>
		break;
	case 2:
		/* the address of the first location at the third row + the no. of the column */
		LCD_cursor_address = LCD_THIRD_ROW + col;
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	80 5f       	subi	r24, 0xF0	; 240
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	03 c0       	rjmp	.+6      	; 0x246a <LCD_moveCursor+0x6e>
		break;
	case 3:
		/* the address of the first location at the forth row + the no. of the column */
		LCD_cursor_address = LCD_FOURTH_ROW + col;
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	80 5b       	subi	r24, 0xB0	; 176
    2468:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/*LCD_SET_CURSOR_LOCATION = 0x80 The command of setting the cursor at the required location */
	LCD_sendCommand(LCD_SET_CURSOR_LOCATION | LCD_cursor_address);
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	80 68       	ori	r24, 0x80	; 128
    246e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <LCD_sendCommand>
}
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <LCD_displayStringRowColumn>:
 * Description:
 * this function takes row , column and the string as arguments then displays this string
 * at this specific row and column.
 */
void LCD_displayStringRowColumn (uint8 row , uint8 col , const char *strROWCOL)
{
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	00 d0       	rcall	.+0      	; 0x2488 <LCD_displayStringRowColumn+0x6>
    2488:	00 d0       	rcall	.+0      	; 0x248a <LCD_displayStringRowColumn+0x8>
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	6a 83       	std	Y+2, r22	; 0x02
    2492:	5c 83       	std	Y+4, r21	; 0x04
    2494:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col) ;/* it moves the cursor to this specific location */
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	6a 81       	ldd	r22, Y+2	; 0x02
    249a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <LCD_moveCursor>
	LCD_displayString(strROWCOL) ;/* it displays the string at the required location */
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
}
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <LCD_clearScreen>:
/*
 * Description:
 * this function clears the screen of the LCD.
 */
void LCD_clearScreen (void)
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0x01);
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <LCD_sendCommand>
}
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <LCD_intgerToString>:
 * this function displays the integer on the LCD after converting it to a string using the
 * built-in function:
 * itoa(integer_value , array_where_the_ascii_will_be_displayed , base_of_this_value).
 */
void LCD_intgerToString (int data)
{
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	62 97       	sbiw	r28, 0x12	; 18
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	9a 8b       	std	Y+18, r25	; 0x12
    24de:	89 8b       	std	Y+17, r24	; 0x11
	char int_to_ascii[16] ;/* this array for saving the converted data */
	itoa(data , int_to_ascii , 10);/* 10 is for decimal as the data is a decimal value */
    24e0:	89 89       	ldd	r24, Y+17	; 0x11
    24e2:	9a 89       	ldd	r25, Y+18	; 0x12
    24e4:	9e 01       	movw	r18, r28
    24e6:	2f 5f       	subi	r18, 0xFF	; 255
    24e8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ea:	b9 01       	movw	r22, r18
    24ec:	4a e0       	ldi	r20, 0x0A	; 10
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <itoa>
	LCD_displayString(int_to_ascii);
    24f4:	ce 01       	movw	r24, r28
    24f6:	01 96       	adiw	r24, 0x01	; 1
    24f8:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
}
    24fc:	62 96       	adiw	r28, 0x12	; 18
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <__vector_9>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

uint8 tick = 0;

ISR (TIMER0_OVF_vect)
{
    250e:	1f 92       	push	r1
    2510:	0f 92       	push	r0
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	0f 92       	push	r0
    2516:	11 24       	eor	r1, r1
    2518:	2f 93       	push	r18
    251a:	3f 93       	push	r19
    251c:	4f 93       	push	r20
    251e:	5f 93       	push	r21
    2520:	6f 93       	push	r22
    2522:	7f 93       	push	r23
    2524:	8f 93       	push	r24
    2526:	9f 93       	push	r25
    2528:	af 93       	push	r26
    252a:	bf 93       	push	r27
    252c:	ef 93       	push	r30
    252e:	ff 93       	push	r31
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
	tick++;
    2538:	80 91 98 01 	lds	r24, 0x0198
    253c:	8f 5f       	subi	r24, 0xFF	; 255
    253e:	80 93 98 01 	sts	0x0198, r24
	if(g_callBackPtr != NULL_PTR)
    2542:	80 91 96 01 	lds	r24, 0x0196
    2546:	90 91 97 01 	lds	r25, 0x0197
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	29 f0       	breq	.+10     	; 0x2558 <__vector_9+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    254e:	e0 91 96 01 	lds	r30, 0x0196
    2552:	f0 91 97 01 	lds	r31, 0x0197
    2556:	09 95       	icall
		}
}
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	ff 91       	pop	r31
    255e:	ef 91       	pop	r30
    2560:	bf 91       	pop	r27
    2562:	af 91       	pop	r26
    2564:	9f 91       	pop	r25
    2566:	8f 91       	pop	r24
    2568:	7f 91       	pop	r23
    256a:	6f 91       	pop	r22
    256c:	5f 91       	pop	r21
    256e:	4f 91       	pop	r20
    2570:	3f 91       	pop	r19
    2572:	2f 91       	pop	r18
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	0f 90       	pop	r0
    257a:	1f 90       	pop	r1
    257c:	18 95       	reti

0000257e <__vector_19>:


ISR (TIMER0_COMP_vect)
{
    257e:	1f 92       	push	r1
    2580:	0f 92       	push	r0
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	0f 92       	push	r0
    2586:	11 24       	eor	r1, r1
    2588:	2f 93       	push	r18
    258a:	3f 93       	push	r19
    258c:	4f 93       	push	r20
    258e:	5f 93       	push	r21
    2590:	6f 93       	push	r22
    2592:	7f 93       	push	r23
    2594:	8f 93       	push	r24
    2596:	9f 93       	push	r25
    2598:	af 93       	push	r26
    259a:	bf 93       	push	r27
    259c:	ef 93       	push	r30
    259e:	ff 93       	push	r31
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
	tick++;
    25a8:	80 91 98 01 	lds	r24, 0x0198
    25ac:	8f 5f       	subi	r24, 0xFF	; 255
    25ae:	80 93 98 01 	sts	0x0198, r24
	if(g_callBackPtr != NULL_PTR)
    25b2:	80 91 96 01 	lds	r24, 0x0196
    25b6:	90 91 97 01 	lds	r25, 0x0197
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	29 f0       	breq	.+10     	; 0x25c8 <__vector_19+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    25be:	e0 91 96 01 	lds	r30, 0x0196
    25c2:	f0 91 97 01 	lds	r31, 0x0197
    25c6:	09 95       	icall
		}
}
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	ff 91       	pop	r31
    25ce:	ef 91       	pop	r30
    25d0:	bf 91       	pop	r27
    25d2:	af 91       	pop	r26
    25d4:	9f 91       	pop	r25
    25d6:	8f 91       	pop	r24
    25d8:	7f 91       	pop	r23
    25da:	6f 91       	pop	r22
    25dc:	5f 91       	pop	r21
    25de:	4f 91       	pop	r20
    25e0:	3f 91       	pop	r19
    25e2:	2f 91       	pop	r18
    25e4:	0f 90       	pop	r0
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	0f 90       	pop	r0
    25ea:	1f 90       	pop	r1
    25ec:	18 95       	reti

000025ee <__vector_8>:


ISR (TIMER1_OVF_vect)
{
    25ee:	1f 92       	push	r1
    25f0:	0f 92       	push	r0
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	0f 92       	push	r0
    25f6:	11 24       	eor	r1, r1
    25f8:	2f 93       	push	r18
    25fa:	3f 93       	push	r19
    25fc:	4f 93       	push	r20
    25fe:	5f 93       	push	r21
    2600:	6f 93       	push	r22
    2602:	7f 93       	push	r23
    2604:	8f 93       	push	r24
    2606:	9f 93       	push	r25
    2608:	af 93       	push	r26
    260a:	bf 93       	push	r27
    260c:	ef 93       	push	r30
    260e:	ff 93       	push	r31
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	tick++;
    2618:	80 91 98 01 	lds	r24, 0x0198
    261c:	8f 5f       	subi	r24, 0xFF	; 255
    261e:	80 93 98 01 	sts	0x0198, r24
	if(g_callBackPtr != NULL_PTR)
    2622:	80 91 96 01 	lds	r24, 0x0196
    2626:	90 91 97 01 	lds	r25, 0x0197
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	29 f0       	breq	.+10     	; 0x2638 <__vector_8+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    262e:	e0 91 96 01 	lds	r30, 0x0196
    2632:	f0 91 97 01 	lds	r31, 0x0197
    2636:	09 95       	icall
		}
}
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	ff 91       	pop	r31
    263e:	ef 91       	pop	r30
    2640:	bf 91       	pop	r27
    2642:	af 91       	pop	r26
    2644:	9f 91       	pop	r25
    2646:	8f 91       	pop	r24
    2648:	7f 91       	pop	r23
    264a:	6f 91       	pop	r22
    264c:	5f 91       	pop	r21
    264e:	4f 91       	pop	r20
    2650:	3f 91       	pop	r19
    2652:	2f 91       	pop	r18
    2654:	0f 90       	pop	r0
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	0f 90       	pop	r0
    265a:	1f 90       	pop	r1
    265c:	18 95       	reti

0000265e <__vector_6>:


ISR (TIMER1_COMPA_vect)
{
    265e:	1f 92       	push	r1
    2660:	0f 92       	push	r0
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	0f 92       	push	r0
    2666:	11 24       	eor	r1, r1
    2668:	2f 93       	push	r18
    266a:	3f 93       	push	r19
    266c:	4f 93       	push	r20
    266e:	5f 93       	push	r21
    2670:	6f 93       	push	r22
    2672:	7f 93       	push	r23
    2674:	8f 93       	push	r24
    2676:	9f 93       	push	r25
    2678:	af 93       	push	r26
    267a:	bf 93       	push	r27
    267c:	ef 93       	push	r30
    267e:	ff 93       	push	r31
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	tick++;
    2688:	80 91 98 01 	lds	r24, 0x0198
    268c:	8f 5f       	subi	r24, 0xFF	; 255
    268e:	80 93 98 01 	sts	0x0198, r24
	if(g_callBackPtr != NULL_PTR)
    2692:	80 91 96 01 	lds	r24, 0x0196
    2696:	90 91 97 01 	lds	r25, 0x0197
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	29 f0       	breq	.+10     	; 0x26a8 <__vector_6+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    269e:	e0 91 96 01 	lds	r30, 0x0196
    26a2:	f0 91 97 01 	lds	r31, 0x0197
    26a6:	09 95       	icall
		}
}
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	ff 91       	pop	r31
    26ae:	ef 91       	pop	r30
    26b0:	bf 91       	pop	r27
    26b2:	af 91       	pop	r26
    26b4:	9f 91       	pop	r25
    26b6:	8f 91       	pop	r24
    26b8:	7f 91       	pop	r23
    26ba:	6f 91       	pop	r22
    26bc:	5f 91       	pop	r21
    26be:	4f 91       	pop	r20
    26c0:	3f 91       	pop	r19
    26c2:	2f 91       	pop	r18
    26c4:	0f 90       	pop	r0
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	0f 90       	pop	r0
    26ca:	1f 90       	pop	r1
    26cc:	18 95       	reti

000026ce <__vector_7>:


ISR (TIMER1_COMPB_vect)
{
    26ce:	1f 92       	push	r1
    26d0:	0f 92       	push	r0
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	0f 92       	push	r0
    26d6:	11 24       	eor	r1, r1
    26d8:	2f 93       	push	r18
    26da:	3f 93       	push	r19
    26dc:	4f 93       	push	r20
    26de:	5f 93       	push	r21
    26e0:	6f 93       	push	r22
    26e2:	7f 93       	push	r23
    26e4:	8f 93       	push	r24
    26e6:	9f 93       	push	r25
    26e8:	af 93       	push	r26
    26ea:	bf 93       	push	r27
    26ec:	ef 93       	push	r30
    26ee:	ff 93       	push	r31
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
	tick++;
    26f8:	80 91 98 01 	lds	r24, 0x0198
    26fc:	8f 5f       	subi	r24, 0xFF	; 255
    26fe:	80 93 98 01 	sts	0x0198, r24
	if(g_callBackPtr != NULL_PTR)
    2702:	80 91 96 01 	lds	r24, 0x0196
    2706:	90 91 97 01 	lds	r25, 0x0197
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	29 f0       	breq	.+10     	; 0x2718 <__vector_7+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    270e:	e0 91 96 01 	lds	r30, 0x0196
    2712:	f0 91 97 01 	lds	r31, 0x0197
    2716:	09 95       	icall
		}
}
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	ff 91       	pop	r31
    271e:	ef 91       	pop	r30
    2720:	bf 91       	pop	r27
    2722:	af 91       	pop	r26
    2724:	9f 91       	pop	r25
    2726:	8f 91       	pop	r24
    2728:	7f 91       	pop	r23
    272a:	6f 91       	pop	r22
    272c:	5f 91       	pop	r21
    272e:	4f 91       	pop	r20
    2730:	3f 91       	pop	r19
    2732:	2f 91       	pop	r18
    2734:	0f 90       	pop	r0
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	0f 90       	pop	r0
    273a:	1f 90       	pop	r1
    273c:	18 95       	reti

0000273e <__vector_4>:


ISR (TIMER2_OVF_vect)
{
    273e:	1f 92       	push	r1
    2740:	0f 92       	push	r0
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	0f 92       	push	r0
    2746:	11 24       	eor	r1, r1
    2748:	2f 93       	push	r18
    274a:	3f 93       	push	r19
    274c:	4f 93       	push	r20
    274e:	5f 93       	push	r21
    2750:	6f 93       	push	r22
    2752:	7f 93       	push	r23
    2754:	8f 93       	push	r24
    2756:	9f 93       	push	r25
    2758:	af 93       	push	r26
    275a:	bf 93       	push	r27
    275c:	ef 93       	push	r30
    275e:	ff 93       	push	r31
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
	tick++;
    2768:	80 91 98 01 	lds	r24, 0x0198
    276c:	8f 5f       	subi	r24, 0xFF	; 255
    276e:	80 93 98 01 	sts	0x0198, r24
	if(g_callBackPtr != NULL_PTR)
    2772:	80 91 96 01 	lds	r24, 0x0196
    2776:	90 91 97 01 	lds	r25, 0x0197
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	29 f0       	breq	.+10     	; 0x2788 <__vector_4+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    277e:	e0 91 96 01 	lds	r30, 0x0196
    2782:	f0 91 97 01 	lds	r31, 0x0197
    2786:	09 95       	icall
		}
}
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	ff 91       	pop	r31
    278e:	ef 91       	pop	r30
    2790:	bf 91       	pop	r27
    2792:	af 91       	pop	r26
    2794:	9f 91       	pop	r25
    2796:	8f 91       	pop	r24
    2798:	7f 91       	pop	r23
    279a:	6f 91       	pop	r22
    279c:	5f 91       	pop	r21
    279e:	4f 91       	pop	r20
    27a0:	3f 91       	pop	r19
    27a2:	2f 91       	pop	r18
    27a4:	0f 90       	pop	r0
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	0f 90       	pop	r0
    27aa:	1f 90       	pop	r1
    27ac:	18 95       	reti

000027ae <__vector_3>:


ISR (TIMER2_COMP_vect)
{
    27ae:	1f 92       	push	r1
    27b0:	0f 92       	push	r0
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	0f 92       	push	r0
    27b6:	11 24       	eor	r1, r1
    27b8:	2f 93       	push	r18
    27ba:	3f 93       	push	r19
    27bc:	4f 93       	push	r20
    27be:	5f 93       	push	r21
    27c0:	6f 93       	push	r22
    27c2:	7f 93       	push	r23
    27c4:	8f 93       	push	r24
    27c6:	9f 93       	push	r25
    27c8:	af 93       	push	r26
    27ca:	bf 93       	push	r27
    27cc:	ef 93       	push	r30
    27ce:	ff 93       	push	r31
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
	tick++;
    27d8:	80 91 98 01 	lds	r24, 0x0198
    27dc:	8f 5f       	subi	r24, 0xFF	; 255
    27de:	80 93 98 01 	sts	0x0198, r24
	if(g_callBackPtr != NULL_PTR)
    27e2:	80 91 96 01 	lds	r24, 0x0196
    27e6:	90 91 97 01 	lds	r25, 0x0197
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	29 f0       	breq	.+10     	; 0x27f8 <__vector_3+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    27ee:	e0 91 96 01 	lds	r30, 0x0196
    27f2:	f0 91 97 01 	lds	r31, 0x0197
    27f6:	09 95       	icall
		}
}
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	ff 91       	pop	r31
    27fe:	ef 91       	pop	r30
    2800:	bf 91       	pop	r27
    2802:	af 91       	pop	r26
    2804:	9f 91       	pop	r25
    2806:	8f 91       	pop	r24
    2808:	7f 91       	pop	r23
    280a:	6f 91       	pop	r22
    280c:	5f 91       	pop	r21
    280e:	4f 91       	pop	r20
    2810:	3f 91       	pop	r19
    2812:	2f 91       	pop	r18
    2814:	0f 90       	pop	r0
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	0f 90       	pop	r0
    281a:	1f 90       	pop	r1
    281c:	18 95       	reti

0000281e <TIMER_init>:
 * input: pointer to structure of TIMER_configType type
 * return: void
 * Description: initializing the TIMER driver as desired in the passed structure
 */
void TIMER_init (const TIMER_configType* config_ptr )
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	00 d0       	rcall	.+0      	; 0x2824 <TIMER_init+0x6>
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
	 *******************************************************************************************************/

	/******************************
	  if timer0 is the chosen one
	 ******************************/
	if ((config_ptr-> TIMER_ID) == timer0)
    282c:	e9 81       	ldd	r30, Y+1	; 0x01
    282e:	fa 81       	ldd	r31, Y+2	; 0x02
    2830:	80 81       	ld	r24, Z
    2832:	88 23       	and	r24, r24
    2834:	a1 f5       	brne	.+104    	; 0x289e <TIMER_init+0x80>
	{
		/* initializing timer0 register TCNT0 */
		TCNT0 = config_ptr -> TCNT_INITIAL;
    2836:	a2 e5       	ldi	r26, 0x52	; 82
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	e9 81       	ldd	r30, Y+1	; 0x01
    283c:	fa 81       	ldd	r31, Y+2	; 0x02
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	8c 93       	st	X, r24

		/* configuring the chosen clock as the cs02:0 are the first 3 bits */
		TCCR0 = (config_ptr -> TIMER_CLOCK) | (1<<FOC0);
    2844:	a3 e5       	ldi	r26, 0x53	; 83
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e9 81       	ldd	r30, Y+1	; 0x01
    284a:	fa 81       	ldd	r31, Y+2	; 0x02
    284c:	87 81       	ldd	r24, Z+7	; 0x07
    284e:	80 68       	ori	r24, 0x80	; 128
    2850:	8c 93       	st	X, r24

		/* configuring the timer mode.                            *
		 * where in NORMAL mode: WGM01:0 are cleared both         *
		 * while in CTC mode: WGM01:0 = 2 & also OCR0 is assigned */
		if ((config_ptr -> TIMER_MODE) == TIMER0_CTC) /* (i.e. if the used mode is compare mode) */
    2852:	e9 81       	ldd	r30, Y+1	; 0x01
    2854:	fa 81       	ldd	r31, Y+2	; 0x02
    2856:	81 81       	ldd	r24, Z+1	; 0x01
    2858:	81 30       	cpi	r24, 0x01	; 1
    285a:	c1 f4       	brne	.+48     	; 0x288c <TIMER_init+0x6e>
		{
			/* assigning the value from the passed structure in the OCR0*/
			OCR0 = (config_ptr -> TIMER_CTC_REG);
    285c:	ac e5       	ldi	r26, 0x5C	; 92
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	e9 81       	ldd	r30, Y+1	; 0x01
    2862:	fa 81       	ldd	r31, Y+2	; 0x02
    2864:	84 81       	ldd	r24, Z+4	; 0x04
    2866:	95 81       	ldd	r25, Z+5	; 0x05
    2868:	8c 93       	st	X, r24

			/* (2)(decimal) = (10)(binary) (WGM01 WGM00) = (1 0) */
			TCCR0 |= (1<<WGM01);
    286a:	a3 e5       	ldi	r26, 0x53	; 83
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e3 e5       	ldi	r30, 0x53	; 83
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	88 60       	ori	r24, 0x08	; 8
    2876:	8c 93       	st	X, r24

			/* checking on the desired technique (i.e. polling or interrupt) but for the CTC mode */
			if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    2878:	e9 81       	ldd	r30, Y+1	; 0x01
    287a:	fa 81       	ldd	r31, Y+2	; 0x02
    287c:	86 81       	ldd	r24, Z+6	; 0x06
    287e:	81 30       	cpi	r24, 0x01	; 1
    2880:	71 f4       	brne	.+28     	; 0x289e <TIMER_init+0x80>
			{
				/* setting the OCIE0 bit (timer0 output compare match interrupt enable)  */
				TIMSK = (1 << OCIE0);
    2882:	e9 e5       	ldi	r30, 0x59	; 89
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	82 e0       	ldi	r24, 0x02	; 2
    2888:	80 83       	st	Z, r24
    288a:	09 c0       	rjmp	.+18     	; 0x289e <TIMER_init+0x80>
			}
		}
		else /* (i.e. if the used mode is NORMAL mode)*/
		{
			/* checking on the desired technique (i.e. polling or interrupt) but for the NORMAL mode */
			if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    288c:	e9 81       	ldd	r30, Y+1	; 0x01
    288e:	fa 81       	ldd	r31, Y+2	; 0x02
    2890:	86 81       	ldd	r24, Z+6	; 0x06
    2892:	81 30       	cpi	r24, 0x01	; 1
    2894:	21 f4       	brne	.+8      	; 0x289e <TIMER_init+0x80>
			{
				/* setting the TOIE0 bit (timer0 overflow interrupt enable) */
				TIMSK = (1 << TOIE0);
    2896:	e9 e5       	ldi	r30, 0x59	; 89
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	80 83       	st	Z, r24
	/*******************************************************************************************************/

	/*******************************
	   if timer1 is the chosen one
	 *******************************/
	if((config_ptr -> TIMER_ID) == timer1)
    289e:	e9 81       	ldd	r30, Y+1	; 0x01
    28a0:	fa 81       	ldd	r31, Y+2	; 0x02
    28a2:	80 81       	ld	r24, Z
    28a4:	81 30       	cpi	r24, 0x01	; 1
    28a6:	d9 f5       	brne	.+118    	; 0x291e <TIMER_init+0x100>
	{
		/* initializing timer1 register TCNT1 */
		TCNT1 = config_ptr -> TCNT_INITIAL;
    28a8:	ac e4       	ldi	r26, 0x4C	; 76
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	e9 81       	ldd	r30, Y+1	; 0x01
    28ae:	fa 81       	ldd	r31, Y+2	; 0x02
    28b0:	82 81       	ldd	r24, Z+2	; 0x02
    28b2:	93 81       	ldd	r25, Z+3	; 0x03
    28b4:	11 96       	adiw	r26, 0x01	; 1
    28b6:	9c 93       	st	X, r25
    28b8:	8e 93       	st	-X, r24

		/* configuring the chosen clock as the cs12:0 are the first 3 bits */
		TCCR1B = (config_ptr -> TIMER_CLOCK);
    28ba:	ae e4       	ldi	r26, 0x4E	; 78
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	e9 81       	ldd	r30, Y+1	; 0x01
    28c0:	fa 81       	ldd	r31, Y+2	; 0x02
    28c2:	87 81       	ldd	r24, Z+7	; 0x07
    28c4:	8c 93       	st	X, r24

		/* setting FOC1A & FOC1B as we aren't working through PWM mode */
		TCCR1A = 12;
    28c6:	ef e4       	ldi	r30, 0x4F	; 79
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	8c e0       	ldi	r24, 0x0C	; 12
    28cc:	80 83       	st	Z, r24

		/* configuring the timer mode.                             *
		 * where in NORMAL mode: WGM13:0 are all cleared           *
		 * while in CTC mode: WGM13:0 = 4 & also OCR1 is assigned  */
		if ((config_ptr -> TIMER_MODE) == TIMER1_CTC)
    28ce:	e9 81       	ldd	r30, Y+1	; 0x01
    28d0:	fa 81       	ldd	r31, Y+2	; 0x02
    28d2:	81 81       	ldd	r24, Z+1	; 0x01
    28d4:	82 30       	cpi	r24, 0x02	; 2
    28d6:	d1 f4       	brne	.+52     	; 0x290c <TIMER_init+0xee>
		{
			/* assigning the value from the passed structure in the OCR1A*/
			OCR1A = (config_ptr -> TIMER_CTC_REG);
    28d8:	aa e4       	ldi	r26, 0x4A	; 74
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e9 81       	ldd	r30, Y+1	; 0x01
    28de:	fa 81       	ldd	r31, Y+2	; 0x02
    28e0:	84 81       	ldd	r24, Z+4	; 0x04
    28e2:	95 81       	ldd	r25, Z+5	; 0x05
    28e4:	11 96       	adiw	r26, 0x01	; 1
    28e6:	9c 93       	st	X, r25
    28e8:	8e 93       	st	-X, r24

			/* 4 = 1 0 0  which means (WGM13 WGM12 WGM11 WGM10) = (0100)*/
			TCCR1B |= (1<<WGM12);
    28ea:	ae e4       	ldi	r26, 0x4E	; 78
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	ee e4       	ldi	r30, 0x4E	; 78
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	88 60       	ori	r24, 0x08	; 8
    28f6:	8c 93       	st	X, r24

			/* checking on the desired technique (i.e. polling or interrupt) but for the CTC mode */
			if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    28f8:	e9 81       	ldd	r30, Y+1	; 0x01
    28fa:	fa 81       	ldd	r31, Y+2	; 0x02
    28fc:	86 81       	ldd	r24, Z+6	; 0x06
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	71 f4       	brne	.+28     	; 0x291e <TIMER_init+0x100>
				{
					/* setting the OCIE1A bit (timer1 output compare A match interrupt enable)  */
					TIMSK = (1 << OCIE1A);
    2902:	e9 e5       	ldi	r30, 0x59	; 89
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 e1       	ldi	r24, 0x10	; 16
    2908:	80 83       	st	Z, r24
    290a:	09 c0       	rjmp	.+18     	; 0x291e <TIMER_init+0x100>
				}
			}
			else /* (i.e. if the used mode is NORMAL mode)*/
			{
				/* checking on the desired technique (i.e. polling or interrupt) but for the NORMAL mode */
				if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    290c:	e9 81       	ldd	r30, Y+1	; 0x01
    290e:	fa 81       	ldd	r31, Y+2	; 0x02
    2910:	86 81       	ldd	r24, Z+6	; 0x06
    2912:	81 30       	cpi	r24, 0x01	; 1
    2914:	21 f4       	brne	.+8      	; 0x291e <TIMER_init+0x100>
				{
					/* setting the TOIE1 bit (timer1 overflow interrupt enable) */
					TIMSK = (1 << TOIE1);
    2916:	e9 e5       	ldi	r30, 0x59	; 89
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	84 e0       	ldi	r24, 0x04	; 4
    291c:	80 83       	st	Z, r24
	/*******************************************************************************************************/

	/******************************
	  if timer2 is the chosen one
	 ******************************/
	if ((config_ptr-> TIMER_ID) == timer2)
    291e:	e9 81       	ldd	r30, Y+1	; 0x01
    2920:	fa 81       	ldd	r31, Y+2	; 0x02
    2922:	80 81       	ld	r24, Z
    2924:	82 30       	cpi	r24, 0x02	; 2
    2926:	a1 f5       	brne	.+104    	; 0x2990 <TIMER_init+0x172>
	{
		/* initializing timer2 register TCNT2 */
		TCNT2 = config_ptr -> TCNT_INITIAL;
    2928:	a4 e4       	ldi	r26, 0x44	; 68
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e9 81       	ldd	r30, Y+1	; 0x01
    292e:	fa 81       	ldd	r31, Y+2	; 0x02
    2930:	82 81       	ldd	r24, Z+2	; 0x02
    2932:	93 81       	ldd	r25, Z+3	; 0x03
    2934:	8c 93       	st	X, r24

		/* configuring the chosen clock as the cs22:0 are the first 3 bits */
		TCCR2 = (config_ptr -> TIMER_CLOCK) | (1<<FOC2);
    2936:	a5 e4       	ldi	r26, 0x45	; 69
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e9 81       	ldd	r30, Y+1	; 0x01
    293c:	fa 81       	ldd	r31, Y+2	; 0x02
    293e:	87 81       	ldd	r24, Z+7	; 0x07
    2940:	80 68       	ori	r24, 0x80	; 128
    2942:	8c 93       	st	X, r24

		/* configuring timer2 mode.                               *
		 * where in NORMAL mode: WGM21:0 are cleared both         *
		 * while in CTC mode: WGM21:0 = 2 & also OCR1 is assigned */
		if ((config_ptr -> TIMER_MODE) == TIMER2_CTC)
    2944:	e9 81       	ldd	r30, Y+1	; 0x01
    2946:	fa 81       	ldd	r31, Y+2	; 0x02
    2948:	81 81       	ldd	r24, Z+1	; 0x01
    294a:	83 30       	cpi	r24, 0x03	; 3
    294c:	c1 f4       	brne	.+48     	; 0x297e <TIMER_init+0x160>
		{
			/* assigning the value from the passed structure in the OCR2*/
			OCR2 = (config_ptr -> TIMER_CTC_REG);
    294e:	a3 e4       	ldi	r26, 0x43	; 67
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e9 81       	ldd	r30, Y+1	; 0x01
    2954:	fa 81       	ldd	r31, Y+2	; 0x02
    2956:	84 81       	ldd	r24, Z+4	; 0x04
    2958:	95 81       	ldd	r25, Z+5	; 0x05
    295a:	8c 93       	st	X, r24

			/* (2)(decimal) = (10)(binary) (WGM21 WGM20) = (1 0) */
			TCCR2 |= (1<<WGM21);
    295c:	a5 e4       	ldi	r26, 0x45	; 69
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e5 e4       	ldi	r30, 0x45	; 69
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	88 60       	ori	r24, 0x08	; 8
    2968:	8c 93       	st	X, r24

			/* checking on the desired technique (i.e. polling or interrupt) but for the CTC mode */
			if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    296a:	e9 81       	ldd	r30, Y+1	; 0x01
    296c:	fa 81       	ldd	r31, Y+2	; 0x02
    296e:	86 81       	ldd	r24, Z+6	; 0x06
    2970:	81 30       	cpi	r24, 0x01	; 1
    2972:	71 f4       	brne	.+28     	; 0x2990 <TIMER_init+0x172>
			{
				/* setting the OCIE2 bit (timer2 output compare match interrupt enable)  */
				TIMSK = (1 << OCIE2);
    2974:	e9 e5       	ldi	r30, 0x59	; 89
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 e8       	ldi	r24, 0x80	; 128
    297a:	80 83       	st	Z, r24
    297c:	09 c0       	rjmp	.+18     	; 0x2990 <TIMER_init+0x172>
			}
		}
		else /* (i.e. if the used mode is NORMAL mode)*/
		{
			/* checking on the desired technique (i.e. polling or interrupt) but for the NORMAL mode */
			if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    297e:	e9 81       	ldd	r30, Y+1	; 0x01
    2980:	fa 81       	ldd	r31, Y+2	; 0x02
    2982:	86 81       	ldd	r24, Z+6	; 0x06
    2984:	81 30       	cpi	r24, 0x01	; 1
    2986:	21 f4       	brne	.+8      	; 0x2990 <TIMER_init+0x172>
			{
				/* setting the TOIE2 bit (timer2 overflow interrupt enable) */
				TIMSK = (1 << TOIE2);
    2988:	e9 e5       	ldi	r30, 0x59	; 89
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 e4       	ldi	r24, 0x40	; 64
    298e:	80 83       	st	Z, r24
			}
		}
	}
}
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <TIMER_setCallBack>:


void TIMER_setCallBack (void*a_ptr(void))
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	00 d0       	rcall	.+0      	; 0x29a0 <TIMER_setCallBack+0x6>
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	9a 83       	std	Y+2, r25	; 0x02
    29a6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
    29ac:	90 93 97 01 	sts	0x0197, r25
    29b0:	80 93 96 01 	sts	0x0196, r24
}
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <TIMER_deInit>:

void TIMER_deInit (void)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    29c6:	e3 e5       	ldi	r30, 0x53	; 83
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	10 82       	st	Z, r1
	TCCR1A = 0;
    29cc:	ef e4       	ldi	r30, 0x4F	; 79
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	10 82       	st	Z, r1
	TCCR1B = 0;
    29d2:	ee e4       	ldi	r30, 0x4E	; 78
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	10 82       	st	Z, r1
	TCCR2 = 0;
    29d8:	e5 e4       	ldi	r30, 0x45	; 69
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	10 82       	st	Z, r1
	TCNT0 = 0;
    29de:	e2 e5       	ldi	r30, 0x52	; 82
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	10 82       	st	Z, r1
	TCNT1 = 0;
    29e4:	ec e4       	ldi	r30, 0x4C	; 76
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	11 82       	std	Z+1, r1	; 0x01
    29ea:	10 82       	st	Z, r1
	TCNT2 = 0;
    29ec:	e4 e4       	ldi	r30, 0x44	; 68
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	10 82       	st	Z, r1
	TIMSK = 0;
    29f2:	e9 e5       	ldi	r30, 0x59	; 89
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	10 82       	st	Z, r1
	OCR0 = 0;
    29f8:	ec e5       	ldi	r30, 0x5C	; 92
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	10 82       	st	Z, r1
	OCR1A = 0;
    29fe:	ea e4       	ldi	r30, 0x4A	; 74
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	11 82       	std	Z+1, r1	; 0x01
    2a04:	10 82       	st	Z, r1
	OCR1B = 0;
    2a06:	e8 e4       	ldi	r30, 0x48	; 72
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	11 82       	std	Z+1, r1	; 0x01
    2a0c:	10 82       	st	Z, r1
	OCR2 = 0;
    2a0e:	e3 e4       	ldi	r30, 0x43	; 67
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	10 82       	st	Z, r1
}
    2a14:	cf 91       	pop	r28
    2a16:	df 91       	pop	r29
    2a18:	08 95       	ret

00002a1a <UART_init>:
#include <avr/io.h>
#include "common_macros.h"


void UART_init (const uart_config* configuration)
{
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	00 d0       	rcall	.+0      	; 0x2a20 <UART_init+0x6>
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <UART_init+0x8>
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	9c 83       	std	Y+4, r25	; 0x04
    2a28:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRR_value = 0;
    2a2a:	1a 82       	std	Y+2, r1	; 0x02
    2a2c:	19 82       	std	Y+1, r1	; 0x01

	/* USCRA bits from bit 2 to bit 7 act as flag so we won't set them here as they   *
	 * are for checking.                                                              *
	 * U2X: is for enabling or disabling the double transmission speed mode           *
	 * MPCM: is set when the receiver is exposed to more than one transmitter         */
	UCSRA = (1<<U2X);
    2a2e:	eb e2       	ldi	r30, 0x2B	; 43
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	80 83       	st	Z, r24
	 *TXEN: Transmitter Enable                                                        *
	 *UCSZ2: Character Size                                                           *
	 *RXB8: Receive Data Bit 8                                                        *
	 *TXB8: Transmit Data Bit 8                                                       *
	 **********************************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | (((configuration -> CHARACTER_SIZE)>>2) << UCSZ2);
    2a36:	aa e2       	ldi	r26, 0x2A	; 42
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a3e:	80 81       	ld	r24, Z
    2a40:	86 95       	lsr	r24
    2a42:	86 95       	lsr	r24
    2a44:	88 2f       	mov	r24, r24
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	88 61       	ori	r24, 0x18	; 24
    2a52:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | ((((configuration -> CHARACTER_SIZE)&(0X2))>>1)<< UCSZ1) |\
    2a54:	a0 e4       	ldi	r26, 0x40	; 64
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	eb 81       	ldd	r30, Y+3	; 0x03
    2a5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a5c:	80 81       	ld	r24, Z
    2a5e:	88 2f       	mov	r24, r24
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	82 70       	andi	r24, 0x02	; 2
    2a64:	90 70       	andi	r25, 0x00	; 0
    2a66:	95 95       	asr	r25
    2a68:	87 95       	ror	r24
    2a6a:	88 0f       	add	r24, r24
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	88 0f       	add	r24, r24
    2a70:	99 1f       	adc	r25, r25
    2a72:	28 2f       	mov	r18, r24
    2a74:	20 68       	ori	r18, 0x80	; 128
    2a76:	eb 81       	ldd	r30, Y+3	; 0x03
    2a78:	fc 81       	ldd	r31, Y+4	; 0x04
    2a7a:	80 81       	ld	r24, Z
    2a7c:	88 2f       	mov	r24, r24
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	81 70       	andi	r24, 0x01	; 1
    2a82:	90 70       	andi	r25, 0x00	; 0
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	28 2b       	or	r18, r24
    2a8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a8e:	82 81       	ldd	r24, Z+2	; 0x02
    2a90:	88 2f       	mov	r24, r24
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	88 0f       	add	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	82 2b       	or	r24, r18
    2aa2:	8c 93       	st	X, r24
			(((configuration -> CHARACTER_SIZE)&(0X1))<< UCSZ0)|\
			((configuration ->STOP_BITS_NO) << USBS);

	/* Calculate the UBRR register value */
	UBRR_value = (uint16)(((F_CPU / ((configuration -> BIT_RATE) * 8UL))) - 1);
    2aa4:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa6:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa8:	83 81       	ldd	r24, Z+3	; 0x03
    2aaa:	94 81       	ldd	r25, Z+4	; 0x04
    2aac:	a5 81       	ldd	r26, Z+5	; 0x05
    2aae:	b6 81       	ldd	r27, Z+6	; 0x06
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	aa 1f       	adc	r26, r26
    2ab6:	bb 1f       	adc	r27, r27
    2ab8:	88 0f       	add	r24, r24
    2aba:	99 1f       	adc	r25, r25
    2abc:	aa 1f       	adc	r26, r26
    2abe:	bb 1f       	adc	r27, r27
    2ac0:	88 0f       	add	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	aa 1f       	adc	r26, r26
    2ac6:	bb 1f       	adc	r27, r27
    2ac8:	9c 01       	movw	r18, r24
    2aca:	ad 01       	movw	r20, r26
    2acc:	80 e4       	ldi	r24, 0x40	; 64
    2ace:	92 e4       	ldi	r25, 0x42	; 66
    2ad0:	af e0       	ldi	r26, 0x0F	; 15
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <__udivmodsi4>
    2adc:	da 01       	movw	r26, r20
    2ade:	c9 01       	movw	r24, r18
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = UBRR_value>>8;
    2ae6:	e0 e4       	ldi	r30, 0x40	; 64
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	9a 81       	ldd	r25, Y+2	; 0x02
    2aee:	89 2f       	mov	r24, r25
    2af0:	99 27       	eor	r25, r25
    2af2:	80 83       	st	Z, r24
	UBRRL = UBRR_value;
    2af4:	e9 e2       	ldi	r30, 0x29	; 41
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	80 83       	st	Z, r24
}
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	0f 92       	push	r0
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b16:	eb e2       	ldi	r30, 0x2B	; 43
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	80 72       	andi	r24, 0x20	; 32
    2b22:	90 70       	andi	r25, 0x00	; 0
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	b9 f3       	breq	.-18     	; 0x2b16 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b28:	ec e2       	ldi	r30, 0x2C	; 44
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	80 83       	st	Z, r24

}
    2b30:	0f 90       	pop	r0
    2b32:	cf 91       	pop	r28
    2b34:	df 91       	pop	r29
    2b36:	08 95       	ret

00002b38 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b40:	eb e2       	ldi	r30, 0x2B	; 43
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	88 23       	and	r24, r24
    2b48:	dc f7       	brge	.-10     	; 0x2b40 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2b4a:	ec e2       	ldi	r30, 0x2C	; 44
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
}
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <UART_sendString+0x6>
    2b5c:	0f 92       	push	r0
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	9b 83       	std	Y+3, r25	; 0x03
    2b64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b66:	19 82       	std	Y+1, r1	; 0x01
    2b68:	0e c0       	rjmp	.+28     	; 0x2b86 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	9b 81       	ldd	r25, Y+3	; 0x03
    2b74:	fc 01       	movw	r30, r24
    2b76:	e2 0f       	add	r30, r18
    2b78:	f3 1f       	adc	r31, r19
    2b7a:	80 81       	ld	r24, Z
    2b7c:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <UART_sendByte>
		i++;
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	8f 5f       	subi	r24, 0xFF	; 255
    2b84:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b90:	fc 01       	movw	r30, r24
    2b92:	e2 0f       	add	r30, r18
    2b94:	f3 1f       	adc	r31, r19
    2b96:	80 81       	ld	r24, Z
    2b98:	88 23       	and	r24, r24
    2b9a:	39 f7       	brne	.-50     	; 0x2b6a <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2ba8:	0f 93       	push	r16
    2baa:	1f 93       	push	r17
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <UART_receiveString+0xa>
    2bb2:	0f 92       	push	r0
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    2bb8:	9b 83       	std	Y+3, r25	; 0x03
    2bba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bbc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc8:	8c 01       	movw	r16, r24
    2bca:	02 0f       	add	r16, r18
    2bcc:	13 1f       	adc	r17, r19
    2bce:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <UART_receiveByte>
    2bd2:	f8 01       	movw	r30, r16
    2bd4:	80 83       	st	Z, r24
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	8f 5f       	subi	r24, 0xFF	; 255
    2bdc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	28 2f       	mov	r18, r24
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	9b 81       	ldd	r25, Y+3	; 0x03
    2be8:	8c 01       	movw	r16, r24
    2bea:	02 0f       	add	r16, r18
    2bec:	13 1f       	adc	r17, r19
    2bee:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <UART_receiveByte>
    2bf2:	f8 01       	movw	r30, r16
    2bf4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2c00:	fc 01       	movw	r30, r24
    2c02:	e2 0f       	add	r30, r18
    2c04:	f3 1f       	adc	r31, r19
    2c06:	80 81       	ld	r24, Z
    2c08:	83 32       	cpi	r24, 0x23	; 35
    2c0a:	31 f7       	brne	.-52     	; 0x2bd8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	9b 81       	ldd	r25, Y+3	; 0x03
    2c16:	fc 01       	movw	r30, r24
    2c18:	e2 0f       	add	r30, r18
    2c1a:	f3 1f       	adc	r31, r19
    2c1c:	10 82       	st	Z, r1
}
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	1f 91       	pop	r17
    2c2a:	0f 91       	pop	r16
    2c2c:	08 95       	ret

00002c2e <__udivmodsi4>:
    2c2e:	a1 e2       	ldi	r26, 0x21	; 33
    2c30:	1a 2e       	mov	r1, r26
    2c32:	aa 1b       	sub	r26, r26
    2c34:	bb 1b       	sub	r27, r27
    2c36:	fd 01       	movw	r30, r26
    2c38:	0d c0       	rjmp	.+26     	; 0x2c54 <__udivmodsi4_ep>

00002c3a <__udivmodsi4_loop>:
    2c3a:	aa 1f       	adc	r26, r26
    2c3c:	bb 1f       	adc	r27, r27
    2c3e:	ee 1f       	adc	r30, r30
    2c40:	ff 1f       	adc	r31, r31
    2c42:	a2 17       	cp	r26, r18
    2c44:	b3 07       	cpc	r27, r19
    2c46:	e4 07       	cpc	r30, r20
    2c48:	f5 07       	cpc	r31, r21
    2c4a:	20 f0       	brcs	.+8      	; 0x2c54 <__udivmodsi4_ep>
    2c4c:	a2 1b       	sub	r26, r18
    2c4e:	b3 0b       	sbc	r27, r19
    2c50:	e4 0b       	sbc	r30, r20
    2c52:	f5 0b       	sbc	r31, r21

00002c54 <__udivmodsi4_ep>:
    2c54:	66 1f       	adc	r22, r22
    2c56:	77 1f       	adc	r23, r23
    2c58:	88 1f       	adc	r24, r24
    2c5a:	99 1f       	adc	r25, r25
    2c5c:	1a 94       	dec	r1
    2c5e:	69 f7       	brne	.-38     	; 0x2c3a <__udivmodsi4_loop>
    2c60:	60 95       	com	r22
    2c62:	70 95       	com	r23
    2c64:	80 95       	com	r24
    2c66:	90 95       	com	r25
    2c68:	9b 01       	movw	r18, r22
    2c6a:	ac 01       	movw	r20, r24
    2c6c:	bd 01       	movw	r22, r26
    2c6e:	cf 01       	movw	r24, r30
    2c70:	08 95       	ret

00002c72 <__prologue_saves__>:
    2c72:	2f 92       	push	r2
    2c74:	3f 92       	push	r3
    2c76:	4f 92       	push	r4
    2c78:	5f 92       	push	r5
    2c7a:	6f 92       	push	r6
    2c7c:	7f 92       	push	r7
    2c7e:	8f 92       	push	r8
    2c80:	9f 92       	push	r9
    2c82:	af 92       	push	r10
    2c84:	bf 92       	push	r11
    2c86:	cf 92       	push	r12
    2c88:	df 92       	push	r13
    2c8a:	ef 92       	push	r14
    2c8c:	ff 92       	push	r15
    2c8e:	0f 93       	push	r16
    2c90:	1f 93       	push	r17
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	ca 1b       	sub	r28, r26
    2c9c:	db 0b       	sbc	r29, r27
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	09 94       	ijmp

00002caa <__epilogue_restores__>:
    2caa:	2a 88       	ldd	r2, Y+18	; 0x12
    2cac:	39 88       	ldd	r3, Y+17	; 0x11
    2cae:	48 88       	ldd	r4, Y+16	; 0x10
    2cb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cba:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cbc:	b9 84       	ldd	r11, Y+9	; 0x09
    2cbe:	c8 84       	ldd	r12, Y+8	; 0x08
    2cc0:	df 80       	ldd	r13, Y+7	; 0x07
    2cc2:	ee 80       	ldd	r14, Y+6	; 0x06
    2cc4:	fd 80       	ldd	r15, Y+5	; 0x05
    2cc6:	0c 81       	ldd	r16, Y+4	; 0x04
    2cc8:	1b 81       	ldd	r17, Y+3	; 0x03
    2cca:	aa 81       	ldd	r26, Y+2	; 0x02
    2ccc:	b9 81       	ldd	r27, Y+1	; 0x01
    2cce:	ce 0f       	add	r28, r30
    2cd0:	d1 1d       	adc	r29, r1
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	f8 94       	cli
    2cd6:	de bf       	out	0x3e, r29	; 62
    2cd8:	0f be       	out	0x3f, r0	; 63
    2cda:	cd bf       	out	0x3d, r28	; 61
    2cdc:	ed 01       	movw	r28, r26
    2cde:	08 95       	ret

00002ce0 <itoa>:
    2ce0:	fb 01       	movw	r30, r22
    2ce2:	9f 01       	movw	r18, r30
    2ce4:	e8 94       	clt
    2ce6:	42 30       	cpi	r20, 0x02	; 2
    2ce8:	c4 f0       	brlt	.+48     	; 0x2d1a <itoa+0x3a>
    2cea:	45 32       	cpi	r20, 0x25	; 37
    2cec:	b4 f4       	brge	.+44     	; 0x2d1a <itoa+0x3a>
    2cee:	4a 30       	cpi	r20, 0x0A	; 10
    2cf0:	29 f4       	brne	.+10     	; 0x2cfc <itoa+0x1c>
    2cf2:	97 fb       	bst	r25, 7
    2cf4:	1e f4       	brtc	.+6      	; 0x2cfc <itoa+0x1c>
    2cf6:	90 95       	com	r25
    2cf8:	81 95       	neg	r24
    2cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfc:	64 2f       	mov	r22, r20
    2cfe:	77 27       	eor	r23, r23
    2d00:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__udivmodhi4>
    2d04:	80 5d       	subi	r24, 0xD0	; 208
    2d06:	8a 33       	cpi	r24, 0x3A	; 58
    2d08:	0c f0       	brlt	.+2      	; 0x2d0c <itoa+0x2c>
    2d0a:	89 5d       	subi	r24, 0xD9	; 217
    2d0c:	81 93       	st	Z+, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	a1 f7       	brne	.-24     	; 0x2cfc <itoa+0x1c>
    2d14:	16 f4       	brtc	.+4      	; 0x2d1a <itoa+0x3a>
    2d16:	5d e2       	ldi	r21, 0x2D	; 45
    2d18:	51 93       	st	Z+, r21
    2d1a:	10 82       	st	Z, r1
    2d1c:	c9 01       	movw	r24, r18
    2d1e:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <strrev>

00002d22 <strrev>:
    2d22:	dc 01       	movw	r26, r24
    2d24:	fc 01       	movw	r30, r24
    2d26:	67 2f       	mov	r22, r23
    2d28:	71 91       	ld	r23, Z+
    2d2a:	77 23       	and	r23, r23
    2d2c:	e1 f7       	brne	.-8      	; 0x2d26 <strrev+0x4>
    2d2e:	32 97       	sbiw	r30, 0x02	; 2
    2d30:	04 c0       	rjmp	.+8      	; 0x2d3a <strrev+0x18>
    2d32:	7c 91       	ld	r23, X
    2d34:	6d 93       	st	X+, r22
    2d36:	70 83       	st	Z, r23
    2d38:	62 91       	ld	r22, -Z
    2d3a:	ae 17       	cp	r26, r30
    2d3c:	bf 07       	cpc	r27, r31
    2d3e:	c8 f3       	brcs	.-14     	; 0x2d32 <strrev+0x10>
    2d40:	08 95       	ret

00002d42 <__udivmodhi4>:
    2d42:	aa 1b       	sub	r26, r26
    2d44:	bb 1b       	sub	r27, r27
    2d46:	51 e1       	ldi	r21, 0x11	; 17
    2d48:	07 c0       	rjmp	.+14     	; 0x2d58 <__udivmodhi4_ep>

00002d4a <__udivmodhi4_loop>:
    2d4a:	aa 1f       	adc	r26, r26
    2d4c:	bb 1f       	adc	r27, r27
    2d4e:	a6 17       	cp	r26, r22
    2d50:	b7 07       	cpc	r27, r23
    2d52:	10 f0       	brcs	.+4      	; 0x2d58 <__udivmodhi4_ep>
    2d54:	a6 1b       	sub	r26, r22
    2d56:	b7 0b       	sbc	r27, r23

00002d58 <__udivmodhi4_ep>:
    2d58:	88 1f       	adc	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	5a 95       	dec	r21
    2d5e:	a9 f7       	brne	.-22     	; 0x2d4a <__udivmodhi4_loop>
    2d60:	80 95       	com	r24
    2d62:	90 95       	com	r25
    2d64:	bc 01       	movw	r22, r24
    2d66:	cd 01       	movw	r24, r26
    2d68:	08 95       	ret

00002d6a <_exit>:
    2d6a:	f8 94       	cli

00002d6c <__stop_program>:
    2d6c:	ff cf       	rjmp	.-2      	; 0x2d6c <__stop_program>
