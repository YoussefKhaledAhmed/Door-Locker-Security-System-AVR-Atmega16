
CONTROL-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000226a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000226a  000022fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800080  00800080  0000231e  2**0
                  ALLOC
  3 .stab         00002580  00000000  00000000  00002320  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013d2  00000000  00000000  000048a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009804  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009964  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_3>
      10:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_6>
      1c:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__vector_7>
      20:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__vector_8>
      24:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 33 11 	jmp	0x2266	; 0x2266 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "external_eeprom.h"
#include "avr/io.h"
#include <util/delay.h>

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <main+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <main+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
	uint8 password[5] = {};
     b54:	85 e0       	ldi	r24, 0x05	; 5
     b56:	fe 01       	movw	r30, r28
     b58:	31 96       	adiw	r30, 0x01	; 1
     b5a:	df 01       	movw	r26, r30
     b5c:	98 2f       	mov	r25, r24
     b5e:	1d 92       	st	X+, r1
     b60:	9a 95       	dec	r25
     b62:	e9 f7       	brne	.-6      	; 0xb5e <main+0x18>
	SREG |= (1<<7);
     b64:	af e5       	ldi	r26, 0x5F	; 95
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ef e5       	ldi	r30, 0x5F	; 95
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	80 68       	ori	r24, 0x80	; 128
     b70:	8c 93       	st	X, r24
	CONTROL_init();
     b72:	0e 94 c8 05 	call	0xb90	; 0xb90 <CONTROL_init>
	CONTROL_receiveThePassword(password);
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <CONTROL_receiveThePassword>
	CONTROL_savePassword(password);
     b7e:	ce 01       	movw	r24, r28
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	0e 94 2c 06 	call	0xc58	; 0xc58 <CONTROL_savePassword>
	while(1)
	{
	CONTROL_checkPassword(password);
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <CONTROL_checkPassword>
     b8e:	fb cf       	rjmp	.-10     	; 0xb86 <main+0x40>

00000b90 <CONTROL_init>:
 * input: void
 * return: void
 * Description: initializing the UART driver
 */
void CONTROL_init (void)
{
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	2c 97       	sbiw	r28, 0x0c	; 12
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
	uart_config configuration = {EIGHT_BITS , DISABLED , ONE_BIT , 9600};
     ba4:	ce 01       	movw	r24, r28
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	99 87       	std	Y+9, r25	; 0x09
     baa:	88 87       	std	Y+8, r24	; 0x08
     bac:	e8 e6       	ldi	r30, 0x68	; 104
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	fb 87       	std	Y+11, r31	; 0x0b
     bb2:	ea 87       	std	Y+10, r30	; 0x0a
     bb4:	f7 e0       	ldi	r31, 0x07	; 7
     bb6:	fc 87       	std	Y+12, r31	; 0x0c
     bb8:	ea 85       	ldd	r30, Y+10	; 0x0a
     bba:	fb 85       	ldd	r31, Y+11	; 0x0b
     bbc:	00 80       	ld	r0, Z
     bbe:	8a 85       	ldd	r24, Y+10	; 0x0a
     bc0:	9b 85       	ldd	r25, Y+11	; 0x0b
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	9b 87       	std	Y+11, r25	; 0x0b
     bc6:	8a 87       	std	Y+10, r24	; 0x0a
     bc8:	e8 85       	ldd	r30, Y+8	; 0x08
     bca:	f9 85       	ldd	r31, Y+9	; 0x09
     bcc:	00 82       	st	Z, r0
     bce:	88 85       	ldd	r24, Y+8	; 0x08
     bd0:	99 85       	ldd	r25, Y+9	; 0x09
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	99 87       	std	Y+9, r25	; 0x09
     bd6:	88 87       	std	Y+8, r24	; 0x08
     bd8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bda:	91 50       	subi	r25, 0x01	; 1
     bdc:	9c 87       	std	Y+12, r25	; 0x0c
     bde:	ec 85       	ldd	r30, Y+12	; 0x0c
     be0:	ee 23       	and	r30, r30
     be2:	51 f7       	brne	.-44     	; 0xbb8 <CONTROL_init+0x28>
	UART_init(&configuration);
     be4:	ce 01       	movw	r24, r28
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <UART_init>
}
     bec:	2c 96       	adiw	r28, 0x0c	; 12
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <CONTROL_receiveThePassword>:
 * input: password array pointer
 * return: void
 * Description: receiving the password from the HMI_ECU
 */
void CONTROL_receiveThePassword (uint8* const pass_ptr)
{
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	00 d0       	rcall	.+0      	; 0xc08 <CONTROL_receiveThePassword+0xa>
     c08:	0f 92       	push	r0
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	9b 83       	std	Y+3, r25	; 0x03
     c10:	8a 83       	std	Y+2, r24	; 0x02
	while (UART_receiveByte() != ready){}
     c12:	0e 94 38 10 	call	0x2070	; 0x2070 <UART_receiveByte>
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	e1 f7       	brne	.-8      	; 0xc12 <CONTROL_receiveThePassword+0x14>
	UART_sendByte(ready);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	0e 94 21 10 	call	0x2042	; 0x2042 <UART_sendByte>
	for(uint8 i = 0 ; i < 5 ; i++)
     c20:	19 82       	std	Y+1, r1	; 0x01
     c22:	0f c0       	rjmp	.+30     	; 0xc42 <CONTROL_receiveThePassword+0x44>
	{
		pass_ptr[i] = UART_receiveByte();
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	9b 81       	ldd	r25, Y+3	; 0x03
     c2e:	8c 01       	movw	r16, r24
     c30:	02 0f       	add	r16, r18
     c32:	13 1f       	adc	r17, r19
     c34:	0e 94 38 10 	call	0x2070	; 0x2070 <UART_receiveByte>
     c38:	f8 01       	movw	r30, r16
     c3a:	80 83       	st	Z, r24
 */
void CONTROL_receiveThePassword (uint8* const pass_ptr)
{
	while (UART_receiveByte() != ready){}
	UART_sendByte(ready);
	for(uint8 i = 0 ; i < 5 ; i++)
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	85 30       	cpi	r24, 0x05	; 5
     c46:	70 f3       	brcs	.-36     	; 0xc24 <CONTROL_receiveThePassword+0x26>
	{
		pass_ptr[i] = UART_receiveByte();
	}
}
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	08 95       	ret

00000c58 <CONTROL_savePassword>:
 * input: password array pointer
 * return: void
 * Description: saving the password at the EEPROM
 */
void CONTROL_savePassword (const uint8* const pass_ptr)
{
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	65 97       	sbiw	r28, 0x15	; 21
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	9d 8b       	std	Y+21, r25	; 0x15
     c6e:	8c 8b       	std	Y+20, r24	; 0x14
	I2C_config configuration = {400000 , 0x02};
     c70:	80 e8       	ldi	r24, 0x80	; 128
     c72:	9a e1       	ldi	r25, 0x1A	; 26
     c74:	99 8b       	std	Y+17, r25	; 0x11
     c76:	88 8b       	std	Y+16, r24	; 0x10
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	9b 8b       	std	Y+19, r25	; 0x13
     c7e:	8a 8b       	std	Y+18, r24	; 0x12

	/* Initialize the TWI/I2C Driver */
	TWI_init(&configuration);
     c80:	ce 01       	movw	r24, r28
     c82:	40 96       	adiw	r24, 0x10	; 16
     c84:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <TWI_init>

	for (uint8 i = 0 ; i < 5 ; i++)
     c88:	1f 86       	std	Y+15, r1	; 0x0f
     c8a:	88 c0       	rjmp	.+272    	; 0xd9c <CONTROL_savePassword+0x144>
	{
		EEPROM_writeByte(0x0311+i, pass_ptr[i]);
     c8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	8f 5e       	subi	r24, 0xEF	; 239
     c94:	9c 4f       	sbci	r25, 0xFC	; 252
     c96:	ac 01       	movw	r20, r24
     c98:	8f 85       	ldd	r24, Y+15	; 0x0f
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	8c 89       	ldd	r24, Y+20	; 0x14
     ca0:	9d 89       	ldd	r25, Y+21	; 0x15
     ca2:	fc 01       	movw	r30, r24
     ca4:	e2 0f       	add	r30, r18
     ca6:	f3 1f       	adc	r31, r19
     ca8:	20 81       	ld	r18, Z
     caa:	ca 01       	movw	r24, r20
     cac:	62 2f       	mov	r22, r18
     cae:	0e 94 7e 08 	call	0x10fc	; 0x10fc <EEPROM_writeByte>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	a0 e2       	ldi	r26, 0x20	; 32
     cb8:	b1 e4       	ldi	r27, 0x41	; 65
     cba:	8b 87       	std	Y+11, r24	; 0x0b
     cbc:	9c 87       	std	Y+12, r25	; 0x0c
     cbe:	ad 87       	std	Y+13, r26	; 0x0d
     cc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	4a e7       	ldi	r20, 0x7A	; 122
     cd0:	53 e4       	ldi	r21, 0x43	; 67
     cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	8f 83       	std	Y+7, r24	; 0x07
     cdc:	98 87       	std	Y+8, r25	; 0x08
     cde:	a9 87       	std	Y+9, r26	; 0x09
     ce0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ce2:	6f 81       	ldd	r22, Y+7	; 0x07
     ce4:	78 85       	ldd	r23, Y+8	; 0x08
     ce6:	89 85       	ldd	r24, Y+9	; 0x09
     ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e8       	ldi	r20, 0x80	; 128
     cf0:	5f e3       	ldi	r21, 0x3F	; 63
     cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf6:	88 23       	and	r24, r24
     cf8:	2c f4       	brge	.+10     	; 0xd04 <CONTROL_savePassword+0xac>
		__ticks = 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	9e 83       	std	Y+6, r25	; 0x06
     d00:	8d 83       	std	Y+5, r24	; 0x05
     d02:	3f c0       	rjmp	.+126    	; 0xd82 <CONTROL_savePassword+0x12a>
	else if (__tmp > 65535)
     d04:	6f 81       	ldd	r22, Y+7	; 0x07
     d06:	78 85       	ldd	r23, Y+8	; 0x08
     d08:	89 85       	ldd	r24, Y+9	; 0x09
     d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	3f ef       	ldi	r19, 0xFF	; 255
     d10:	4f e7       	ldi	r20, 0x7F	; 127
     d12:	57 e4       	ldi	r21, 0x47	; 71
     d14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d18:	18 16       	cp	r1, r24
     d1a:	4c f5       	brge	.+82     	; 0xd6e <CONTROL_savePassword+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d20:	8d 85       	ldd	r24, Y+13	; 0x0d
     d22:	9e 85       	ldd	r25, Y+14	; 0x0e
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e2       	ldi	r20, 0x20	; 32
     d2a:	51 e4       	ldi	r21, 0x41	; 65
     d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	bc 01       	movw	r22, r24
     d36:	cd 01       	movw	r24, r26
     d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	9e 83       	std	Y+6, r25	; 0x06
     d42:	8d 83       	std	Y+5, r24	; 0x05
     d44:	0f c0       	rjmp	.+30     	; 0xd64 <CONTROL_savePassword+0x10c>
     d46:	89 e1       	ldi	r24, 0x19	; 25
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	9c 83       	std	Y+4, r25	; 0x04
     d4c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	f1 f7       	brne	.-4      	; 0xd52 <CONTROL_savePassword+0xfa>
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	9e 81       	ldd	r25, Y+6	; 0x06
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	9e 83       	std	Y+6, r25	; 0x06
     d62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d64:	8d 81       	ldd	r24, Y+5	; 0x05
     d66:	9e 81       	ldd	r25, Y+6	; 0x06
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	69 f7       	brne	.-38     	; 0xd46 <CONTROL_savePassword+0xee>
     d6c:	14 c0       	rjmp	.+40     	; 0xd96 <CONTROL_savePassword+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6e:	6f 81       	ldd	r22, Y+7	; 0x07
     d70:	78 85       	ldd	r23, Y+8	; 0x08
     d72:	89 85       	ldd	r24, Y+9	; 0x09
     d74:	9a 85       	ldd	r25, Y+10	; 0x0a
     d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	9e 83       	std	Y+6, r25	; 0x06
     d80:	8d 83       	std	Y+5, r24	; 0x05
     d82:	8d 81       	ldd	r24, Y+5	; 0x05
     d84:	9e 81       	ldd	r25, Y+6	; 0x06
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <CONTROL_savePassword+0x136>
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
	I2C_config configuration = {400000 , 0x02};

	/* Initialize the TWI/I2C Driver */
	TWI_init(&configuration);

	for (uint8 i = 0 ; i < 5 ; i++)
     d96:	8f 85       	ldd	r24, Y+15	; 0x0f
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
     d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d9e:	85 30       	cpi	r24, 0x05	; 5
     da0:	08 f4       	brcc	.+2      	; 0xda4 <CONTROL_savePassword+0x14c>
     da2:	74 cf       	rjmp	.-280    	; 0xc8c <CONTROL_savePassword+0x34>
	{
		EEPROM_writeByte(0x0311+i, pass_ptr[i]);
		_delay_ms(10);
	}
}
     da4:	65 96       	adiw	r28, 0x15	; 21
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <CONTROL_checkPassword>:
 * 3 times it will operate the buzzer if not it will receive the main_menu_choice from the HMI_ECU
 * if '+' then it will turn on the motor for 15 seconds then stop it for 3 seconds then turn it on
 * in the other direction for 15 seconds.
 */
void CONTROL_checkPassword (uint8* const pass_ptr)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	a6 97       	sbiw	r28, 0x26	; 38
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	9c 8f       	std	Y+28, r25	; 0x1c
     dcc:	8b 8f       	std	Y+27, r24	; 0x1b
	uint8 check_password[5]={} , check=0 , count = 0 , choice;
     dce:	85 e0       	ldi	r24, 0x05	; 5
     dd0:	fe 01       	movw	r30, r28
     dd2:	36 96       	adiw	r30, 0x06	; 6
     dd4:	df 01       	movw	r26, r30
     dd6:	98 2f       	mov	r25, r24
     dd8:	1d 92       	st	X+, r1
     dda:	9a 95       	dec	r25
     ddc:	e9 f7       	brne	.-6      	; 0xdd8 <CONTROL_checkPassword+0x22>
     dde:	1d 82       	std	Y+5, r1	; 0x05
     de0:	1c 82       	std	Y+4, r1	; 0x04
	for(uint8 j = 0 ; j < 5 ; j++)
     de2:	1a 82       	std	Y+2, r1	; 0x02
     de4:	15 c0       	rjmp	.+42     	; 0xe10 <CONTROL_checkPassword+0x5a>
	{
		EEPROM_readByte(0x0311+j , check_password+j);
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	8f 5e       	subi	r24, 0xEF	; 239
     dee:	9c 4f       	sbci	r25, 0xFC	; 252
     df0:	ac 01       	movw	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9e 01       	movw	r18, r28
     dfa:	2a 5f       	subi	r18, 0xFA	; 250
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	28 0f       	add	r18, r24
     e00:	39 1f       	adc	r19, r25
     e02:	ca 01       	movw	r24, r20
     e04:	b9 01       	movw	r22, r18
     e06:	0e 94 bf 08 	call	0x117e	; 0x117e <EEPROM_readByte>
 * in the other direction for 15 seconds.
 */
void CONTROL_checkPassword (uint8* const pass_ptr)
{
	uint8 check_password[5]={} , check=0 , count = 0 , choice;
	for(uint8 j = 0 ; j < 5 ; j++)
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	85 30       	cpi	r24, 0x05	; 5
     e14:	40 f3       	brcs	.-48     	; 0xde6 <CONTROL_checkPassword+0x30>
	{
		EEPROM_readByte(0x0311+j , check_password+j);
	}
	do{

	CONTROL_receiveThePassword(pass_ptr);
     e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e1a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <CONTROL_receiveThePassword>
	for(uint8 j = 0 ; j<5 ; j++)
     e1e:	19 82       	std	Y+1, r1	; 0x01
     e20:	1e c0       	rjmp	.+60     	; 0xe5e <CONTROL_checkPassword+0xa8>
	{
		if(pass_ptr[j] != check_password[j])
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e2c:	fc 01       	movw	r30, r24
     e2e:	e2 0f       	add	r30, r18
     e30:	f3 1f       	adc	r31, r19
     e32:	40 81       	ld	r20, Z
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	ce 01       	movw	r24, r28
     e3c:	06 96       	adiw	r24, 0x06	; 6
     e3e:	fc 01       	movw	r30, r24
     e40:	e2 0f       	add	r30, r18
     e42:	f3 1f       	adc	r31, r19
     e44:	80 81       	ld	r24, Z
     e46:	48 17       	cp	r20, r24
     e48:	31 f0       	breq	.+12     	; 0xe56 <CONTROL_checkPassword+0xa0>
		{
			check = 1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	8d 83       	std	Y+5, r24	; 0x05
			count++;
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	8c 83       	std	Y+4, r24	; 0x04
     e54:	07 c0       	rjmp	.+14     	; 0xe64 <CONTROL_checkPassword+0xae>
			break;
		}
		else
		{
			check = 0;
     e56:	1d 82       	std	Y+5, r1	; 0x05
		EEPROM_readByte(0x0311+j , check_password+j);
	}
	do{

	CONTROL_receiveThePassword(pass_ptr);
	for(uint8 j = 0 ; j<5 ; j++)
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	89 83       	std	Y+1, r24	; 0x01
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	85 30       	cpi	r24, 0x05	; 5
     e62:	f8 f2       	brcs	.-66     	; 0xe22 <CONTROL_checkPassword+0x6c>
		else
		{
			check = 0;
		}
	}
	UART_sendByte(ready);
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	0e 94 21 10 	call	0x2042	; 0x2042 <UART_sendByte>
	(check == 1)?(UART_sendByte(wrong)):(UART_sendByte(right));
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	21 f4       	brne	.+8      	; 0xe78 <CONTROL_checkPassword+0xc2>
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	0e 94 21 10 	call	0x2042	; 0x2042 <UART_sendByte>
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <CONTROL_checkPassword+0xc8>
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	0e 94 21 10 	call	0x2042	; 0x2042 <UART_sendByte>

	}while((check == 1) && (count<3));
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	19 f4       	brne	.+6      	; 0xe8a <CONTROL_checkPassword+0xd4>
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	30 f2       	brcs	.-116    	; 0xe16 <CONTROL_checkPassword+0x60>
	if((count == 3)&&(check==1))
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	b1 f5       	brne	.+108    	; 0xefc <CONTROL_checkPassword+0x146>
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	99 f5       	brne	.+102    	; 0xefc <CONTROL_checkPassword+0x146>
		{
			TIMER_configType error_configuration = {timer1, TIMER1_CTC , 0 , 65535 ,interrupt , FCPU_1024};
     e96:	de 01       	movw	r26, r28
     e98:	1b 96       	adiw	r26, 0x0b	; 11
     e9a:	be 8f       	std	Y+30, r27	; 0x1e
     e9c:	ad 8f       	std	Y+29, r26	; 0x1d
     e9e:	e7 e7       	ldi	r30, 0x77	; 119
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	f8 a3       	std	Y+32, r31	; 0x20
     ea4:	ef 8f       	std	Y+31, r30	; 0x1f
     ea6:	f8 e0       	ldi	r31, 0x08	; 8
     ea8:	f9 a3       	std	Y+33, r31	; 0x21
     eaa:	af 8d       	ldd	r26, Y+31	; 0x1f
     eac:	b8 a1       	ldd	r27, Y+32	; 0x20
     eae:	0c 90       	ld	r0, X
     eb0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     eb2:	f8 a1       	ldd	r31, Y+32	; 0x20
     eb4:	31 96       	adiw	r30, 0x01	; 1
     eb6:	f8 a3       	std	Y+32, r31	; 0x20
     eb8:	ef 8f       	std	Y+31, r30	; 0x1f
     eba:	ad 8d       	ldd	r26, Y+29	; 0x1d
     ebc:	be 8d       	ldd	r27, Y+30	; 0x1e
     ebe:	0c 92       	st	X, r0
     ec0:	ed 8d       	ldd	r30, Y+29	; 0x1d
     ec2:	fe 8d       	ldd	r31, Y+30	; 0x1e
     ec4:	31 96       	adiw	r30, 0x01	; 1
     ec6:	fe 8f       	std	Y+30, r31	; 0x1e
     ec8:	ed 8f       	std	Y+29, r30	; 0x1d
     eca:	f9 a1       	ldd	r31, Y+33	; 0x21
     ecc:	f1 50       	subi	r31, 0x01	; 1
     ece:	f9 a3       	std	Y+33, r31	; 0x21
     ed0:	89 a1       	ldd	r24, Y+33	; 0x21
     ed2:	88 23       	and	r24, r24
     ed4:	51 f7       	brne	.-44     	; 0xeaa <CONTROL_checkPassword+0xf4>
			TIMER_setCallBack(CONTROL_buzzer);
     ed6:	83 ee       	ldi	r24, 0xE3	; 227
     ed8:	97 e0       	ldi	r25, 0x07	; 7
     eda:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <TIMER_setCallBack>
			TIMER_init(&error_configuration);
     ede:	ce 01       	movw	r24, r28
     ee0:	0b 96       	adiw	r24, 0x0b	; 11
     ee2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <TIMER_init>
			BUZZER_init();
     ee6:	0e 94 05 08 	call	0x100a	; 0x100a <BUZZER_init>
			BUZZER_on();
     eea:	0e 94 16 08 	call	0x102c	; 0x102c <BUZZER_on>
			while(tick < 8){}
     eee:	80 91 82 00 	lds	r24, 0x0082
     ef2:	88 30       	cpi	r24, 0x08	; 8
     ef4:	e0 f3       	brcs	.-8      	; 0xeee <CONTROL_checkPassword+0x138>
			tick = 0 ;
     ef6:	10 92 82 00 	sts	0x0082, r1
     efa:	5c c0       	rjmp	.+184    	; 0xfb4 <CONTROL_checkPassword+0x1fe>
		}
		else
		{
			while(UART_receiveByte() != ready);
     efc:	0e 94 38 10 	call	0x2070	; 0x2070 <UART_receiveByte>
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	e1 f7       	brne	.-8      	; 0xefc <CONTROL_checkPassword+0x146>
			choice = UART_receiveByte();
     f04:	0e 94 38 10 	call	0x2070	; 0x2070 <UART_receiveByte>
     f08:	8b 83       	std	Y+3, r24	; 0x03
			TIMER_configType configuration = {timer1, TIMER1_CTC , 0 , 7813 ,interrupt , FCPU_1024};
     f0a:	de 01       	movw	r26, r28
     f0c:	53 96       	adiw	r26, 0x13	; 19
     f0e:	bb a3       	std	Y+35, r27	; 0x23
     f10:	aa a3       	std	Y+34, r26	; 0x22
     f12:	ef e6       	ldi	r30, 0x6F	; 111
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	fd a3       	std	Y+37, r31	; 0x25
     f18:	ec a3       	std	Y+36, r30	; 0x24
     f1a:	f8 e0       	ldi	r31, 0x08	; 8
     f1c:	fe a3       	std	Y+38, r31	; 0x26
     f1e:	ac a1       	ldd	r26, Y+36	; 0x24
     f20:	bd a1       	ldd	r27, Y+37	; 0x25
     f22:	0c 90       	ld	r0, X
     f24:	ec a1       	ldd	r30, Y+36	; 0x24
     f26:	fd a1       	ldd	r31, Y+37	; 0x25
     f28:	31 96       	adiw	r30, 0x01	; 1
     f2a:	fd a3       	std	Y+37, r31	; 0x25
     f2c:	ec a3       	std	Y+36, r30	; 0x24
     f2e:	aa a1       	ldd	r26, Y+34	; 0x22
     f30:	bb a1       	ldd	r27, Y+35	; 0x23
     f32:	0c 92       	st	X, r0
     f34:	ea a1       	ldd	r30, Y+34	; 0x22
     f36:	fb a1       	ldd	r31, Y+35	; 0x23
     f38:	31 96       	adiw	r30, 0x01	; 1
     f3a:	fb a3       	std	Y+35, r31	; 0x23
     f3c:	ea a3       	std	Y+34, r30	; 0x22
     f3e:	fe a1       	ldd	r31, Y+38	; 0x26
     f40:	f1 50       	subi	r31, 0x01	; 1
     f42:	fe a3       	std	Y+38, r31	; 0x26
     f44:	8e a1       	ldd	r24, Y+38	; 0x26
     f46:	88 23       	and	r24, r24
     f48:	51 f7       	brne	.-44     	; 0xf1e <CONTROL_checkPassword+0x168>
			if(choice == '+')
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	8b 32       	cpi	r24, 0x2B	; 43
     f4e:	39 f5       	brne	.+78     	; 0xf9e <CONTROL_checkPassword+0x1e8>
			{
				DCMotor_init();
     f50:	0e 94 2e 08 	call	0x105c	; 0x105c <DCMotor_init>
				TIMER_setCallBack(CONTROL_openingdoor);
     f54:	82 ef       	ldi	r24, 0xF2	; 242
     f56:	97 e0       	ldi	r25, 0x07	; 7
     f58:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <TIMER_setCallBack>
				TIMER_init(&configuration);
     f5c:	ce 01       	movw	r24, r28
     f5e:	43 96       	adiw	r24, 0x13	; 19
     f60:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <TIMER_init>

				DCMotor_rotate(CW, 100);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	64 e6       	ldi	r22, 0x64	; 100
     f68:	0e 94 49 08 	call	0x1092	; 0x1092 <DCMotor_rotate>
				while(tick<=15){}
     f6c:	80 91 82 00 	lds	r24, 0x0082
     f70:	80 31       	cpi	r24, 0x10	; 16
     f72:	e0 f3       	brcs	.-8      	; 0xf6c <CONTROL_checkPassword+0x1b6>

				DCMotor_rotate(STOP, 0);
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	0e 94 49 08 	call	0x1092	; 0x1092 <DCMotor_rotate>
				while(tick<=18){}
     f7c:	80 91 82 00 	lds	r24, 0x0082
     f80:	83 31       	cpi	r24, 0x13	; 19
     f82:	e0 f3       	brcs	.-8      	; 0xf7c <CONTROL_checkPassword+0x1c6>

				DCMotor_rotate(A_CW, 100);
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	64 e6       	ldi	r22, 0x64	; 100
     f88:	0e 94 49 08 	call	0x1092	; 0x1092 <DCMotor_rotate>
				while((tick<=33)&&(tick!=0)){}
     f8c:	80 91 82 00 	lds	r24, 0x0082
     f90:	82 32       	cpi	r24, 0x22	; 34
     f92:	80 f4       	brcc	.+32     	; 0xfb4 <CONTROL_checkPassword+0x1fe>
     f94:	80 91 82 00 	lds	r24, 0x0082
     f98:	88 23       	and	r24, r24
     f9a:	c1 f7       	brne	.-16     	; 0xf8c <CONTROL_checkPassword+0x1d6>
     f9c:	0b c0       	rjmp	.+22     	; 0xfb4 <CONTROL_checkPassword+0x1fe>
			}
			else if(choice == '-')
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	8d 32       	cpi	r24, 0x2D	; 45
     fa2:	41 f4       	brne	.+16     	; 0xfb4 <CONTROL_checkPassword+0x1fe>
			{
				CONTROL_receiveThePassword(pass_ptr);
     fa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <CONTROL_receiveThePassword>
				CONTROL_savePassword(pass_ptr);
     fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb0:	0e 94 2c 06 	call	0xc58	; 0xc58 <CONTROL_savePassword>
			}
		}
}
     fb4:	a6 96       	adiw	r28, 0x26	; 38
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <CONTROL_buzzer>:
 * Description: it is the function that is called back by the TIMER driver to check if the tick
 * reaches 8 which means that the 1 minute of turning on the BUZZER is up then it will
 * stop the timer from counting.
 */
void CONTROL_buzzer (void)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	if(tick==8)
     fce:	80 91 82 00 	lds	r24, 0x0082
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	21 f4       	brne	.+8      	; 0xfde <CONTROL_buzzer+0x18>
	{
		TIMER_deInit();
     fd6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <TIMER_deInit>
		BUZZER_off();
     fda:	0e 94 22 08 	call	0x1044	; 0x1044 <BUZZER_off>
	}
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <CONTROL_openingdoor>:
 * Description: it is the function that is called back by the TIMER driver to check if the tick
 * reaches 34 which means that the time of opening then closing the door is up then it will
 * stop the timer from counting.
 */
void CONTROL_openingdoor (void)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	if(tick>33)
     fec:	80 91 82 00 	lds	r24, 0x0082
     ff0:	82 32       	cpi	r24, 0x22	; 34
     ff2:	40 f0       	brcs	.+16     	; 0x1004 <CONTROL_openingdoor+0x20>
	{
		TIMER_deInit();
     ff4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <TIMER_deInit>
		DCMotor_rotate(STOP, 0);
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	0e 94 49 08 	call	0x1092	; 0x1092 <DCMotor_rotate>
		tick = 0;
    1000:	10 92 82 00 	sts	0x0082, r1
	}
}
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <BUZZER_init>:

#include "buzzer.h"
#include "gpio.h"

void BUZZER_init (void)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_CTRL_PORT, BUZZER_PIN, PIN_OUTPUT);
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	63 e0       	ldi	r22, 0x03	; 3
    1016:	41 e0       	ldi	r20, 0x01	; 1
    1018:	0e 94 1f 09 	call	0x123e	; 0x123e <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_CTRL_PORT, BUZZER_PIN, LOGIC_LOW);
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	63 e0       	ldi	r22, 0x03	; 3
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	0e 94 0a 0a 	call	0x1414	; 0x1414 <GPIO_writePin>
}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <BUZZER_on>:

void BUZZER_on (void)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_CTRL_PORT, BUZZER_PIN, LOGIC_HIGH);
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	63 e0       	ldi	r22, 0x03	; 3
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <GPIO_writePin>
}
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <BUZZER_off>:

void BUZZER_off (void)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_CTRL_PORT, BUZZER_PIN, LOGIC_LOW);
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	63 e0       	ldi	r22, 0x03	; 3
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	0e 94 0a 0a 	call	0x1414	; 0x1414 <GPIO_writePin>
}
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <DCMotor_init>:
 * Description:
 * this function is to set the two pins (pin0 , pin1) at portB where the motor is connected through the H-bridge
 * to turn on and control the direction of the motor
 */
void DCMotor_init(void)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	/* setting the direction of the two required pins as OUTPUT pins */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_OUTPUT);
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	66 e0       	ldi	r22, 0x06	; 6
    1068:	41 e0       	ldi	r20, 0x01	; 1
    106a:	0e 94 1f 09 	call	0x123e	; 0x123e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	67 e0       	ldi	r22, 0x07	; 7
    1072:	41 e0       	ldi	r20, 0x01	; 1
    1074:	0e 94 1f 09 	call	0x123e	; 0x123e <GPIO_setupPinDirection>

	/* writing zeros on the two pins to initially stop the motor */
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	0e 94 0a 0a 	call	0x1414	; 0x1414 <GPIO_writePin>
}
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <DCMotor_rotate>:
 * then, passing the required speed to the PWM function to generate the corresponding digital signal
 * through the pin " PB3" where the EN1 pin of the H-bridge is connected which therefore
 * control the speed of the motor.
 */
void DCMotor_rotate(DcMotor_State state,uint8 speed)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <DCMotor_rotate+0x6>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	6a 83       	std	Y+2, r22	; 0x02
	if (state == CW)/* checking if the required state is clock-wise */
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	59 f4       	brne	.+22     	; 0x10bc <DCMotor_rotate+0x2a>
	{
		/* setting pin0 and clearing pin1*/
		GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_HIGH);
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	66 e0       	ldi	r22, 0x06	; 6
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	0e 94 0a 0a 	call	0x1414	; 0x1414 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	67 e0       	ldi	r22, 0x07	; 7
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	0e 94 0a 0a 	call	0x1414	; 0x1414 <GPIO_writePin>
    10ba:	1b c0       	rjmp	.+54     	; 0x10f2 <DCMotor_rotate+0x60>
	}
	else if (state == A_CW)/* checking if the required state is Anti clock-wise */
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	59 f4       	brne	.+22     	; 0x10d8 <DCMotor_rotate+0x46>
	{
		/* clearing pin0 and setting pin1*/
		GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    10c2:	83 e0       	ldi	r24, 0x03	; 3
    10c4:	66 e0       	ldi	r22, 0x06	; 6
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	0e 94 0a 0a 	call	0x1414	; 0x1414 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_HIGH);
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	67 e0       	ldi	r22, 0x07	; 7
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	0e 94 0a 0a 	call	0x1414	; 0x1414 <GPIO_writePin>
    10d6:	0d c0       	rjmp	.+26     	; 0x10f2 <DCMotor_rotate+0x60>
	}
	else if(state == STOP)/* checking if the required state is STOP */
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	88 23       	and	r24, r24
    10dc:	51 f4       	brne	.+20     	; 0x10f2 <DCMotor_rotate+0x60>
	{
		/* clearing both pin0 & pin1 */
		GPIO_writePin(PORTD_ID, PIN6_ID, LOGIC_LOW);
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	66 e0       	ldi	r22, 0x06	; 6
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	67 e0       	ldi	r22, 0x07	; 7
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	0e 94 0a 0a 	call	0x1414	; 0x1414 <GPIO_writePin>
		 * GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_HIGH);    *
		 * GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_HIGH);    */
	}
	/* passing the speed to the PWM function to out the required analog signal through PB3 pin */
//	PWM_Timer0_Start(speed);
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <EEPROM_writeByte+0x6>
    1102:	00 d0       	rcall	.+0      	; 0x1104 <EEPROM_writeByte+0x8>
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    110e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1112:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_getStatus>
    1116:	88 30       	cpi	r24, 0x08	; 8
    1118:	11 f0       	breq	.+4      	; 0x111e <EEPROM_writeByte+0x22>
        return ERROR;
    111a:	1c 82       	std	Y+4, r1	; 0x04
    111c:	28 c0       	rjmp	.+80     	; 0x116e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	80 70       	andi	r24, 0x00	; 0
    1124:	97 70       	andi	r25, 0x07	; 7
    1126:	88 0f       	add	r24, r24
    1128:	89 2f       	mov	r24, r25
    112a:	88 1f       	adc	r24, r24
    112c:	99 0b       	sbc	r25, r25
    112e:	91 95       	neg	r25
    1130:	80 6a       	ori	r24, 0xA0	; 160
    1132:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1136:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_getStatus>
    113a:	88 31       	cpi	r24, 0x18	; 24
    113c:	11 f0       	breq	.+4      	; 0x1142 <EEPROM_writeByte+0x46>
        return ERROR; 
    113e:	1c 82       	std	Y+4, r1	; 0x04
    1140:	16 c0       	rjmp	.+44     	; 0x116e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1148:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_getStatus>
    114c:	88 32       	cpi	r24, 0x28	; 40
    114e:	11 f0       	breq	.+4      	; 0x1154 <EEPROM_writeByte+0x58>
        return ERROR;
    1150:	1c 82       	std	Y+4, r1	; 0x04
    1152:	0d c0       	rjmp	.+26     	; 0x116e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    115a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_getStatus>
    115e:	88 32       	cpi	r24, 0x28	; 40
    1160:	11 f0       	breq	.+4      	; 0x1166 <EEPROM_writeByte+0x6a>
        return ERROR;
    1162:	1c 82       	std	Y+4, r1	; 0x04
    1164:	04 c0       	rjmp	.+8      	; 0x116e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1166:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <TWI_stop>
	
    return SUCCESS;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	8c 83       	std	Y+4, r24	; 0x04
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <EEPROM_readByte+0x6>
    1184:	00 d0       	rcall	.+0      	; 0x1186 <EEPROM_readByte+0x8>
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	7c 83       	std	Y+4, r23	; 0x04
    1192:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1194:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1198:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_getStatus>
    119c:	88 30       	cpi	r24, 0x08	; 8
    119e:	11 f0       	breq	.+4      	; 0x11a4 <EEPROM_readByte+0x26>
        return ERROR;
    11a0:	1d 82       	std	Y+5, r1	; 0x05
    11a2:	44 c0       	rjmp	.+136    	; 0x122c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	80 70       	andi	r24, 0x00	; 0
    11aa:	97 70       	andi	r25, 0x07	; 7
    11ac:	88 0f       	add	r24, r24
    11ae:	89 2f       	mov	r24, r25
    11b0:	88 1f       	adc	r24, r24
    11b2:	99 0b       	sbc	r25, r25
    11b4:	91 95       	neg	r25
    11b6:	80 6a       	ori	r24, 0xA0	; 160
    11b8:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    11bc:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_getStatus>
    11c0:	88 31       	cpi	r24, 0x18	; 24
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <EEPROM_readByte+0x4a>
        return ERROR;
    11c4:	1d 82       	std	Y+5, r1	; 0x05
    11c6:	32 c0       	rjmp	.+100    	; 0x122c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11ce:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_getStatus>
    11d2:	88 32       	cpi	r24, 0x28	; 40
    11d4:	11 f0       	breq	.+4      	; 0x11da <EEPROM_readByte+0x5c>
        return ERROR;
    11d6:	1d 82       	std	Y+5, r1	; 0x05
    11d8:	29 c0       	rjmp	.+82     	; 0x122c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    11da:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    11de:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_getStatus>
    11e2:	80 31       	cpi	r24, 0x10	; 16
    11e4:	11 f0       	breq	.+4      	; 0x11ea <EEPROM_readByte+0x6c>
        return ERROR;
    11e6:	1d 82       	std	Y+5, r1	; 0x05
    11e8:	21 c0       	rjmp	.+66     	; 0x122c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	9a 81       	ldd	r25, Y+2	; 0x02
    11ee:	80 70       	andi	r24, 0x00	; 0
    11f0:	97 70       	andi	r25, 0x07	; 7
    11f2:	88 0f       	add	r24, r24
    11f4:	89 2f       	mov	r24, r25
    11f6:	88 1f       	adc	r24, r24
    11f8:	99 0b       	sbc	r25, r25
    11fa:	91 95       	neg	r25
    11fc:	81 6a       	ori	r24, 0xA1	; 161
    11fe:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1202:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_getStatus>
    1206:	80 34       	cpi	r24, 0x40	; 64
    1208:	11 f0       	breq	.+4      	; 0x120e <EEPROM_readByte+0x90>
        return ERROR;
    120a:	1d 82       	std	Y+5, r1	; 0x05
    120c:	0f c0       	rjmp	.+30     	; 0x122c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    120e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <TWI_readByteWithNACK>
    1212:	eb 81       	ldd	r30, Y+3	; 0x03
    1214:	fc 81       	ldd	r31, Y+4	; 0x04
    1216:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1218:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <TWI_getStatus>
    121c:	88 35       	cpi	r24, 0x58	; 88
    121e:	11 f0       	breq	.+4      	; 0x1224 <EEPROM_readByte+0xa6>
        return ERROR;
    1220:	1d 82       	std	Y+5, r1	; 0x05
    1222:	04 c0       	rjmp	.+8      	; 0x122c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1224:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <TWI_stop>

    return SUCCESS;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	8d 83       	std	Y+5, r24	; 0x05
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <GPIO_setupPinDirection>:
 * Description :
 * the following functions are to setup the direction of the pins.
 * if the port or pin numbers are entered wrong then the function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num , uint8 pin_num , GPIO_PinDirectionType direction  )
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <GPIO_setupPinDirection+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <GPIO_setupPinDirection+0x8>
    1246:	0f 92       	push	r0
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	6a 83       	std	Y+2, r22	; 0x02
    1250:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num > NUM_OF_PORTS ) || (pin_num > NUM_OF_PINS_PER_PORT))
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	85 30       	cpi	r24, 0x05	; 5
    1256:	08 f0       	brcs	.+2      	; 0x125a <GPIO_setupPinDirection+0x1c>
    1258:	d5 c0       	rjmp	.+426    	; 0x1404 <GPIO_setupPinDirection+0x1c6>
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	89 30       	cpi	r24, 0x09	; 9
    125e:	08 f0       	brcs	.+2      	; 0x1262 <GPIO_setupPinDirection+0x24>
    1260:	d1 c0       	rjmp	.+418    	; 0x1404 <GPIO_setupPinDirection+0x1c6>
		/*Do nothing*/
	}
	else
	{
		/*setup the chosen pin as required*/
		switch(port_num)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3d 83       	std	Y+5, r19	; 0x05
    126a:	2c 83       	std	Y+4, r18	; 0x04
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	9d 81       	ldd	r25, Y+5	; 0x05
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <GPIO_setupPinDirection+0x3a>
    1276:	43 c0       	rjmp	.+134    	; 0x12fe <GPIO_setupPinDirection+0xc0>
    1278:	2c 81       	ldd	r18, Y+4	; 0x04
    127a:	3d 81       	ldd	r19, Y+5	; 0x05
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	2c f4       	brge	.+10     	; 0x128c <GPIO_setupPinDirection+0x4e>
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	71 f0       	breq	.+28     	; 0x12a6 <GPIO_setupPinDirection+0x68>
    128a:	bc c0       	rjmp	.+376    	; 0x1404 <GPIO_setupPinDirection+0x1c6>
    128c:	2c 81       	ldd	r18, Y+4	; 0x04
    128e:	3d 81       	ldd	r19, Y+5	; 0x05
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	09 f4       	brne	.+2      	; 0x1298 <GPIO_setupPinDirection+0x5a>
    1296:	5f c0       	rjmp	.+190    	; 0x1356 <GPIO_setupPinDirection+0x118>
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	9d 81       	ldd	r25, Y+5	; 0x05
    129c:	83 30       	cpi	r24, 0x03	; 3
    129e:	91 05       	cpc	r25, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <GPIO_setupPinDirection+0x66>
    12a2:	85 c0       	rjmp	.+266    	; 0x13ae <GPIO_setupPinDirection+0x170>
    12a4:	af c0       	rjmp	.+350    	; 0x1404 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	a1 f4       	brne	.+40     	; 0x12d4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    12ac:	aa e3       	ldi	r26, 0x3A	; 58
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ea e3       	ldi	r30, 0x3A	; 58
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <GPIO_setupPinDirection+0x8c>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <GPIO_setupPinDirection+0x88>
    12ce:	84 2b       	or	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	98 c0       	rjmp	.+304    	; 0x1404 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    12d4:	aa e3       	ldi	r26, 0x3A	; 58
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ea e3       	ldi	r30, 0x3A	; 58
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <GPIO_setupPinDirection+0xb4>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <GPIO_setupPinDirection+0xb0>
    12f6:	80 95       	com	r24
    12f8:	84 23       	and	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	83 c0       	rjmp	.+262    	; 0x1404 <GPIO_setupPinDirection+0x1c6>
			}
			break ;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	a1 f4       	brne	.+40     	; 0x132c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1304:	a7 e3       	ldi	r26, 0x37	; 55
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e7 e3       	ldi	r30, 0x37	; 55
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <GPIO_setupPinDirection+0xe4>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <GPIO_setupPinDirection+0xe0>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	6c c0       	rjmp	.+216    	; 0x1404 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    132c:	a7 e3       	ldi	r26, 0x37	; 55
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e7 e3       	ldi	r30, 0x37	; 55
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <GPIO_setupPinDirection+0x10c>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <GPIO_setupPinDirection+0x108>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	57 c0       	rjmp	.+174    	; 0x1404 <GPIO_setupPinDirection+0x1c6>

			}
			break;
		case PORTC_ID:
			if(direction == PIN_INPUT)
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 23       	and	r24, r24
    135a:	a9 f4       	brne	.+42     	; 0x1386 <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,pin_num);
    135c:	a4 e3       	ldi	r26, 0x34	; 52
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e4 e3       	ldi	r30, 0x34	; 52
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <GPIO_setupPinDirection+0x13c>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <GPIO_setupPinDirection+0x138>
    137e:	80 95       	com	r24
    1380:	84 23       	and	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	3f c0       	rjmp	.+126    	; 0x1404 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
    1386:	a4 e3       	ldi	r26, 0x34	; 52
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e4 e3       	ldi	r30, 0x34	; 52
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <GPIO_setupPinDirection+0x166>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <GPIO_setupPinDirection+0x162>
    13a8:	84 2b       	or	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	2b c0       	rjmp	.+86     	; 0x1404 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	a1 f4       	brne	.+40     	; 0x13dc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    13b4:	a1 e3       	ldi	r26, 0x31	; 49
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e1 e3       	ldi	r30, 0x31	; 49
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <GPIO_setupPinDirection+0x194>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <GPIO_setupPinDirection+0x190>
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    13dc:	a1 e3       	ldi	r26, 0x31	; 49
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e1 e3       	ldi	r30, 0x31	; 49
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <GPIO_setupPinDirection+0x1bc>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <GPIO_setupPinDirection+0x1b8>
    13fe:	80 95       	com	r24
    1400:	84 23       	and	r24, r20
    1402:	8c 93       	st	X, r24
			}
		}
	}
}
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <GPIO_writePin>:
 * Write the value of logic high or logic low on the required pin.
 * If the input port number or pin number are not correct the request will not be handled
 * if the pin is input, the function will enable/disable the pull-up resistor as required
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <GPIO_writePin+0x6>
    141a:	00 d0       	rcall	.+0      	; 0x141c <GPIO_writePin+0x8>
    141c:	0f 92       	push	r0
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	6a 83       	std	Y+2, r22	; 0x02
    1426:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num > NUM_OF_PORTS) || (pin_num > NUM_OF_PINS_PER_PORT))
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	85 30       	cpi	r24, 0x05	; 5
    142c:	08 f0       	brcs	.+2      	; 0x1430 <GPIO_writePin+0x1c>
    142e:	d5 c0       	rjmp	.+426    	; 0x15da <GPIO_writePin+0x1c6>
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	89 30       	cpi	r24, 0x09	; 9
    1434:	08 f0       	brcs	.+2      	; 0x1438 <GPIO_writePin+0x24>
    1436:	d1 c0       	rjmp	.+418    	; 0x15da <GPIO_writePin+0x1c6>
		/*Do nothing*/
	}
	else
	{
		/*Write Logic one or Logic zero to the chosen pin*/
		switch(port_num)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	3d 83       	std	Y+5, r19	; 0x05
    1440:	2c 83       	std	Y+4, r18	; 0x04
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	91 05       	cpc	r25, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <GPIO_writePin+0x3a>
    144c:	43 c0       	rjmp	.+134    	; 0x14d4 <GPIO_writePin+0xc0>
    144e:	2c 81       	ldd	r18, Y+4	; 0x04
    1450:	3d 81       	ldd	r19, Y+5	; 0x05
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	2c f4       	brge	.+10     	; 0x1462 <GPIO_writePin+0x4e>
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	71 f0       	breq	.+28     	; 0x147c <GPIO_writePin+0x68>
    1460:	bc c0       	rjmp	.+376    	; 0x15da <GPIO_writePin+0x1c6>
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <GPIO_writePin+0x5a>
    146c:	5f c0       	rjmp	.+190    	; 0x152c <GPIO_writePin+0x118>
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <GPIO_writePin+0x66>
    1478:	85 c0       	rjmp	.+266    	; 0x1584 <GPIO_writePin+0x170>
    147a:	af c0       	rjmp	.+350    	; 0x15da <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	a1 f4       	brne	.+40     	; 0x14aa <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1482:	ab e3       	ldi	r26, 0x3B	; 59
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	eb e3       	ldi	r30, 0x3B	; 59
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <GPIO_writePin+0x8c>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <GPIO_writePin+0x88>
    14a4:	84 2b       	or	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	98 c0       	rjmp	.+304    	; 0x15da <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    14aa:	ab e3       	ldi	r26, 0x3B	; 59
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	eb e3       	ldi	r30, 0x3B	; 59
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_writePin+0xb4>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_writePin+0xb0>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	83 c0       	rjmp	.+262    	; 0x15da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW)
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	88 23       	and	r24, r24
    14d8:	a9 f4       	brne	.+42     	; 0x1504 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
    14da:	a8 e3       	ldi	r26, 0x38	; 56
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e8 e3       	ldi	r30, 0x38	; 56
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <GPIO_writePin+0xe4>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <GPIO_writePin+0xe0>
    14fc:	80 95       	com	r24
    14fe:	84 23       	and	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	6b c0       	rjmp	.+214    	; 0x15da <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
    1504:	a8 e3       	ldi	r26, 0x38	; 56
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 e3       	ldi	r30, 0x38	; 56
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_writePin+0x10e>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_writePin+0x10a>
    1526:	84 2b       	or	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	57 c0       	rjmp	.+174    	; 0x15da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	a1 f4       	brne	.+40     	; 0x155a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1532:	a5 e3       	ldi	r26, 0x35	; 53
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e5 e3       	ldi	r30, 0x35	; 53
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <GPIO_writePin+0x13c>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <GPIO_writePin+0x138>
    1554:	84 2b       	or	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	40 c0       	rjmp	.+128    	; 0x15da <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    155a:	a5 e3       	ldi	r26, 0x35	; 53
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e5 e3       	ldi	r30, 0x35	; 53
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <GPIO_writePin+0x164>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <GPIO_writePin+0x160>
    157c:	80 95       	com	r24
    157e:	84 23       	and	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	2b c0       	rjmp	.+86     	; 0x15da <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	a1 f4       	brne	.+40     	; 0x15b2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    158a:	a2 e3       	ldi	r26, 0x32	; 50
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e2 e3       	ldi	r30, 0x32	; 50
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <GPIO_writePin+0x194>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <GPIO_writePin+0x190>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	14 c0       	rjmp	.+40     	; 0x15da <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    15b2:	a2 e3       	ldi	r26, 0x32	; 50
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e2 e3       	ldi	r30, 0x32	; 50
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <GPIO_writePin+0x1bc>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <GPIO_writePin+0x1b8>
    15d4:	80 95       	com	r24
    15d6:	84 23       	and	r24, r20
    15d8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <GPIO_readPin>:
 * Description:
 * Read and return the value of the required pin, it should be LOGIC_HIGH or LOGIC_LOW
 * If the input port number or pin number are not correct, the function will return logic low
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <GPIO_readPin+0x6>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <GPIO_readPin+0x8>
    15f2:	0f 92       	push	r0
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	8a 83       	std	Y+2, r24	; 0x02
    15fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 readValue = 0 ;
    15fc:	19 82       	std	Y+1, r1	; 0x01
	if((port_num > NUM_OF_PORTS) || (pin_num > NUM_OF_PINS_PER_PORT))
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	85 30       	cpi	r24, 0x05	; 5
    1602:	18 f4       	brcc	.+6      	; 0x160a <GPIO_readPin+0x20>
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	89 30       	cpi	r24, 0x09	; 9
    1608:	10 f0       	brcs	.+4      	; 0x160e <GPIO_readPin+0x24>
	{
		readValue = 0 ;
    160a:	19 82       	std	Y+1, r1	; 0x01
    160c:	99 c0       	rjmp	.+306    	; 0x1740 <GPIO_readPin+0x156>
	else
	{
		/*
		 * read the value of the chosen pin
		 */
		switch(port_num)
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3d 83       	std	Y+5, r19	; 0x05
    1616:	2c 83       	std	Y+4, r18	; 0x04
    1618:	4c 81       	ldd	r20, Y+4	; 0x04
    161a:	5d 81       	ldd	r21, Y+5	; 0x05
    161c:	41 30       	cpi	r20, 0x01	; 1
    161e:	51 05       	cpc	r21, r1
    1620:	b1 f1       	breq	.+108    	; 0x168e <GPIO_readPin+0xa4>
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	9d 81       	ldd	r25, Y+5	; 0x05
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	91 05       	cpc	r25, r1
    162a:	34 f4       	brge	.+12     	; 0x1638 <GPIO_readPin+0x4e>
    162c:	2c 81       	ldd	r18, Y+4	; 0x04
    162e:	3d 81       	ldd	r19, Y+5	; 0x05
    1630:	21 15       	cp	r18, r1
    1632:	31 05       	cpc	r19, r1
    1634:	71 f0       	breq	.+28     	; 0x1652 <GPIO_readPin+0x68>
    1636:	84 c0       	rjmp	.+264    	; 0x1740 <GPIO_readPin+0x156>
    1638:	4c 81       	ldd	r20, Y+4	; 0x04
    163a:	5d 81       	ldd	r21, Y+5	; 0x05
    163c:	42 30       	cpi	r20, 0x02	; 2
    163e:	51 05       	cpc	r21, r1
    1640:	09 f4       	brne	.+2      	; 0x1644 <GPIO_readPin+0x5a>
    1642:	43 c0       	rjmp	.+134    	; 0x16ca <GPIO_readPin+0xe0>
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	9d 81       	ldd	r25, Y+5	; 0x05
    1648:	83 30       	cpi	r24, 0x03	; 3
    164a:	91 05       	cpc	r25, r1
    164c:	09 f4       	brne	.+2      	; 0x1650 <GPIO_readPin+0x66>
    164e:	5b c0       	rjmp	.+182    	; 0x1706 <GPIO_readPin+0x11c>
    1650:	77 c0       	rjmp	.+238    	; 0x1740 <GPIO_readPin+0x156>
			/*
			 * BIT_IS_SET to check if the bit is set or not and shifting right the answer as we need
			 * to read only LOGI_HIGH (1) or LOGIC_LOW (0)
			 * if ((PINA = 00000010)&(1<<(pin_num=1)))>>(1) = 1
			 */
			readValue = (BIT_IS_SET(PINA,pin_num)>>pin_num) ;
    1652:	e9 e3       	ldi	r30, 0x39	; 57
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 c0       	rjmp	.+4      	; 0x166c <GPIO_readPin+0x82>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	2a 95       	dec	r18
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <GPIO_readPin+0x7e>
    1670:	9a 01       	movw	r18, r20
    1672:	28 23       	and	r18, r24
    1674:	39 23       	and	r19, r25
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	88 2f       	mov	r24, r24
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a9 01       	movw	r20, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <GPIO_readPin+0x9a>
    1680:	55 95       	asr	r21
    1682:	47 95       	ror	r20
    1684:	8a 95       	dec	r24
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <GPIO_readPin+0x96>
    1688:	ca 01       	movw	r24, r20
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	59 c0       	rjmp	.+178    	; 0x1740 <GPIO_readPin+0x156>
			break;
		case PORTB_ID:
			/*
			 * here as what happened in PORTA
			 */
			readValue = ((BIT_IS_SET(PINB,pin_num)) >> pin_num) ;
    168e:	e6 e3       	ldi	r30, 0x36	; 54
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <GPIO_readPin+0xbe>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	2a 95       	dec	r18
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <GPIO_readPin+0xba>
    16ac:	9a 01       	movw	r18, r20
    16ae:	28 23       	and	r18, r24
    16b0:	39 23       	and	r19, r25
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a9 01       	movw	r20, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <GPIO_readPin+0xd6>
    16bc:	55 95       	asr	r21
    16be:	47 95       	ror	r20
    16c0:	8a 95       	dec	r24
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <GPIO_readPin+0xd2>
    16c4:	ca 01       	movw	r24, r20
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	3b c0       	rjmp	.+118    	; 0x1740 <GPIO_readPin+0x156>
			break;
		case PORTC_ID:
			/*
			 * here as what happened in PORTA
			 */
			readValue = ((BIT_IS_SET(PINC,pin_num)) >> pin_num) ;
    16ca:	e3 e3       	ldi	r30, 0x33	; 51
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <GPIO_readPin+0xfa>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	2a 95       	dec	r18
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <GPIO_readPin+0xf6>
    16e8:	9a 01       	movw	r18, r20
    16ea:	28 23       	and	r18, r24
    16ec:	39 23       	and	r19, r25
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a9 01       	movw	r20, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <GPIO_readPin+0x112>
    16f8:	55 95       	asr	r21
    16fa:	47 95       	ror	r20
    16fc:	8a 95       	dec	r24
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <GPIO_readPin+0x10e>
    1700:	ca 01       	movw	r24, r20
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	1d c0       	rjmp	.+58     	; 0x1740 <GPIO_readPin+0x156>
			break;
		case PORTD_ID:
			/*
			 * here as what happened in PORTA
			 */
			readValue = ((BIT_IS_SET(PIND,pin_num)) >> pin_num) ;
    1706:	e0 e3       	ldi	r30, 0x30	; 48
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_readPin+0x136>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	2a 95       	dec	r18
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_readPin+0x132>
    1724:	9a 01       	movw	r18, r20
    1726:	28 23       	and	r18, r24
    1728:	39 23       	and	r19, r25
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a9 01       	movw	r20, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_readPin+0x14e>
    1734:	55 95       	asr	r21
    1736:	47 95       	ror	r20
    1738:	8a 95       	dec	r24
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_readPin+0x14a>
    173c:	ca 01       	movw	r24, r20
    173e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return readValue ;
    1740:	89 81       	ldd	r24, Y+1	; 0x01
}
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <GPIO_setupPortDirection>:
 * if any pin in the port is input pin then this will activate/deactivate the internal pull_up
 * resistor.
 * if the input port number is not correct, the function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	00 d0       	rcall	.+0      	; 0x1758 <GPIO_setupPortDirection+0x6>
    1758:	00 d0       	rcall	.+0      	; 0x175a <GPIO_setupPortDirection+0x8>
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS)
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	85 30       	cpi	r24, 0x05	; 5
    1766:	90 f5       	brcc	.+100    	; 0x17cc <GPIO_setupPortDirection+0x7a>
	{
		/*Do nothing*/
	}
	else
	{
		switch(port_num)
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	3c 83       	std	Y+4, r19	; 0x04
    1770:	2b 83       	std	Y+3, r18	; 0x03
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	91 05       	cpc	r25, r1
    177a:	d1 f0       	breq	.+52     	; 0x17b0 <GPIO_setupPortDirection+0x5e>
    177c:	2b 81       	ldd	r18, Y+3	; 0x03
    177e:	3c 81       	ldd	r19, Y+4	; 0x04
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	2c f4       	brge	.+10     	; 0x1790 <GPIO_setupPortDirection+0x3e>
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	61 f0       	breq	.+24     	; 0x17a6 <GPIO_setupPortDirection+0x54>
    178e:	1e c0       	rjmp	.+60     	; 0x17cc <GPIO_setupPortDirection+0x7a>
    1790:	2b 81       	ldd	r18, Y+3	; 0x03
    1792:	3c 81       	ldd	r19, Y+4	; 0x04
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	81 f0       	breq	.+32     	; 0x17ba <GPIO_setupPortDirection+0x68>
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	91 05       	cpc	r25, r1
    17a2:	81 f0       	breq	.+32     	; 0x17c4 <GPIO_setupPortDirection+0x72>
    17a4:	13 c0       	rjmp	.+38     	; 0x17cc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    17a6:	ea e3       	ldi	r30, 0x3A	; 58
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	80 83       	st	Z, r24
    17ae:	0e c0       	rjmp	.+28     	; 0x17cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    17b0:	e7 e3       	ldi	r30, 0x37	; 55
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	80 83       	st	Z, r24
    17b8:	09 c0       	rjmp	.+18     	; 0x17cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    17ba:	e4 e3       	ldi	r30, 0x34	; 52
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	80 83       	st	Z, r24
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    17c4:	e1 e3       	ldi	r30, 0x31	; 49
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	80 83       	st	Z, r24
			break;
		}
	}
}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <GPIO_writePort>:
 * if any pin in the port is output pin the value will be written.
 * if any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * if the input port is not correct, the function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <GPIO_writePort+0x6>
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <GPIO_writePort+0x8>
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS)
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	85 30       	cpi	r24, 0x05	; 5
    17ee:	90 f5       	brcc	.+100    	; 0x1854 <GPIO_writePort+0x7a>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	3c 83       	std	Y+4, r19	; 0x04
    17f8:	2b 83       	std	Y+3, r18	; 0x03
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	91 05       	cpc	r25, r1
    1802:	d1 f0       	breq	.+52     	; 0x1838 <GPIO_writePort+0x5e>
    1804:	2b 81       	ldd	r18, Y+3	; 0x03
    1806:	3c 81       	ldd	r19, Y+4	; 0x04
    1808:	22 30       	cpi	r18, 0x02	; 2
    180a:	31 05       	cpc	r19, r1
    180c:	2c f4       	brge	.+10     	; 0x1818 <GPIO_writePort+0x3e>
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	61 f0       	breq	.+24     	; 0x182e <GPIO_writePort+0x54>
    1816:	1e c0       	rjmp	.+60     	; 0x1854 <GPIO_writePort+0x7a>
    1818:	2b 81       	ldd	r18, Y+3	; 0x03
    181a:	3c 81       	ldd	r19, Y+4	; 0x04
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	81 f0       	breq	.+32     	; 0x1842 <GPIO_writePort+0x68>
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	83 30       	cpi	r24, 0x03	; 3
    1828:	91 05       	cpc	r25, r1
    182a:	81 f0       	breq	.+32     	; 0x184c <GPIO_writePort+0x72>
    182c:	13 c0       	rjmp	.+38     	; 0x1854 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value ;
    182e:	eb e3       	ldi	r30, 0x3B	; 59
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	80 83       	st	Z, r24
    1836:	0e c0       	rjmp	.+28     	; 0x1854 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value ;
    1838:	e8 e3       	ldi	r30, 0x38	; 56
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	80 83       	st	Z, r24
    1840:	09 c0       	rjmp	.+18     	; 0x1854 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value ;
    1842:	e5 e3       	ldi	r30, 0x35	; 53
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	80 83       	st	Z, r24
    184a:	04 c0       	rjmp	.+8      	; 0x1854 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    184c:	e2 e3       	ldi	r30, 0x32	; 50
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	80 83       	st	Z, r24
			break;
		}
	}
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <GPIO_readPort>:
 * Description:
 * Read and return the value of the required port.
 * if the port number is not correct, the function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	00 d0       	rcall	.+0      	; 0x1868 <GPIO_readPort+0x6>
    1868:	00 d0       	rcall	.+0      	; 0x186a <GPIO_readPort+0x8>
    186a:	0f 92       	push	r0
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	8a 83       	std	Y+2, r24	; 0x02
	uint8 readValue = 0 ;
    1872:	19 82       	std	Y+1, r1	; 0x01
	if(port_num > NUM_OF_PORTS)
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	85 30       	cpi	r24, 0x05	; 5
    1878:	10 f0       	brcs	.+4      	; 0x187e <GPIO_readPort+0x1c>
	{
		return 0 ;
    187a:	1d 82       	std	Y+5, r1	; 0x05
    187c:	34 c0       	rjmp	.+104    	; 0x18e6 <GPIO_readPort+0x84>
	}
	else
	{
		switch(port_num)
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	3c 83       	std	Y+4, r19	; 0x04
    1886:	2b 83       	std	Y+3, r18	; 0x03
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	9c 81       	ldd	r25, Y+4	; 0x04
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	91 05       	cpc	r25, r1
    1890:	d1 f0       	breq	.+52     	; 0x18c6 <GPIO_readPort+0x64>
    1892:	2b 81       	ldd	r18, Y+3	; 0x03
    1894:	3c 81       	ldd	r19, Y+4	; 0x04
    1896:	22 30       	cpi	r18, 0x02	; 2
    1898:	31 05       	cpc	r19, r1
    189a:	2c f4       	brge	.+10     	; 0x18a6 <GPIO_readPort+0x44>
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	61 f0       	breq	.+24     	; 0x18bc <GPIO_readPort+0x5a>
    18a4:	1e c0       	rjmp	.+60     	; 0x18e2 <GPIO_readPort+0x80>
    18a6:	2b 81       	ldd	r18, Y+3	; 0x03
    18a8:	3c 81       	ldd	r19, Y+4	; 0x04
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	81 f0       	breq	.+32     	; 0x18d0 <GPIO_readPort+0x6e>
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	83 30       	cpi	r24, 0x03	; 3
    18b6:	91 05       	cpc	r25, r1
    18b8:	81 f0       	breq	.+32     	; 0x18da <GPIO_readPort+0x78>
    18ba:	13 c0       	rjmp	.+38     	; 0x18e2 <GPIO_readPort+0x80>
		{
		case PORTA_ID:
			readValue = PINA;
    18bc:	e9 e3       	ldi	r30, 0x39	; 57
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	0e c0       	rjmp	.+28     	; 0x18e2 <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			readValue = PINB;
    18c6:	e6 e3       	ldi	r30, 0x36	; 54
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	09 c0       	rjmp	.+18     	; 0x18e2 <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			readValue = PINC;
    18d0:	e3 e3       	ldi	r30, 0x33	; 51
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			readValue = PIND;
    18da:	e0 e3       	ldi	r30, 0x30	; 48
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return readValue ;
    18e2:	99 81       	ldd	r25, Y+1	; 0x01
    18e4:	9d 83       	std	Y+5, r25	; 0x05
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <__vector_9>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

uint8 tick = 0;

ISR (TIMER0_OVF_vect)
{
    18f8:	1f 92       	push	r1
    18fa:	0f 92       	push	r0
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	0f 92       	push	r0
    1900:	11 24       	eor	r1, r1
    1902:	2f 93       	push	r18
    1904:	3f 93       	push	r19
    1906:	4f 93       	push	r20
    1908:	5f 93       	push	r21
    190a:	6f 93       	push	r22
    190c:	7f 93       	push	r23
    190e:	8f 93       	push	r24
    1910:	9f 93       	push	r25
    1912:	af 93       	push	r26
    1914:	bf 93       	push	r27
    1916:	ef 93       	push	r30
    1918:	ff 93       	push	r31
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1922:	80 91 82 00 	lds	r24, 0x0082
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	80 93 82 00 	sts	0x0082, r24
	if(g_callBackPtr != NULL_PTR)
    192c:	80 91 80 00 	lds	r24, 0x0080
    1930:	90 91 81 00 	lds	r25, 0x0081
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	29 f0       	breq	.+10     	; 0x1942 <__vector_9+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1938:	e0 91 80 00 	lds	r30, 0x0080
    193c:	f0 91 81 00 	lds	r31, 0x0081
    1940:	09 95       	icall
		}
}
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	ff 91       	pop	r31
    1948:	ef 91       	pop	r30
    194a:	bf 91       	pop	r27
    194c:	af 91       	pop	r26
    194e:	9f 91       	pop	r25
    1950:	8f 91       	pop	r24
    1952:	7f 91       	pop	r23
    1954:	6f 91       	pop	r22
    1956:	5f 91       	pop	r21
    1958:	4f 91       	pop	r20
    195a:	3f 91       	pop	r19
    195c:	2f 91       	pop	r18
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	0f 90       	pop	r0
    1964:	1f 90       	pop	r1
    1966:	18 95       	reti

00001968 <__vector_19>:


ISR (TIMER0_COMP_vect)
{
    1968:	1f 92       	push	r1
    196a:	0f 92       	push	r0
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	0f 92       	push	r0
    1970:	11 24       	eor	r1, r1
    1972:	2f 93       	push	r18
    1974:	3f 93       	push	r19
    1976:	4f 93       	push	r20
    1978:	5f 93       	push	r21
    197a:	6f 93       	push	r22
    197c:	7f 93       	push	r23
    197e:	8f 93       	push	r24
    1980:	9f 93       	push	r25
    1982:	af 93       	push	r26
    1984:	bf 93       	push	r27
    1986:	ef 93       	push	r30
    1988:	ff 93       	push	r31
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1992:	80 91 82 00 	lds	r24, 0x0082
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	80 93 82 00 	sts	0x0082, r24
	if(g_callBackPtr != NULL_PTR)
    199c:	80 91 80 00 	lds	r24, 0x0080
    19a0:	90 91 81 00 	lds	r25, 0x0081
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	29 f0       	breq	.+10     	; 0x19b2 <__vector_19+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    19a8:	e0 91 80 00 	lds	r30, 0x0080
    19ac:	f0 91 81 00 	lds	r31, 0x0081
    19b0:	09 95       	icall
		}
}
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	ff 91       	pop	r31
    19b8:	ef 91       	pop	r30
    19ba:	bf 91       	pop	r27
    19bc:	af 91       	pop	r26
    19be:	9f 91       	pop	r25
    19c0:	8f 91       	pop	r24
    19c2:	7f 91       	pop	r23
    19c4:	6f 91       	pop	r22
    19c6:	5f 91       	pop	r21
    19c8:	4f 91       	pop	r20
    19ca:	3f 91       	pop	r19
    19cc:	2f 91       	pop	r18
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	0f 90       	pop	r0
    19d4:	1f 90       	pop	r1
    19d6:	18 95       	reti

000019d8 <__vector_8>:


ISR (TIMER1_OVF_vect)
{
    19d8:	1f 92       	push	r1
    19da:	0f 92       	push	r0
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	0f 92       	push	r0
    19e0:	11 24       	eor	r1, r1
    19e2:	2f 93       	push	r18
    19e4:	3f 93       	push	r19
    19e6:	4f 93       	push	r20
    19e8:	5f 93       	push	r21
    19ea:	6f 93       	push	r22
    19ec:	7f 93       	push	r23
    19ee:	8f 93       	push	r24
    19f0:	9f 93       	push	r25
    19f2:	af 93       	push	r26
    19f4:	bf 93       	push	r27
    19f6:	ef 93       	push	r30
    19f8:	ff 93       	push	r31
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1a02:	80 91 82 00 	lds	r24, 0x0082
    1a06:	8f 5f       	subi	r24, 0xFF	; 255
    1a08:	80 93 82 00 	sts	0x0082, r24
	if(g_callBackPtr != NULL_PTR)
    1a0c:	80 91 80 00 	lds	r24, 0x0080
    1a10:	90 91 81 00 	lds	r25, 0x0081
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	29 f0       	breq	.+10     	; 0x1a22 <__vector_8+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a18:	e0 91 80 00 	lds	r30, 0x0080
    1a1c:	f0 91 81 00 	lds	r31, 0x0081
    1a20:	09 95       	icall
		}
}
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	ff 91       	pop	r31
    1a28:	ef 91       	pop	r30
    1a2a:	bf 91       	pop	r27
    1a2c:	af 91       	pop	r26
    1a2e:	9f 91       	pop	r25
    1a30:	8f 91       	pop	r24
    1a32:	7f 91       	pop	r23
    1a34:	6f 91       	pop	r22
    1a36:	5f 91       	pop	r21
    1a38:	4f 91       	pop	r20
    1a3a:	3f 91       	pop	r19
    1a3c:	2f 91       	pop	r18
    1a3e:	0f 90       	pop	r0
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	0f 90       	pop	r0
    1a44:	1f 90       	pop	r1
    1a46:	18 95       	reti

00001a48 <__vector_6>:


ISR (TIMER1_COMPA_vect)
{
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1a72:	80 91 82 00 	lds	r24, 0x0082
    1a76:	8f 5f       	subi	r24, 0xFF	; 255
    1a78:	80 93 82 00 	sts	0x0082, r24
	if(g_callBackPtr != NULL_PTR)
    1a7c:	80 91 80 00 	lds	r24, 0x0080
    1a80:	90 91 81 00 	lds	r25, 0x0081
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	29 f0       	breq	.+10     	; 0x1a92 <__vector_6+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a88:	e0 91 80 00 	lds	r30, 0x0080
    1a8c:	f0 91 81 00 	lds	r31, 0x0081
    1a90:	09 95       	icall
		}
}
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	ff 91       	pop	r31
    1a98:	ef 91       	pop	r30
    1a9a:	bf 91       	pop	r27
    1a9c:	af 91       	pop	r26
    1a9e:	9f 91       	pop	r25
    1aa0:	8f 91       	pop	r24
    1aa2:	7f 91       	pop	r23
    1aa4:	6f 91       	pop	r22
    1aa6:	5f 91       	pop	r21
    1aa8:	4f 91       	pop	r20
    1aaa:	3f 91       	pop	r19
    1aac:	2f 91       	pop	r18
    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	0f 90       	pop	r0
    1ab4:	1f 90       	pop	r1
    1ab6:	18 95       	reti

00001ab8 <__vector_7>:


ISR (TIMER1_COMPB_vect)
{
    1ab8:	1f 92       	push	r1
    1aba:	0f 92       	push	r0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	2f 93       	push	r18
    1ac4:	3f 93       	push	r19
    1ac6:	4f 93       	push	r20
    1ac8:	5f 93       	push	r21
    1aca:	6f 93       	push	r22
    1acc:	7f 93       	push	r23
    1ace:	8f 93       	push	r24
    1ad0:	9f 93       	push	r25
    1ad2:	af 93       	push	r26
    1ad4:	bf 93       	push	r27
    1ad6:	ef 93       	push	r30
    1ad8:	ff 93       	push	r31
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1ae2:	80 91 82 00 	lds	r24, 0x0082
    1ae6:	8f 5f       	subi	r24, 0xFF	; 255
    1ae8:	80 93 82 00 	sts	0x0082, r24
	if(g_callBackPtr != NULL_PTR)
    1aec:	80 91 80 00 	lds	r24, 0x0080
    1af0:	90 91 81 00 	lds	r25, 0x0081
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	29 f0       	breq	.+10     	; 0x1b02 <__vector_7+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1af8:	e0 91 80 00 	lds	r30, 0x0080
    1afc:	f0 91 81 00 	lds	r31, 0x0081
    1b00:	09 95       	icall
		}
}
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	ff 91       	pop	r31
    1b08:	ef 91       	pop	r30
    1b0a:	bf 91       	pop	r27
    1b0c:	af 91       	pop	r26
    1b0e:	9f 91       	pop	r25
    1b10:	8f 91       	pop	r24
    1b12:	7f 91       	pop	r23
    1b14:	6f 91       	pop	r22
    1b16:	5f 91       	pop	r21
    1b18:	4f 91       	pop	r20
    1b1a:	3f 91       	pop	r19
    1b1c:	2f 91       	pop	r18
    1b1e:	0f 90       	pop	r0
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	0f 90       	pop	r0
    1b24:	1f 90       	pop	r1
    1b26:	18 95       	reti

00001b28 <__vector_4>:


ISR (TIMER2_OVF_vect)
{
    1b28:	1f 92       	push	r1
    1b2a:	0f 92       	push	r0
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	0f 92       	push	r0
    1b30:	11 24       	eor	r1, r1
    1b32:	2f 93       	push	r18
    1b34:	3f 93       	push	r19
    1b36:	4f 93       	push	r20
    1b38:	5f 93       	push	r21
    1b3a:	6f 93       	push	r22
    1b3c:	7f 93       	push	r23
    1b3e:	8f 93       	push	r24
    1b40:	9f 93       	push	r25
    1b42:	af 93       	push	r26
    1b44:	bf 93       	push	r27
    1b46:	ef 93       	push	r30
    1b48:	ff 93       	push	r31
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1b52:	80 91 82 00 	lds	r24, 0x0082
    1b56:	8f 5f       	subi	r24, 0xFF	; 255
    1b58:	80 93 82 00 	sts	0x0082, r24
	if(g_callBackPtr != NULL_PTR)
    1b5c:	80 91 80 00 	lds	r24, 0x0080
    1b60:	90 91 81 00 	lds	r25, 0x0081
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	29 f0       	breq	.+10     	; 0x1b72 <__vector_4+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b68:	e0 91 80 00 	lds	r30, 0x0080
    1b6c:	f0 91 81 00 	lds	r31, 0x0081
    1b70:	09 95       	icall
		}
}
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	ff 91       	pop	r31
    1b78:	ef 91       	pop	r30
    1b7a:	bf 91       	pop	r27
    1b7c:	af 91       	pop	r26
    1b7e:	9f 91       	pop	r25
    1b80:	8f 91       	pop	r24
    1b82:	7f 91       	pop	r23
    1b84:	6f 91       	pop	r22
    1b86:	5f 91       	pop	r21
    1b88:	4f 91       	pop	r20
    1b8a:	3f 91       	pop	r19
    1b8c:	2f 91       	pop	r18
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <__vector_3>:


ISR (TIMER2_COMP_vect)
{
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	2f 93       	push	r18
    1ba4:	3f 93       	push	r19
    1ba6:	4f 93       	push	r20
    1ba8:	5f 93       	push	r21
    1baa:	6f 93       	push	r22
    1bac:	7f 93       	push	r23
    1bae:	8f 93       	push	r24
    1bb0:	9f 93       	push	r25
    1bb2:	af 93       	push	r26
    1bb4:	bf 93       	push	r27
    1bb6:	ef 93       	push	r30
    1bb8:	ff 93       	push	r31
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
	tick++;
    1bc2:	80 91 82 00 	lds	r24, 0x0082
    1bc6:	8f 5f       	subi	r24, 0xFF	; 255
    1bc8:	80 93 82 00 	sts	0x0082, r24
	if(g_callBackPtr != NULL_PTR)
    1bcc:	80 91 80 00 	lds	r24, 0x0080
    1bd0:	90 91 81 00 	lds	r25, 0x0081
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	29 f0       	breq	.+10     	; 0x1be2 <__vector_3+0x4a>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1bd8:	e0 91 80 00 	lds	r30, 0x0080
    1bdc:	f0 91 81 00 	lds	r31, 0x0081
    1be0:	09 95       	icall
		}
}
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	ff 91       	pop	r31
    1be8:	ef 91       	pop	r30
    1bea:	bf 91       	pop	r27
    1bec:	af 91       	pop	r26
    1bee:	9f 91       	pop	r25
    1bf0:	8f 91       	pop	r24
    1bf2:	7f 91       	pop	r23
    1bf4:	6f 91       	pop	r22
    1bf6:	5f 91       	pop	r21
    1bf8:	4f 91       	pop	r20
    1bfa:	3f 91       	pop	r19
    1bfc:	2f 91       	pop	r18
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	0f 90       	pop	r0
    1c04:	1f 90       	pop	r1
    1c06:	18 95       	reti

00001c08 <TIMER_init>:
 * input: pointer to structure of TIMER_configType type
 * return: void
 * Description: initializing the TIMER driver as desired in the passed structure
 */
void TIMER_init (const TIMER_configType* config_ptr )
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <TIMER_init+0x6>
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
	 *******************************************************************************************************/

	/******************************
	  if timer0 is the chosen one
	 ******************************/
	if ((config_ptr-> TIMER_ID) == timer0)
    1c16:	e9 81       	ldd	r30, Y+1	; 0x01
    1c18:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1a:	80 81       	ld	r24, Z
    1c1c:	88 23       	and	r24, r24
    1c1e:	a1 f5       	brne	.+104    	; 0x1c88 <TIMER_init+0x80>
	{
		/* initializing timer0 register TCNT0 */
		TCNT0 = config_ptr -> TCNT_INITIAL;
    1c20:	a2 e5       	ldi	r26, 0x52	; 82
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e9 81       	ldd	r30, Y+1	; 0x01
    1c26:	fa 81       	ldd	r31, Y+2	; 0x02
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	8c 93       	st	X, r24

		/* configuring the chosen clock as the cs02:0 are the first 3 bits */
		TCCR0 = (config_ptr -> TIMER_CLOCK) | (1<<FOC0);
    1c2e:	a3 e5       	ldi	r26, 0x53	; 83
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e9 81       	ldd	r30, Y+1	; 0x01
    1c34:	fa 81       	ldd	r31, Y+2	; 0x02
    1c36:	87 81       	ldd	r24, Z+7	; 0x07
    1c38:	80 68       	ori	r24, 0x80	; 128
    1c3a:	8c 93       	st	X, r24

		/* configuring the timer mode.                            *
		 * where in NORMAL mode: WGM01:0 are cleared both         *
		 * while in CTC mode: WGM01:0 = 2 & also OCR0 is assigned */
		if ((config_ptr -> TIMER_MODE) == TIMER0_CTC) /* (i.e. if the used mode is compare mode) */
    1c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c40:	81 81       	ldd	r24, Z+1	; 0x01
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	c1 f4       	brne	.+48     	; 0x1c76 <TIMER_init+0x6e>
		{
			/* assigning the value from the passed structure in the OCR0*/
			OCR0 = (config_ptr -> TIMER_CTC_REG);
    1c46:	ac e5       	ldi	r26, 0x5C	; 92
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4e:	84 81       	ldd	r24, Z+4	; 0x04
    1c50:	95 81       	ldd	r25, Z+5	; 0x05
    1c52:	8c 93       	st	X, r24

			/* (2)(decimal) = (10)(binary) (WGM01 WGM00) = (1 0) */
			TCCR0 |= (1<<WGM01);
    1c54:	a3 e5       	ldi	r26, 0x53	; 83
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e3 e5       	ldi	r30, 0x53	; 83
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 60       	ori	r24, 0x08	; 8
    1c60:	8c 93       	st	X, r24

			/* checking on the desired technique (i.e. polling or interrupt) but for the CTC mode */
			if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    1c62:	e9 81       	ldd	r30, Y+1	; 0x01
    1c64:	fa 81       	ldd	r31, Y+2	; 0x02
    1c66:	86 81       	ldd	r24, Z+6	; 0x06
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	71 f4       	brne	.+28     	; 0x1c88 <TIMER_init+0x80>
			{
				/* setting the OCIE0 bit (timer0 output compare match interrupt enable)  */
				TIMSK = (1 << OCIE0);
    1c6c:	e9 e5       	ldi	r30, 0x59	; 89
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	80 83       	st	Z, r24
    1c74:	09 c0       	rjmp	.+18     	; 0x1c88 <TIMER_init+0x80>
			}
		}
		else /* (i.e. if the used mode is NORMAL mode)*/
		{
			/* checking on the desired technique (i.e. polling or interrupt) but for the NORMAL mode */
			if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    1c76:	e9 81       	ldd	r30, Y+1	; 0x01
    1c78:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7a:	86 81       	ldd	r24, Z+6	; 0x06
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	21 f4       	brne	.+8      	; 0x1c88 <TIMER_init+0x80>
			{
				/* setting the TOIE0 bit (timer0 overflow interrupt enable) */
				TIMSK = (1 << TOIE0);
    1c80:	e9 e5       	ldi	r30, 0x59	; 89
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	80 83       	st	Z, r24
	/*******************************************************************************************************/

	/*******************************
	   if timer1 is the chosen one
	 *******************************/
	if((config_ptr -> TIMER_ID) == timer1)
    1c88:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8c:	80 81       	ld	r24, Z
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	d9 f5       	brne	.+118    	; 0x1d08 <TIMER_init+0x100>
	{
		/* initializing timer1 register TCNT1 */
		TCNT1 = config_ptr -> TCNT_INITIAL;
    1c92:	ac e4       	ldi	r26, 0x4C	; 76
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e9 81       	ldd	r30, Y+1	; 0x01
    1c98:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9a:	82 81       	ldd	r24, Z+2	; 0x02
    1c9c:	93 81       	ldd	r25, Z+3	; 0x03
    1c9e:	11 96       	adiw	r26, 0x01	; 1
    1ca0:	9c 93       	st	X, r25
    1ca2:	8e 93       	st	-X, r24

		/* configuring the chosen clock as the cs12:0 are the first 3 bits */
		TCCR1B = (config_ptr -> TIMER_CLOCK);
    1ca4:	ae e4       	ldi	r26, 0x4E	; 78
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    1caa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cac:	87 81       	ldd	r24, Z+7	; 0x07
    1cae:	8c 93       	st	X, r24

		/* setting FOC1A & FOC1B as we aren't working through PWM mode */
		TCCR1A = 12;
    1cb0:	ef e4       	ldi	r30, 0x4F	; 79
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	8c e0       	ldi	r24, 0x0C	; 12
    1cb6:	80 83       	st	Z, r24

		/* configuring the timer mode.                             *
		 * where in NORMAL mode: WGM13:0 are all cleared           *
		 * while in CTC mode: WGM13:0 = 4 & also OCR1 is assigned  */
		if ((config_ptr -> TIMER_MODE) == TIMER1_CTC)
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	81 81       	ldd	r24, Z+1	; 0x01
    1cbe:	82 30       	cpi	r24, 0x02	; 2
    1cc0:	d1 f4       	brne	.+52     	; 0x1cf6 <TIMER_init+0xee>
		{
			/* assigning the value from the passed structure in the OCR1A*/
			OCR1A = (config_ptr -> TIMER_CTC_REG);
    1cc2:	aa e4       	ldi	r26, 0x4A	; 74
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cca:	84 81       	ldd	r24, Z+4	; 0x04
    1ccc:	95 81       	ldd	r25, Z+5	; 0x05
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	9c 93       	st	X, r25
    1cd2:	8e 93       	st	-X, r24

			/* 4 = 1 0 0  which means (WGM13 WGM12 WGM11 WGM10) = (0100)*/
			TCCR1B |= (1<<WGM12);
    1cd4:	ae e4       	ldi	r26, 0x4E	; 78
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	ee e4       	ldi	r30, 0x4E	; 78
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	88 60       	ori	r24, 0x08	; 8
    1ce0:	8c 93       	st	X, r24

			/* checking on the desired technique (i.e. polling or interrupt) but for the CTC mode */
			if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    1ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce6:	86 81       	ldd	r24, Z+6	; 0x06
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	71 f4       	brne	.+28     	; 0x1d08 <TIMER_init+0x100>
				{
					/* setting the OCIE1A bit (timer1 output compare A match interrupt enable)  */
					TIMSK = (1 << OCIE1A);
    1cec:	e9 e5       	ldi	r30, 0x59	; 89
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 e1       	ldi	r24, 0x10	; 16
    1cf2:	80 83       	st	Z, r24
    1cf4:	09 c0       	rjmp	.+18     	; 0x1d08 <TIMER_init+0x100>
				}
			}
			else /* (i.e. if the used mode is NORMAL mode)*/
			{
				/* checking on the desired technique (i.e. polling or interrupt) but for the NORMAL mode */
				if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    1cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfa:	86 81       	ldd	r24, Z+6	; 0x06
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	21 f4       	brne	.+8      	; 0x1d08 <TIMER_init+0x100>
				{
					/* setting the TOIE1 bit (timer1 overflow interrupt enable) */
					TIMSK = (1 << TOIE1);
    1d00:	e9 e5       	ldi	r30, 0x59	; 89
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	84 e0       	ldi	r24, 0x04	; 4
    1d06:	80 83       	st	Z, r24
	/*******************************************************************************************************/

	/******************************
	  if timer2 is the chosen one
	 ******************************/
	if ((config_ptr-> TIMER_ID) == timer2)
    1d08:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0c:	80 81       	ld	r24, Z
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	a1 f5       	brne	.+104    	; 0x1d7a <TIMER_init+0x172>
	{
		/* initializing timer2 register TCNT2 */
		TCNT2 = config_ptr -> TCNT_INITIAL;
    1d12:	a4 e4       	ldi	r26, 0x44	; 68
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e9 81       	ldd	r30, Y+1	; 0x01
    1d18:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	8c 93       	st	X, r24

		/* configuring the chosen clock as the cs22:0 are the first 3 bits */
		TCCR2 = (config_ptr -> TIMER_CLOCK) | (1<<FOC2);
    1d20:	a5 e4       	ldi	r26, 0x45	; 69
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e9 81       	ldd	r30, Y+1	; 0x01
    1d26:	fa 81       	ldd	r31, Y+2	; 0x02
    1d28:	87 81       	ldd	r24, Z+7	; 0x07
    1d2a:	80 68       	ori	r24, 0x80	; 128
    1d2c:	8c 93       	st	X, r24

		/* configuring timer2 mode.                               *
		 * where in NORMAL mode: WGM21:0 are cleared both         *
		 * while in CTC mode: WGM21:0 = 2 & also OCR1 is assigned */
		if ((config_ptr -> TIMER_MODE) == TIMER2_CTC)
    1d2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d30:	fa 81       	ldd	r31, Y+2	; 0x02
    1d32:	81 81       	ldd	r24, Z+1	; 0x01
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	c1 f4       	brne	.+48     	; 0x1d68 <TIMER_init+0x160>
		{
			/* assigning the value from the passed structure in the OCR2*/
			OCR2 = (config_ptr -> TIMER_CTC_REG);
    1d38:	a3 e4       	ldi	r26, 0x43	; 67
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d40:	84 81       	ldd	r24, Z+4	; 0x04
    1d42:	95 81       	ldd	r25, Z+5	; 0x05
    1d44:	8c 93       	st	X, r24

			/* (2)(decimal) = (10)(binary) (WGM21 WGM20) = (1 0) */
			TCCR2 |= (1<<WGM21);
    1d46:	a5 e4       	ldi	r26, 0x45	; 69
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e5 e4       	ldi	r30, 0x45	; 69
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	88 60       	ori	r24, 0x08	; 8
    1d52:	8c 93       	st	X, r24

			/* checking on the desired technique (i.e. polling or interrupt) but for the CTC mode */
			if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    1d54:	e9 81       	ldd	r30, Y+1	; 0x01
    1d56:	fa 81       	ldd	r31, Y+2	; 0x02
    1d58:	86 81       	ldd	r24, Z+6	; 0x06
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	71 f4       	brne	.+28     	; 0x1d7a <TIMER_init+0x172>
			{
				/* setting the OCIE2 bit (timer2 output compare match interrupt enable)  */
				TIMSK = (1 << OCIE2);
    1d5e:	e9 e5       	ldi	r30, 0x59	; 89
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 e8       	ldi	r24, 0x80	; 128
    1d64:	80 83       	st	Z, r24
    1d66:	09 c0       	rjmp	.+18     	; 0x1d7a <TIMER_init+0x172>
			}
		}
		else /* (i.e. if the used mode is NORMAL mode)*/
		{
			/* checking on the desired technique (i.e. polling or interrupt) but for the NORMAL mode */
			if((config_ptr -> TIMER_TECHNIQUE) == interrupt)
    1d68:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6c:	86 81       	ldd	r24, Z+6	; 0x06
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	21 f4       	brne	.+8      	; 0x1d7a <TIMER_init+0x172>
			{
				/* setting the TOIE2 bit (timer2 overflow interrupt enable) */
				TIMSK = (1 << TOIE2);
    1d72:	e9 e5       	ldi	r30, 0x59	; 89
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 e4       	ldi	r24, 0x40	; 64
    1d78:	80 83       	st	Z, r24
			}
		}
	}
}
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <TIMER_setCallBack>:


void TIMER_setCallBack (void*a_ptr(void))
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <TIMER_setCallBack+0x6>
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	90 93 81 00 	sts	0x0081, r25
    1d9a:	80 93 80 00 	sts	0x0080, r24
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <TIMER_deInit>:

void TIMER_deInit (void)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    1db0:	e3 e5       	ldi	r30, 0x53	; 83
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	10 82       	st	Z, r1
	TCCR1A = 0;
    1db6:	ef e4       	ldi	r30, 0x4F	; 79
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	10 82       	st	Z, r1
	TCCR1B = 0;
    1dbc:	ee e4       	ldi	r30, 0x4E	; 78
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	10 82       	st	Z, r1
	TCCR2 = 0;
    1dc2:	e5 e4       	ldi	r30, 0x45	; 69
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	10 82       	st	Z, r1
	TCNT0 = 0;
    1dc8:	e2 e5       	ldi	r30, 0x52	; 82
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	10 82       	st	Z, r1
	TCNT1 = 0;
    1dce:	ec e4       	ldi	r30, 0x4C	; 76
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	11 82       	std	Z+1, r1	; 0x01
    1dd4:	10 82       	st	Z, r1
	TCNT2 = 0;
    1dd6:	e4 e4       	ldi	r30, 0x44	; 68
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	10 82       	st	Z, r1
}
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const I2C_config* config)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	28 97       	sbiw	r28, 0x08	; 8
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
	uint32 twb_sr = ((8*(10^6) / config->BIT_RATE) - 16) / (2);
    1dfa:	ed 81       	ldd	r30, Y+5	; 0x05
    1dfc:	fe 81       	ldd	r31, Y+6	; 0x06
    1dfe:	20 81       	ld	r18, Z
    1e00:	31 81       	ldd	r19, Z+1	; 0x01
    1e02:	80 e6       	ldi	r24, 0x60	; 96
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	b9 01       	movw	r22, r18
    1e08:	0e 94 b3 10 	call	0x2166	; 0x2166 <__divmodhi4>
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	40 97       	sbiw	r24, 0x10	; 16
    1e10:	98 87       	std	Y+8, r25	; 0x08
    1e12:	8f 83       	std	Y+7, r24	; 0x07
    1e14:	8f 81       	ldd	r24, Y+7	; 0x07
    1e16:	98 85       	ldd	r25, Y+8	; 0x08
    1e18:	99 23       	and	r25, r25
    1e1a:	2c f4       	brge	.+10     	; 0x1e26 <TWI_init+0x44>
    1e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1e:	98 85       	ldd	r25, Y+8	; 0x08
    1e20:	01 96       	adiw	r24, 0x01	; 1
    1e22:	98 87       	std	Y+8, r25	; 0x08
    1e24:	8f 83       	std	Y+7, r24	; 0x07
    1e26:	8f 81       	ldd	r24, Y+7	; 0x07
    1e28:	98 85       	ldd	r25, Y+8	; 0x08
    1e2a:	95 95       	asr	r25
    1e2c:	87 95       	ror	r24
    1e2e:	aa 27       	eor	r26, r26
    1e30:	97 fd       	sbrc	r25, 7
    1e32:	a0 95       	com	r26
    1e34:	ba 2f       	mov	r27, r26
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	9a 83       	std	Y+2, r25	; 0x02
    1e3a:	ab 83       	std	Y+3, r26	; 0x03
    1e3c:	bc 83       	std	Y+4, r27	; 0x04
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = twb_sr;
    1e3e:	e0 e2       	ldi	r30, 0x20	; 32
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	80 83       	st	Z, r24
	TWSR = (twb_sr>>8);
    1e46:	e1 e2       	ldi	r30, 0x21	; 33
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4e:	ab 81       	ldd	r26, Y+3	; 0x03
    1e50:	bc 81       	ldd	r27, Y+4	; 0x04
    1e52:	89 2f       	mov	r24, r25
    1e54:	9a 2f       	mov	r25, r26
    1e56:	ab 2f       	mov	r26, r27
    1e58:	bb 27       	eor	r27, r27
    1e5a:	80 83       	st	Z, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
//    TWAR = 0b00000010; // my address = 0x01 :)
	TWAR = config -> adress;
    1e5c:	a2 e2       	ldi	r26, 0x22	; 34
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	ed 81       	ldd	r30, Y+5	; 0x05
    1e62:	fe 81       	ldd	r31, Y+6	; 0x06
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    1e6a:	e6 e5       	ldi	r30, 0x56	; 86
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	84 e0       	ldi	r24, 0x04	; 4
    1e70:	80 83       	st	Z, r24
}
    1e72:	28 96       	adiw	r28, 0x08	; 8
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <TWI_start>:

void TWI_start(void)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1e8c:	e6 e5       	ldi	r30, 0x56	; 86
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	84 ea       	ldi	r24, 0xA4	; 164
    1e92:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e94:	e6 e5       	ldi	r30, 0x56	; 86
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	88 23       	and	r24, r24
    1e9c:	dc f7       	brge	.-10     	; 0x1e94 <TWI_start+0x10>
}
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <TWI_stop>:

void TWI_stop(void)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1eac:	e6 e5       	ldi	r30, 0x56	; 86
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	84 e9       	ldi	r24, 0x94	; 148
    1eb2:	80 83       	st	Z, r24
}
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	0f 92       	push	r0
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1ec6:	e3 e2       	ldi	r30, 0x23	; 35
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1ece:	e6 e5       	ldi	r30, 0x56	; 86
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	84 e8       	ldi	r24, 0x84	; 132
    1ed4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ed6:	e6 e5       	ldi	r30, 0x56	; 86
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	88 23       	and	r24, r24
    1ede:	dc f7       	brge	.-10     	; 0x1ed6 <TWI_writeByte+0x1c>
}
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1ef0:	e6 e5       	ldi	r30, 0x56	; 86
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	84 ec       	ldi	r24, 0xC4	; 196
    1ef6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ef8:	e6 e5       	ldi	r30, 0x56	; 86
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	88 23       	and	r24, r24
    1f00:	dc f7       	brge	.-10     	; 0x1ef8 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1f02:	e3 e2       	ldi	r30, 0x23	; 35
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
}
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1f16:	e6 e5       	ldi	r30, 0x56	; 86
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	84 e8       	ldi	r24, 0x84	; 132
    1f1c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f1e:	e6 e5       	ldi	r30, 0x56	; 86
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	88 23       	and	r24, r24
    1f26:	dc f7       	brge	.-10     	; 0x1f1e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1f28:	e3 e2       	ldi	r30, 0x23	; 35
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
}
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	0f 92       	push	r0
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1f3e:	e1 e2       	ldi	r30, 0x21	; 33
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	88 7f       	andi	r24, 0xF8	; 248
    1f46:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <UART_init>:
#include <avr/io.h>
#include "common_macros.h"


void UART_init (const uart_config* configuration)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <UART_init+0x6>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <UART_init+0x8>
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	9c 83       	std	Y+4, r25	; 0x04
    1f60:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRR_value = 0;
    1f62:	1a 82       	std	Y+2, r1	; 0x02
    1f64:	19 82       	std	Y+1, r1	; 0x01

	/* USCRA bits from bit 2 to bit 7 act as flag so we won't set them here as they   *
	 * are for checking.                                                              *
	 * U2X: is for enabling or disabling the double transmission speed mode           *
	 * MPCM: is set when the receiver is exposed to more than one transmitter         */
	UCSRA = (1<<U2X);
    1f66:	eb e2       	ldi	r30, 0x2B	; 43
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
    1f6c:	80 83       	st	Z, r24
	 *TXEN: Transmitter Enable                                                        *
	 *UCSZ2: Character Size                                                           *
	 *RXB8: Receive Data Bit 8                                                        *
	 *TXB8: Transmit Data Bit 8                                                       *
	 **********************************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | (((configuration -> CHARACTER_SIZE)>>2) << UCSZ2);
    1f6e:	aa e2       	ldi	r26, 0x2A	; 42
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	eb 81       	ldd	r30, Y+3	; 0x03
    1f74:	fc 81       	ldd	r31, Y+4	; 0x04
    1f76:	80 81       	ld	r24, Z
    1f78:	86 95       	lsr	r24
    1f7a:	86 95       	lsr	r24
    1f7c:	88 2f       	mov	r24, r24
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	88 61       	ori	r24, 0x18	; 24
    1f8a:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | ((((configuration -> CHARACTER_SIZE)&(0X2))>>1)<< UCSZ1) |\
    1f8c:	a0 e4       	ldi	r26, 0x40	; 64
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	eb 81       	ldd	r30, Y+3	; 0x03
    1f92:	fc 81       	ldd	r31, Y+4	; 0x04
    1f94:	80 81       	ld	r24, Z
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	82 70       	andi	r24, 0x02	; 2
    1f9c:	90 70       	andi	r25, 0x00	; 0
    1f9e:	95 95       	asr	r25
    1fa0:	87 95       	ror	r24
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	28 2f       	mov	r18, r24
    1fac:	20 68       	ori	r18, 0x80	; 128
    1fae:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb2:	80 81       	ld	r24, Z
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	28 2b       	or	r18, r24
    1fc2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	88 2f       	mov	r24, r24
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	82 2b       	or	r24, r18
    1fda:	8c 93       	st	X, r24
			(((configuration -> CHARACTER_SIZE)&(0X1))<< UCSZ0)|\
			((configuration ->STOP_BITS_NO) << USBS);

	/* Calculate the UBRR register value */
	UBRR_value = (uint16)(((F_CPU / ((configuration -> BIT_RATE) * 8UL))) - 1);
    1fdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fde:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe0:	83 81       	ldd	r24, Z+3	; 0x03
    1fe2:	94 81       	ldd	r25, Z+4	; 0x04
    1fe4:	a5 81       	ldd	r26, Z+5	; 0x05
    1fe6:	b6 81       	ldd	r27, Z+6	; 0x06
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	aa 1f       	adc	r26, r26
    1fee:	bb 1f       	adc	r27, r27
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	aa 1f       	adc	r26, r26
    1ff6:	bb 1f       	adc	r27, r27
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	aa 1f       	adc	r26, r26
    1ffe:	bb 1f       	adc	r27, r27
    2000:	9c 01       	movw	r18, r24
    2002:	ad 01       	movw	r20, r26
    2004:	80 e4       	ldi	r24, 0x40	; 64
    2006:	92 e4       	ldi	r25, 0x42	; 66
    2008:	af e0       	ldi	r26, 0x0F	; 15
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 c6 10 	call	0x218c	; 0x218c <__udivmodsi4>
    2014:	da 01       	movw	r26, r20
    2016:	c9 01       	movw	r24, r18
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = UBRR_value>>8;
    201e:	e0 e4       	ldi	r30, 0x40	; 64
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	89 2f       	mov	r24, r25
    2028:	99 27       	eor	r25, r25
    202a:	80 83       	st	Z, r24
	UBRRL = UBRR_value;
    202c:	e9 e2       	ldi	r30, 0x29	; 41
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	80 83       	st	Z, r24
}
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	0f 92       	push	r0
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    204e:	eb e2       	ldi	r30, 0x2B	; 43
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	80 72       	andi	r24, 0x20	; 32
    205a:	90 70       	andi	r25, 0x00	; 0
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	b9 f3       	breq	.-18     	; 0x204e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2060:	ec e2       	ldi	r30, 0x2C	; 44
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	80 83       	st	Z, r24

}
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2078:	eb e2       	ldi	r30, 0x2B	; 43
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	88 23       	and	r24, r24
    2080:	dc f7       	brge	.-10     	; 0x2078 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2082:	ec e2       	ldi	r30, 0x2C	; 44
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <UART_sendString+0x6>
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	9b 83       	std	Y+3, r25	; 0x03
    209c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    209e:	19 82       	std	Y+1, r1	; 0x01
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	9b 81       	ldd	r25, Y+3	; 0x03
    20ac:	fc 01       	movw	r30, r24
    20ae:	e2 0f       	add	r30, r18
    20b0:	f3 1f       	adc	r31, r19
    20b2:	80 81       	ld	r24, Z
    20b4:	0e 94 21 10 	call	0x2042	; 0x2042 <UART_sendByte>
		i++;
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	8f 5f       	subi	r24, 0xFF	; 255
    20bc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	9b 81       	ldd	r25, Y+3	; 0x03
    20c8:	fc 01       	movw	r30, r24
    20ca:	e2 0f       	add	r30, r18
    20cc:	f3 1f       	adc	r31, r19
    20ce:	80 81       	ld	r24, Z
    20d0:	88 23       	and	r24, r24
    20d2:	39 f7       	brne	.-50     	; 0x20a2 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    20e0:	0f 93       	push	r16
    20e2:	1f 93       	push	r17
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <UART_receiveString+0xa>
    20ea:	0f 92       	push	r0
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	9b 83       	std	Y+3, r25	; 0x03
    20f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20f4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	8c 01       	movw	r16, r24
    2102:	02 0f       	add	r16, r18
    2104:	13 1f       	adc	r17, r19
    2106:	0e 94 38 10 	call	0x2070	; 0x2070 <UART_receiveByte>
    210a:	f8 01       	movw	r30, r16
    210c:	80 83       	st	Z, r24
    210e:	0f c0       	rjmp	.+30     	; 0x212e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	8f 5f       	subi	r24, 0xFF	; 255
    2114:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	9b 81       	ldd	r25, Y+3	; 0x03
    2120:	8c 01       	movw	r16, r24
    2122:	02 0f       	add	r16, r18
    2124:	13 1f       	adc	r17, r19
    2126:	0e 94 38 10 	call	0x2070	; 0x2070 <UART_receiveByte>
    212a:	f8 01       	movw	r30, r16
    212c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	9b 81       	ldd	r25, Y+3	; 0x03
    2138:	fc 01       	movw	r30, r24
    213a:	e2 0f       	add	r30, r18
    213c:	f3 1f       	adc	r31, r19
    213e:	80 81       	ld	r24, Z
    2140:	83 32       	cpi	r24, 0x23	; 35
    2142:	31 f7       	brne	.-52     	; 0x2110 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	fc 01       	movw	r30, r24
    2150:	e2 0f       	add	r30, r18
    2152:	f3 1f       	adc	r31, r19
    2154:	10 82       	st	Z, r1
}
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	1f 91       	pop	r17
    2162:	0f 91       	pop	r16
    2164:	08 95       	ret

00002166 <__divmodhi4>:
    2166:	97 fb       	bst	r25, 7
    2168:	09 2e       	mov	r0, r25
    216a:	07 26       	eor	r0, r23
    216c:	0a d0       	rcall	.+20     	; 0x2182 <__divmodhi4_neg1>
    216e:	77 fd       	sbrc	r23, 7
    2170:	04 d0       	rcall	.+8      	; 0x217a <__divmodhi4_neg2>
    2172:	2e d0       	rcall	.+92     	; 0x21d0 <__udivmodhi4>
    2174:	06 d0       	rcall	.+12     	; 0x2182 <__divmodhi4_neg1>
    2176:	00 20       	and	r0, r0
    2178:	1a f4       	brpl	.+6      	; 0x2180 <__divmodhi4_exit>

0000217a <__divmodhi4_neg2>:
    217a:	70 95       	com	r23
    217c:	61 95       	neg	r22
    217e:	7f 4f       	sbci	r23, 0xFF	; 255

00002180 <__divmodhi4_exit>:
    2180:	08 95       	ret

00002182 <__divmodhi4_neg1>:
    2182:	f6 f7       	brtc	.-4      	; 0x2180 <__divmodhi4_exit>
    2184:	90 95       	com	r25
    2186:	81 95       	neg	r24
    2188:	9f 4f       	sbci	r25, 0xFF	; 255
    218a:	08 95       	ret

0000218c <__udivmodsi4>:
    218c:	a1 e2       	ldi	r26, 0x21	; 33
    218e:	1a 2e       	mov	r1, r26
    2190:	aa 1b       	sub	r26, r26
    2192:	bb 1b       	sub	r27, r27
    2194:	fd 01       	movw	r30, r26
    2196:	0d c0       	rjmp	.+26     	; 0x21b2 <__udivmodsi4_ep>

00002198 <__udivmodsi4_loop>:
    2198:	aa 1f       	adc	r26, r26
    219a:	bb 1f       	adc	r27, r27
    219c:	ee 1f       	adc	r30, r30
    219e:	ff 1f       	adc	r31, r31
    21a0:	a2 17       	cp	r26, r18
    21a2:	b3 07       	cpc	r27, r19
    21a4:	e4 07       	cpc	r30, r20
    21a6:	f5 07       	cpc	r31, r21
    21a8:	20 f0       	brcs	.+8      	; 0x21b2 <__udivmodsi4_ep>
    21aa:	a2 1b       	sub	r26, r18
    21ac:	b3 0b       	sbc	r27, r19
    21ae:	e4 0b       	sbc	r30, r20
    21b0:	f5 0b       	sbc	r31, r21

000021b2 <__udivmodsi4_ep>:
    21b2:	66 1f       	adc	r22, r22
    21b4:	77 1f       	adc	r23, r23
    21b6:	88 1f       	adc	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	1a 94       	dec	r1
    21bc:	69 f7       	brne	.-38     	; 0x2198 <__udivmodsi4_loop>
    21be:	60 95       	com	r22
    21c0:	70 95       	com	r23
    21c2:	80 95       	com	r24
    21c4:	90 95       	com	r25
    21c6:	9b 01       	movw	r18, r22
    21c8:	ac 01       	movw	r20, r24
    21ca:	bd 01       	movw	r22, r26
    21cc:	cf 01       	movw	r24, r30
    21ce:	08 95       	ret

000021d0 <__udivmodhi4>:
    21d0:	aa 1b       	sub	r26, r26
    21d2:	bb 1b       	sub	r27, r27
    21d4:	51 e1       	ldi	r21, 0x11	; 17
    21d6:	07 c0       	rjmp	.+14     	; 0x21e6 <__udivmodhi4_ep>

000021d8 <__udivmodhi4_loop>:
    21d8:	aa 1f       	adc	r26, r26
    21da:	bb 1f       	adc	r27, r27
    21dc:	a6 17       	cp	r26, r22
    21de:	b7 07       	cpc	r27, r23
    21e0:	10 f0       	brcs	.+4      	; 0x21e6 <__udivmodhi4_ep>
    21e2:	a6 1b       	sub	r26, r22
    21e4:	b7 0b       	sbc	r27, r23

000021e6 <__udivmodhi4_ep>:
    21e6:	88 1f       	adc	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	5a 95       	dec	r21
    21ec:	a9 f7       	brne	.-22     	; 0x21d8 <__udivmodhi4_loop>
    21ee:	80 95       	com	r24
    21f0:	90 95       	com	r25
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	08 95       	ret

000021f8 <__prologue_saves__>:
    21f8:	2f 92       	push	r2
    21fa:	3f 92       	push	r3
    21fc:	4f 92       	push	r4
    21fe:	5f 92       	push	r5
    2200:	6f 92       	push	r6
    2202:	7f 92       	push	r7
    2204:	8f 92       	push	r8
    2206:	9f 92       	push	r9
    2208:	af 92       	push	r10
    220a:	bf 92       	push	r11
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	ca 1b       	sub	r28, r26
    2222:	db 0b       	sbc	r29, r27
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	de bf       	out	0x3e, r29	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	cd bf       	out	0x3d, r28	; 61
    222e:	09 94       	ijmp

00002230 <__epilogue_restores__>:
    2230:	2a 88       	ldd	r2, Y+18	; 0x12
    2232:	39 88       	ldd	r3, Y+17	; 0x11
    2234:	48 88       	ldd	r4, Y+16	; 0x10
    2236:	5f 84       	ldd	r5, Y+15	; 0x0f
    2238:	6e 84       	ldd	r6, Y+14	; 0x0e
    223a:	7d 84       	ldd	r7, Y+13	; 0x0d
    223c:	8c 84       	ldd	r8, Y+12	; 0x0c
    223e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2240:	aa 84       	ldd	r10, Y+10	; 0x0a
    2242:	b9 84       	ldd	r11, Y+9	; 0x09
    2244:	c8 84       	ldd	r12, Y+8	; 0x08
    2246:	df 80       	ldd	r13, Y+7	; 0x07
    2248:	ee 80       	ldd	r14, Y+6	; 0x06
    224a:	fd 80       	ldd	r15, Y+5	; 0x05
    224c:	0c 81       	ldd	r16, Y+4	; 0x04
    224e:	1b 81       	ldd	r17, Y+3	; 0x03
    2250:	aa 81       	ldd	r26, Y+2	; 0x02
    2252:	b9 81       	ldd	r27, Y+1	; 0x01
    2254:	ce 0f       	add	r28, r30
    2256:	d1 1d       	adc	r29, r1
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	ed 01       	movw	r28, r26
    2264:	08 95       	ret

00002266 <_exit>:
    2266:	f8 94       	cli

00002268 <__stop_program>:
    2268:	ff cf       	rjmp	.-2      	; 0x2268 <__stop_program>
